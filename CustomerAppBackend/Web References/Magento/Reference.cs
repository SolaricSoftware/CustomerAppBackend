// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace CustomerAppBackend.Magento {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="Mage_Api_Model_Server_V2_HandlerPort", Namespace="urn:Magento")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MagentoService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback endSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback loginOperationCompleted;
        
        private System.Threading.SendOrPostCallback startSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback resourcesOperationCompleted;
        
        private System.Threading.SendOrPostCallback globalFaultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback resourceFaultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback storeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback storeInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback magentoInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback directoryCountryListOperationCompleted;
        
        private System.Threading.SendOrPostCallback directoryRegionListOperationCompleted;
        
        private System.Threading.SendOrPostCallback customerCustomerListOperationCompleted;
        
        private System.Threading.SendOrPostCallback customerCustomerCreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback customerCustomerInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback customerCustomerUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback customerCustomerDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback customerGroupListOperationCompleted;
        
        private System.Threading.SendOrPostCallback customerAddressListOperationCompleted;
        
        private System.Threading.SendOrPostCallback customerAddressCreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback customerAddressInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback customerAddressUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback customerAddressDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogCategoryCurrentStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogCategoryTreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogCategoryLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogCategoryInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogCategoryCreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogCategoryUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogCategoryMoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogCategoryDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogCategoryAssignedProductsOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogCategoryAssignProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogCategoryUpdateProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogCategoryRemoveProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductCurrentStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductListOfAdditionalAttributesOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductListOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductCreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductMultiUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductSetSpecialPriceOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductGetSpecialPriceOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeCurrentStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeSetCreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeOptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeSetRemoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeSetListOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeSetAttributeAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeSetAttributeRemoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeSetGroupAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeSetGroupRenameOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeSetGroupRemoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeCreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogCategoryAttributeCurrentStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeMediaCurrentStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeRemoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeAddOptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeRemoveOptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductTypeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeTierPriceInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeTierPriceUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogCategoryAttributeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogCategoryAttributeOptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeMediaListOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeMediaInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeMediaTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeMediaCreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeMediaUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductAttributeMediaRemoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductLinkListOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductLinkAssignOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductLinkUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductLinkRemoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductLinkTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductLinkAttributesOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductCustomOptionAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductCustomOptionUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductCustomOptionInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductCustomOptionTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductCustomOptionValueInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductCustomOptionValueListOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductCustomOptionValueAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductCustomOptionValueUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductCustomOptionValueRemoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductCustomOptionListOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductCustomOptionRemoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderListOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderAddCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderHoldOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderUnholdOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderShipmentListOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderShipmentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderShipmentCreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderShipmentAddCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderShipmentAddTrackOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderShipmentSendInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderShipmentRemoveTrackOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderShipmentGetCarriersOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderInvoiceListOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderInvoiceInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderInvoiceCreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderInvoiceAddCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderInvoiceCaptureOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderInvoiceVoidOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderInvoiceCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderCreditmemoListOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderCreditmemoInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderCreditmemoCreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderCreditmemoAddCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback salesOrderCreditmemoCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogInventoryStockItemListOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogInventoryStockItemUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogInventoryStockItemMultiUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback shoppingCartCreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback shoppingCartInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback shoppingCartTotalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback shoppingCartOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback shoppingCartLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback shoppingCartProductAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback shoppingCartProductUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback shoppingCartProductRemoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback shoppingCartProductListOperationCompleted;
        
        private System.Threading.SendOrPostCallback shoppingCartProductMoveToCustomerQuoteOperationCompleted;
        
        private System.Threading.SendOrPostCallback shoppingCartCustomerSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback shoppingCartCustomerAddressesOperationCompleted;
        
        private System.Threading.SendOrPostCallback shoppingCartShippingMethodOperationCompleted;
        
        private System.Threading.SendOrPostCallback shoppingCartShippingListOperationCompleted;
        
        private System.Threading.SendOrPostCallback shoppingCartPaymentMethodOperationCompleted;
        
        private System.Threading.SendOrPostCallback shoppingCartPaymentListOperationCompleted;
        
        private System.Threading.SendOrPostCallback shoppingCartCouponAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback shoppingCartCouponRemoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductTagListOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductTagInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductTagAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductTagUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductTagRemoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback giftMessageSetForQuoteOperationCompleted;
        
        private System.Threading.SendOrPostCallback giftMessageSetForQuoteItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback giftMessageSetForQuoteProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductDownloadableLinkAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductDownloadableLinkListOperationCompleted;
        
        private System.Threading.SendOrPostCallback catalogProductDownloadableLinkRemoveOperationCompleted;
        
        public MagentoService() {
            this.Url = "http://www.solaricsoftware.com/magento/index.php/api/v2_soap/index/";
        }
        
        public MagentoService(string url) {
            this.Url = url;
        }
        
        public event endSessionCompletedEventHandler endSessionCompleted;
        
        public event loginCompletedEventHandler loginCompleted;
        
        public event startSessionCompletedEventHandler startSessionCompleted;
        
        public event resourcesCompletedEventHandler resourcesCompleted;
        
        public event globalFaultsCompletedEventHandler globalFaultsCompleted;
        
        public event resourceFaultsCompletedEventHandler resourceFaultsCompleted;
        
        public event storeListCompletedEventHandler storeListCompleted;
        
        public event storeInfoCompletedEventHandler storeInfoCompleted;
        
        public event magentoInfoCompletedEventHandler magentoInfoCompleted;
        
        public event directoryCountryListCompletedEventHandler directoryCountryListCompleted;
        
        public event directoryRegionListCompletedEventHandler directoryRegionListCompleted;
        
        public event customerCustomerListCompletedEventHandler customerCustomerListCompleted;
        
        public event customerCustomerCreateCompletedEventHandler customerCustomerCreateCompleted;
        
        public event customerCustomerInfoCompletedEventHandler customerCustomerInfoCompleted;
        
        public event customerCustomerUpdateCompletedEventHandler customerCustomerUpdateCompleted;
        
        public event customerCustomerDeleteCompletedEventHandler customerCustomerDeleteCompleted;
        
        public event customerGroupListCompletedEventHandler customerGroupListCompleted;
        
        public event customerAddressListCompletedEventHandler customerAddressListCompleted;
        
        public event customerAddressCreateCompletedEventHandler customerAddressCreateCompleted;
        
        public event customerAddressInfoCompletedEventHandler customerAddressInfoCompleted;
        
        public event customerAddressUpdateCompletedEventHandler customerAddressUpdateCompleted;
        
        public event customerAddressDeleteCompletedEventHandler customerAddressDeleteCompleted;
        
        public event catalogCategoryCurrentStoreCompletedEventHandler catalogCategoryCurrentStoreCompleted;
        
        public event catalogCategoryTreeCompletedEventHandler catalogCategoryTreeCompleted;
        
        public event catalogCategoryLevelCompletedEventHandler catalogCategoryLevelCompleted;
        
        public event catalogCategoryInfoCompletedEventHandler catalogCategoryInfoCompleted;
        
        public event catalogCategoryCreateCompletedEventHandler catalogCategoryCreateCompleted;
        
        public event catalogCategoryUpdateCompletedEventHandler catalogCategoryUpdateCompleted;
        
        public event catalogCategoryMoveCompletedEventHandler catalogCategoryMoveCompleted;
        
        public event catalogCategoryDeleteCompletedEventHandler catalogCategoryDeleteCompleted;
        
        public event catalogCategoryAssignedProductsCompletedEventHandler catalogCategoryAssignedProductsCompleted;
        
        public event catalogCategoryAssignProductCompletedEventHandler catalogCategoryAssignProductCompleted;
        
        public event catalogCategoryUpdateProductCompletedEventHandler catalogCategoryUpdateProductCompleted;
        
        public event catalogCategoryRemoveProductCompletedEventHandler catalogCategoryRemoveProductCompleted;
        
        public event catalogProductCurrentStoreCompletedEventHandler catalogProductCurrentStoreCompleted;
        
        public event catalogProductListOfAdditionalAttributesCompletedEventHandler catalogProductListOfAdditionalAttributesCompleted;
        
        public event catalogProductListCompletedEventHandler catalogProductListCompleted;
        
        public event catalogProductInfoCompletedEventHandler catalogProductInfoCompleted;
        
        public event catalogProductCreateCompletedEventHandler catalogProductCreateCompleted;
        
        public event catalogProductUpdateCompletedEventHandler catalogProductUpdateCompleted;
        
        public event catalogProductMultiUpdateCompletedEventHandler catalogProductMultiUpdateCompleted;
        
        public event catalogProductSetSpecialPriceCompletedEventHandler catalogProductSetSpecialPriceCompleted;
        
        public event catalogProductGetSpecialPriceCompletedEventHandler catalogProductGetSpecialPriceCompleted;
        
        public event catalogProductDeleteCompletedEventHandler catalogProductDeleteCompleted;
        
        public event catalogProductAttributeCurrentStoreCompletedEventHandler catalogProductAttributeCurrentStoreCompleted;
        
        public event catalogProductAttributeSetCreateCompletedEventHandler catalogProductAttributeSetCreateCompleted;
        
        public event catalogProductAttributeListCompletedEventHandler catalogProductAttributeListCompleted;
        
        public event catalogProductAttributeOptionsCompletedEventHandler catalogProductAttributeOptionsCompleted;
        
        public event catalogProductAttributeSetRemoveCompletedEventHandler catalogProductAttributeSetRemoveCompleted;
        
        public event catalogProductAttributeSetListCompletedEventHandler catalogProductAttributeSetListCompleted;
        
        public event catalogProductAttributeSetAttributeAddCompletedEventHandler catalogProductAttributeSetAttributeAddCompleted;
        
        public event catalogProductAttributeSetAttributeRemoveCompletedEventHandler catalogProductAttributeSetAttributeRemoveCompleted;
        
        public event catalogProductAttributeSetGroupAddCompletedEventHandler catalogProductAttributeSetGroupAddCompleted;
        
        public event catalogProductAttributeSetGroupRenameCompletedEventHandler catalogProductAttributeSetGroupRenameCompleted;
        
        public event catalogProductAttributeSetGroupRemoveCompletedEventHandler catalogProductAttributeSetGroupRemoveCompleted;
        
        public event catalogProductAttributeTypesCompletedEventHandler catalogProductAttributeTypesCompleted;
        
        public event catalogProductAttributeCreateCompletedEventHandler catalogProductAttributeCreateCompleted;
        
        public event catalogCategoryAttributeCurrentStoreCompletedEventHandler catalogCategoryAttributeCurrentStoreCompleted;
        
        public event catalogProductAttributeMediaCurrentStoreCompletedEventHandler catalogProductAttributeMediaCurrentStoreCompleted;
        
        public event catalogProductAttributeRemoveCompletedEventHandler catalogProductAttributeRemoveCompleted;
        
        public event catalogProductAttributeInfoCompletedEventHandler catalogProductAttributeInfoCompleted;
        
        public event catalogProductAttributeUpdateCompletedEventHandler catalogProductAttributeUpdateCompleted;
        
        public event catalogProductAttributeAddOptionCompletedEventHandler catalogProductAttributeAddOptionCompleted;
        
        public event catalogProductAttributeRemoveOptionCompletedEventHandler catalogProductAttributeRemoveOptionCompleted;
        
        public event catalogProductTypeListCompletedEventHandler catalogProductTypeListCompleted;
        
        public event catalogProductAttributeTierPriceInfoCompletedEventHandler catalogProductAttributeTierPriceInfoCompleted;
        
        public event catalogProductAttributeTierPriceUpdateCompletedEventHandler catalogProductAttributeTierPriceUpdateCompleted;
        
        public event catalogCategoryAttributeListCompletedEventHandler catalogCategoryAttributeListCompleted;
        
        public event catalogCategoryAttributeOptionsCompletedEventHandler catalogCategoryAttributeOptionsCompleted;
        
        public event catalogProductAttributeMediaListCompletedEventHandler catalogProductAttributeMediaListCompleted;
        
        public event catalogProductAttributeMediaInfoCompletedEventHandler catalogProductAttributeMediaInfoCompleted;
        
        public event catalogProductAttributeMediaTypesCompletedEventHandler catalogProductAttributeMediaTypesCompleted;
        
        public event catalogProductAttributeMediaCreateCompletedEventHandler catalogProductAttributeMediaCreateCompleted;
        
        public event catalogProductAttributeMediaUpdateCompletedEventHandler catalogProductAttributeMediaUpdateCompleted;
        
        public event catalogProductAttributeMediaRemoveCompletedEventHandler catalogProductAttributeMediaRemoveCompleted;
        
        public event catalogProductLinkListCompletedEventHandler catalogProductLinkListCompleted;
        
        public event catalogProductLinkAssignCompletedEventHandler catalogProductLinkAssignCompleted;
        
        public event catalogProductLinkUpdateCompletedEventHandler catalogProductLinkUpdateCompleted;
        
        public event catalogProductLinkRemoveCompletedEventHandler catalogProductLinkRemoveCompleted;
        
        public event catalogProductLinkTypesCompletedEventHandler catalogProductLinkTypesCompleted;
        
        public event catalogProductLinkAttributesCompletedEventHandler catalogProductLinkAttributesCompleted;
        
        public event catalogProductCustomOptionAddCompletedEventHandler catalogProductCustomOptionAddCompleted;
        
        public event catalogProductCustomOptionUpdateCompletedEventHandler catalogProductCustomOptionUpdateCompleted;
        
        public event catalogProductCustomOptionInfoCompletedEventHandler catalogProductCustomOptionInfoCompleted;
        
        public event catalogProductCustomOptionTypesCompletedEventHandler catalogProductCustomOptionTypesCompleted;
        
        public event catalogProductCustomOptionValueInfoCompletedEventHandler catalogProductCustomOptionValueInfoCompleted;
        
        public event catalogProductCustomOptionValueListCompletedEventHandler catalogProductCustomOptionValueListCompleted;
        
        public event catalogProductCustomOptionValueAddCompletedEventHandler catalogProductCustomOptionValueAddCompleted;
        
        public event catalogProductCustomOptionValueUpdateCompletedEventHandler catalogProductCustomOptionValueUpdateCompleted;
        
        public event catalogProductCustomOptionValueRemoveCompletedEventHandler catalogProductCustomOptionValueRemoveCompleted;
        
        public event catalogProductCustomOptionListCompletedEventHandler catalogProductCustomOptionListCompleted;
        
        public event catalogProductCustomOptionRemoveCompletedEventHandler catalogProductCustomOptionRemoveCompleted;
        
        public event salesOrderListCompletedEventHandler salesOrderListCompleted;
        
        public event salesOrderInfoCompletedEventHandler salesOrderInfoCompleted;
        
        public event salesOrderAddCommentCompletedEventHandler salesOrderAddCommentCompleted;
        
        public event salesOrderHoldCompletedEventHandler salesOrderHoldCompleted;
        
        public event salesOrderUnholdCompletedEventHandler salesOrderUnholdCompleted;
        
        public event salesOrderCancelCompletedEventHandler salesOrderCancelCompleted;
        
        public event salesOrderShipmentListCompletedEventHandler salesOrderShipmentListCompleted;
        
        public event salesOrderShipmentInfoCompletedEventHandler salesOrderShipmentInfoCompleted;
        
        public event salesOrderShipmentCreateCompletedEventHandler salesOrderShipmentCreateCompleted;
        
        public event salesOrderShipmentAddCommentCompletedEventHandler salesOrderShipmentAddCommentCompleted;
        
        public event salesOrderShipmentAddTrackCompletedEventHandler salesOrderShipmentAddTrackCompleted;
        
        public event salesOrderShipmentSendInfoCompletedEventHandler salesOrderShipmentSendInfoCompleted;
        
        public event salesOrderShipmentRemoveTrackCompletedEventHandler salesOrderShipmentRemoveTrackCompleted;
        
        public event salesOrderShipmentGetCarriersCompletedEventHandler salesOrderShipmentGetCarriersCompleted;
        
        public event salesOrderInvoiceListCompletedEventHandler salesOrderInvoiceListCompleted;
        
        public event salesOrderInvoiceInfoCompletedEventHandler salesOrderInvoiceInfoCompleted;
        
        public event salesOrderInvoiceCreateCompletedEventHandler salesOrderInvoiceCreateCompleted;
        
        public event salesOrderInvoiceAddCommentCompletedEventHandler salesOrderInvoiceAddCommentCompleted;
        
        public event salesOrderInvoiceCaptureCompletedEventHandler salesOrderInvoiceCaptureCompleted;
        
        public event salesOrderInvoiceVoidCompletedEventHandler salesOrderInvoiceVoidCompleted;
        
        public event salesOrderInvoiceCancelCompletedEventHandler salesOrderInvoiceCancelCompleted;
        
        public event salesOrderCreditmemoListCompletedEventHandler salesOrderCreditmemoListCompleted;
        
        public event salesOrderCreditmemoInfoCompletedEventHandler salesOrderCreditmemoInfoCompleted;
        
        public event salesOrderCreditmemoCreateCompletedEventHandler salesOrderCreditmemoCreateCompleted;
        
        public event salesOrderCreditmemoAddCommentCompletedEventHandler salesOrderCreditmemoAddCommentCompleted;
        
        public event salesOrderCreditmemoCancelCompletedEventHandler salesOrderCreditmemoCancelCompleted;
        
        public event catalogInventoryStockItemListCompletedEventHandler catalogInventoryStockItemListCompleted;
        
        public event catalogInventoryStockItemUpdateCompletedEventHandler catalogInventoryStockItemUpdateCompleted;
        
        public event catalogInventoryStockItemMultiUpdateCompletedEventHandler catalogInventoryStockItemMultiUpdateCompleted;
        
        public event shoppingCartCreateCompletedEventHandler shoppingCartCreateCompleted;
        
        public event shoppingCartInfoCompletedEventHandler shoppingCartInfoCompleted;
        
        public event shoppingCartTotalsCompletedEventHandler shoppingCartTotalsCompleted;
        
        public event shoppingCartOrderCompletedEventHandler shoppingCartOrderCompleted;
        
        public event shoppingCartLicenseCompletedEventHandler shoppingCartLicenseCompleted;
        
        public event shoppingCartProductAddCompletedEventHandler shoppingCartProductAddCompleted;
        
        public event shoppingCartProductUpdateCompletedEventHandler shoppingCartProductUpdateCompleted;
        
        public event shoppingCartProductRemoveCompletedEventHandler shoppingCartProductRemoveCompleted;
        
        public event shoppingCartProductListCompletedEventHandler shoppingCartProductListCompleted;
        
        public event shoppingCartProductMoveToCustomerQuoteCompletedEventHandler shoppingCartProductMoveToCustomerQuoteCompleted;
        
        public event shoppingCartCustomerSetCompletedEventHandler shoppingCartCustomerSetCompleted;
        
        public event shoppingCartCustomerAddressesCompletedEventHandler shoppingCartCustomerAddressesCompleted;
        
        public event shoppingCartShippingMethodCompletedEventHandler shoppingCartShippingMethodCompleted;
        
        public event shoppingCartShippingListCompletedEventHandler shoppingCartShippingListCompleted;
        
        public event shoppingCartPaymentMethodCompletedEventHandler shoppingCartPaymentMethodCompleted;
        
        public event shoppingCartPaymentListCompletedEventHandler shoppingCartPaymentListCompleted;
        
        public event shoppingCartCouponAddCompletedEventHandler shoppingCartCouponAddCompleted;
        
        public event shoppingCartCouponRemoveCompletedEventHandler shoppingCartCouponRemoveCompleted;
        
        public event catalogProductTagListCompletedEventHandler catalogProductTagListCompleted;
        
        public event catalogProductTagInfoCompletedEventHandler catalogProductTagInfoCompleted;
        
        public event catalogProductTagAddCompletedEventHandler catalogProductTagAddCompleted;
        
        public event catalogProductTagUpdateCompletedEventHandler catalogProductTagUpdateCompleted;
        
        public event catalogProductTagRemoveCompletedEventHandler catalogProductTagRemoveCompleted;
        
        public event giftMessageSetForQuoteCompletedEventHandler giftMessageSetForQuoteCompleted;
        
        public event giftMessageSetForQuoteItemCompletedEventHandler giftMessageSetForQuoteItemCompleted;
        
        public event giftMessageSetForQuoteProductCompletedEventHandler giftMessageSetForQuoteProductCompleted;
        
        public event catalogProductDownloadableLinkAddCompletedEventHandler catalogProductDownloadableLinkAddCompleted;
        
        public event catalogProductDownloadableLinkListCompletedEventHandler catalogProductDownloadableLinkListCompleted;
        
        public event catalogProductDownloadableLinkRemoveCompletedEventHandler catalogProductDownloadableLinkRemoveCompleted;
        
        /// <remarks>
///End web service session
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("endSessionReturn")]
        public bool endSession(string sessionId) {
            object[] results = this.Invoke("endSession", new object[] {
                        sessionId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginendSession(string sessionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("endSession", new object[] {
                        sessionId}, callback, asyncState);
        }
        
        public bool EndendSession(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void endSessionAsync(string sessionId) {
            this.endSessionAsync(sessionId, null);
        }
        
        public void endSessionAsync(string sessionId, object userState) {
            if ((this.endSessionOperationCompleted == null)) {
                this.endSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnendSessionCompleted);
            }
            this.InvokeAsync("endSession", new object[] {
                        sessionId}, this.endSessionOperationCompleted, userState);
        }
        
        private void OnendSessionCompleted(object arg) {
            if ((this.endSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.endSessionCompleted(this, new endSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Login user and retrive session id
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("loginReturn")]
        public string login(string username, string apiKey) {
            object[] results = this.Invoke("login", new object[] {
                        username,
                        apiKey});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult Beginlogin(string username, string apiKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("login", new object[] {
                        username,
                        apiKey}, callback, asyncState);
        }
        
        public string Endlogin(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void loginAsync(string username, string apiKey) {
            this.loginAsync(username, apiKey, null);
        }
        
        public void loginAsync(string username, string apiKey, object userState) {
            if ((this.loginOperationCompleted == null)) {
                this.loginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloginCompleted);
            }
            this.InvokeAsync("login", new object[] {
                        username,
                        apiKey}, this.loginOperationCompleted, userState);
        }
        
        private void OnloginCompleted(object arg) {
            if ((this.loginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loginCompleted(this, new loginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Start web service session
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("startSessionReturn")]
        public string startSession() {
            object[] results = this.Invoke("startSession", new object[0]);
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginstartSession(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("startSession", new object[0], callback, asyncState);
        }
        
        public string EndstartSession(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void startSessionAsync() {
            this.startSessionAsync(null);
        }
        
        public void startSessionAsync(object userState) {
            if ((this.startSessionOperationCompleted == null)) {
                this.startSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnstartSessionCompleted);
            }
            this.InvokeAsync("startSession", new object[0], this.startSessionOperationCompleted, userState);
        }
        
        private void OnstartSessionCompleted(object arg) {
            if ((this.startSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.startSessionCompleted(this, new startSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///List of available resources
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("resourcesReturn")]
        public apiEntity[] resources(string sessionId) {
            object[] results = this.Invoke("resources", new object[] {
                        sessionId});
            return ((apiEntity[])(results[0]));
        }
        
        public System.IAsyncResult Beginresources(string sessionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("resources", new object[] {
                        sessionId}, callback, asyncState);
        }
        
        public apiEntity[] Endresources(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((apiEntity[])(results[0]));
        }
        
        public void resourcesAsync(string sessionId) {
            this.resourcesAsync(sessionId, null);
        }
        
        public void resourcesAsync(string sessionId, object userState) {
            if ((this.resourcesOperationCompleted == null)) {
                this.resourcesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnresourcesCompleted);
            }
            this.InvokeAsync("resources", new object[] {
                        sessionId}, this.resourcesOperationCompleted, userState);
        }
        
        private void OnresourcesCompleted(object arg) {
            if ((this.resourcesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.resourcesCompleted(this, new resourcesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///List of global faults
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("globalFaultsReturn")]
        public existsFaltureEntity[] globalFaults(string sessionId) {
            object[] results = this.Invoke("globalFaults", new object[] {
                        sessionId});
            return ((existsFaltureEntity[])(results[0]));
        }
        
        public System.IAsyncResult BeginglobalFaults(string sessionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("globalFaults", new object[] {
                        sessionId}, callback, asyncState);
        }
        
        public existsFaltureEntity[] EndglobalFaults(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((existsFaltureEntity[])(results[0]));
        }
        
        public void globalFaultsAsync(string sessionId) {
            this.globalFaultsAsync(sessionId, null);
        }
        
        public void globalFaultsAsync(string sessionId, object userState) {
            if ((this.globalFaultsOperationCompleted == null)) {
                this.globalFaultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnglobalFaultsCompleted);
            }
            this.InvokeAsync("globalFaults", new object[] {
                        sessionId}, this.globalFaultsOperationCompleted, userState);
        }
        
        private void OnglobalFaultsCompleted(object arg) {
            if ((this.globalFaultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.globalFaultsCompleted(this, new globalFaultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///List of resource faults
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("resourceFaultsReturn")]
        public existsFaltureEntity[] resourceFaults(string resourceName, string sessionId) {
            object[] results = this.Invoke("resourceFaults", new object[] {
                        resourceName,
                        sessionId});
            return ((existsFaltureEntity[])(results[0]));
        }
        
        public System.IAsyncResult BeginresourceFaults(string resourceName, string sessionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("resourceFaults", new object[] {
                        resourceName,
                        sessionId}, callback, asyncState);
        }
        
        public existsFaltureEntity[] EndresourceFaults(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((existsFaltureEntity[])(results[0]));
        }
        
        public void resourceFaultsAsync(string resourceName, string sessionId) {
            this.resourceFaultsAsync(resourceName, sessionId, null);
        }
        
        public void resourceFaultsAsync(string resourceName, string sessionId, object userState) {
            if ((this.resourceFaultsOperationCompleted == null)) {
                this.resourceFaultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnresourceFaultsCompleted);
            }
            this.InvokeAsync("resourceFaults", new object[] {
                        resourceName,
                        sessionId}, this.resourceFaultsOperationCompleted, userState);
        }
        
        private void OnresourceFaultsCompleted(object arg) {
            if ((this.resourceFaultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.resourceFaultsCompleted(this, new resourceFaultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///List of stores
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("stores")]
        public storeEntity[] storeList(string sessionId) {
            object[] results = this.Invoke("storeList", new object[] {
                        sessionId});
            return ((storeEntity[])(results[0]));
        }
        
        public System.IAsyncResult BeginstoreList(string sessionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("storeList", new object[] {
                        sessionId}, callback, asyncState);
        }
        
        public storeEntity[] EndstoreList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((storeEntity[])(results[0]));
        }
        
        public void storeListAsync(string sessionId) {
            this.storeListAsync(sessionId, null);
        }
        
        public void storeListAsync(string sessionId, object userState) {
            if ((this.storeListOperationCompleted == null)) {
                this.storeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnstoreListCompleted);
            }
            this.InvokeAsync("storeList", new object[] {
                        sessionId}, this.storeListOperationCompleted, userState);
        }
        
        private void OnstoreListCompleted(object arg) {
            if ((this.storeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.storeListCompleted(this, new storeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Store view info
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("info")]
        public storeEntity storeInfo(string sessionId, string storeId) {
            object[] results = this.Invoke("storeInfo", new object[] {
                        sessionId,
                        storeId});
            return ((storeEntity)(results[0]));
        }
        
        public System.IAsyncResult BeginstoreInfo(string sessionId, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("storeInfo", new object[] {
                        sessionId,
                        storeId}, callback, asyncState);
        }
        
        public storeEntity EndstoreInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((storeEntity)(results[0]));
        }
        
        public void storeInfoAsync(string sessionId, string storeId) {
            this.storeInfoAsync(sessionId, storeId, null);
        }
        
        public void storeInfoAsync(string sessionId, string storeId, object userState) {
            if ((this.storeInfoOperationCompleted == null)) {
                this.storeInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnstoreInfoCompleted);
            }
            this.InvokeAsync("storeInfo", new object[] {
                        sessionId,
                        storeId}, this.storeInfoOperationCompleted, userState);
        }
        
        private void OnstoreInfoCompleted(object arg) {
            if ((this.storeInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.storeInfoCompleted(this, new storeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Info about current Magento installation
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("info")]
        public magentoInfoEntity magentoInfo(string sessionId) {
            object[] results = this.Invoke("magentoInfo", new object[] {
                        sessionId});
            return ((magentoInfoEntity)(results[0]));
        }
        
        public System.IAsyncResult BeginmagentoInfo(string sessionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("magentoInfo", new object[] {
                        sessionId}, callback, asyncState);
        }
        
        public magentoInfoEntity EndmagentoInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((magentoInfoEntity)(results[0]));
        }
        
        public void magentoInfoAsync(string sessionId) {
            this.magentoInfoAsync(sessionId, null);
        }
        
        public void magentoInfoAsync(string sessionId, object userState) {
            if ((this.magentoInfoOperationCompleted == null)) {
                this.magentoInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmagentoInfoCompleted);
            }
            this.InvokeAsync("magentoInfo", new object[] {
                        sessionId}, this.magentoInfoOperationCompleted, userState);
        }
        
        private void OnmagentoInfoCompleted(object arg) {
            if ((this.magentoInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.magentoInfoCompleted(this, new magentoInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///List of countries
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("countries")]
        public directoryCountryEntity[] directoryCountryList(string sessionId) {
            object[] results = this.Invoke("directoryCountryList", new object[] {
                        sessionId});
            return ((directoryCountryEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegindirectoryCountryList(string sessionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("directoryCountryList", new object[] {
                        sessionId}, callback, asyncState);
        }
        
        public directoryCountryEntity[] EnddirectoryCountryList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((directoryCountryEntity[])(results[0]));
        }
        
        public void directoryCountryListAsync(string sessionId) {
            this.directoryCountryListAsync(sessionId, null);
        }
        
        public void directoryCountryListAsync(string sessionId, object userState) {
            if ((this.directoryCountryListOperationCompleted == null)) {
                this.directoryCountryListOperationCompleted = new System.Threading.SendOrPostCallback(this.OndirectoryCountryListCompleted);
            }
            this.InvokeAsync("directoryCountryList", new object[] {
                        sessionId}, this.directoryCountryListOperationCompleted, userState);
        }
        
        private void OndirectoryCountryListCompleted(object arg) {
            if ((this.directoryCountryListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.directoryCountryListCompleted(this, new directoryCountryListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///List of regions in specified country
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("countries")]
        public directoryRegionEntity[] directoryRegionList(string sessionId, string country) {
            object[] results = this.Invoke("directoryRegionList", new object[] {
                        sessionId,
                        country});
            return ((directoryRegionEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegindirectoryRegionList(string sessionId, string country, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("directoryRegionList", new object[] {
                        sessionId,
                        country}, callback, asyncState);
        }
        
        public directoryRegionEntity[] EnddirectoryRegionList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((directoryRegionEntity[])(results[0]));
        }
        
        public void directoryRegionListAsync(string sessionId, string country) {
            this.directoryRegionListAsync(sessionId, country, null);
        }
        
        public void directoryRegionListAsync(string sessionId, string country, object userState) {
            if ((this.directoryRegionListOperationCompleted == null)) {
                this.directoryRegionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OndirectoryRegionListCompleted);
            }
            this.InvokeAsync("directoryRegionList", new object[] {
                        sessionId,
                        country}, this.directoryRegionListOperationCompleted, userState);
        }
        
        private void OndirectoryRegionListCompleted(object arg) {
            if ((this.directoryRegionListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.directoryRegionListCompleted(this, new directoryRegionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve customers
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("storeView")]
        public customerCustomerEntity[] customerCustomerList(string sessionId, filters filters) {
            object[] results = this.Invoke("customerCustomerList", new object[] {
                        sessionId,
                        filters});
            return ((customerCustomerEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincustomerCustomerList(string sessionId, filters filters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("customerCustomerList", new object[] {
                        sessionId,
                        filters}, callback, asyncState);
        }
        
        public customerCustomerEntity[] EndcustomerCustomerList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((customerCustomerEntity[])(results[0]));
        }
        
        public void customerCustomerListAsync(string sessionId, filters filters) {
            this.customerCustomerListAsync(sessionId, filters, null);
        }
        
        public void customerCustomerListAsync(string sessionId, filters filters, object userState) {
            if ((this.customerCustomerListOperationCompleted == null)) {
                this.customerCustomerListOperationCompleted = new System.Threading.SendOrPostCallback(this.OncustomerCustomerListCompleted);
            }
            this.InvokeAsync("customerCustomerList", new object[] {
                        sessionId,
                        filters}, this.customerCustomerListOperationCompleted, userState);
        }
        
        private void OncustomerCustomerListCompleted(object arg) {
            if ((this.customerCustomerListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.customerCustomerListCompleted(this, new customerCustomerListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Create customer
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public int customerCustomerCreate(string sessionId, customerCustomerEntityToCreate customerData) {
            object[] results = this.Invoke("customerCustomerCreate", new object[] {
                        sessionId,
                        customerData});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BegincustomerCustomerCreate(string sessionId, customerCustomerEntityToCreate customerData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("customerCustomerCreate", new object[] {
                        sessionId,
                        customerData}, callback, asyncState);
        }
        
        public int EndcustomerCustomerCreate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void customerCustomerCreateAsync(string sessionId, customerCustomerEntityToCreate customerData) {
            this.customerCustomerCreateAsync(sessionId, customerData, null);
        }
        
        public void customerCustomerCreateAsync(string sessionId, customerCustomerEntityToCreate customerData, object userState) {
            if ((this.customerCustomerCreateOperationCompleted == null)) {
                this.customerCustomerCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncustomerCustomerCreateCompleted);
            }
            this.InvokeAsync("customerCustomerCreate", new object[] {
                        sessionId,
                        customerData}, this.customerCustomerCreateOperationCompleted, userState);
        }
        
        private void OncustomerCustomerCreateCompleted(object arg) {
            if ((this.customerCustomerCreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.customerCustomerCreateCompleted(this, new customerCustomerCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve customer data
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("customerInfo")]
        public customerCustomerEntity customerCustomerInfo(string sessionId, int customerId, string[] attributes) {
            object[] results = this.Invoke("customerCustomerInfo", new object[] {
                        sessionId,
                        customerId,
                        attributes});
            return ((customerCustomerEntity)(results[0]));
        }
        
        public System.IAsyncResult BegincustomerCustomerInfo(string sessionId, int customerId, string[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("customerCustomerInfo", new object[] {
                        sessionId,
                        customerId,
                        attributes}, callback, asyncState);
        }
        
        public customerCustomerEntity EndcustomerCustomerInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((customerCustomerEntity)(results[0]));
        }
        
        public void customerCustomerInfoAsync(string sessionId, int customerId, string[] attributes) {
            this.customerCustomerInfoAsync(sessionId, customerId, attributes, null);
        }
        
        public void customerCustomerInfoAsync(string sessionId, int customerId, string[] attributes, object userState) {
            if ((this.customerCustomerInfoOperationCompleted == null)) {
                this.customerCustomerInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OncustomerCustomerInfoCompleted);
            }
            this.InvokeAsync("customerCustomerInfo", new object[] {
                        sessionId,
                        customerId,
                        attributes}, this.customerCustomerInfoOperationCompleted, userState);
        }
        
        private void OncustomerCustomerInfoCompleted(object arg) {
            if ((this.customerCustomerInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.customerCustomerInfoCompleted(this, new customerCustomerInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Update customer data
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool customerCustomerUpdate(string sessionId, int customerId, customerCustomerEntityToCreate customerData) {
            object[] results = this.Invoke("customerCustomerUpdate", new object[] {
                        sessionId,
                        customerId,
                        customerData});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincustomerCustomerUpdate(string sessionId, int customerId, customerCustomerEntityToCreate customerData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("customerCustomerUpdate", new object[] {
                        sessionId,
                        customerId,
                        customerData}, callback, asyncState);
        }
        
        public bool EndcustomerCustomerUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void customerCustomerUpdateAsync(string sessionId, int customerId, customerCustomerEntityToCreate customerData) {
            this.customerCustomerUpdateAsync(sessionId, customerId, customerData, null);
        }
        
        public void customerCustomerUpdateAsync(string sessionId, int customerId, customerCustomerEntityToCreate customerData, object userState) {
            if ((this.customerCustomerUpdateOperationCompleted == null)) {
                this.customerCustomerUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncustomerCustomerUpdateCompleted);
            }
            this.InvokeAsync("customerCustomerUpdate", new object[] {
                        sessionId,
                        customerId,
                        customerData}, this.customerCustomerUpdateOperationCompleted, userState);
        }
        
        private void OncustomerCustomerUpdateCompleted(object arg) {
            if ((this.customerCustomerUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.customerCustomerUpdateCompleted(this, new customerCustomerUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Delete customer
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool customerCustomerDelete(string sessionId, int customerId) {
            object[] results = this.Invoke("customerCustomerDelete", new object[] {
                        sessionId,
                        customerId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincustomerCustomerDelete(string sessionId, int customerId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("customerCustomerDelete", new object[] {
                        sessionId,
                        customerId}, callback, asyncState);
        }
        
        public bool EndcustomerCustomerDelete(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void customerCustomerDeleteAsync(string sessionId, int customerId) {
            this.customerCustomerDeleteAsync(sessionId, customerId, null);
        }
        
        public void customerCustomerDeleteAsync(string sessionId, int customerId, object userState) {
            if ((this.customerCustomerDeleteOperationCompleted == null)) {
                this.customerCustomerDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OncustomerCustomerDeleteCompleted);
            }
            this.InvokeAsync("customerCustomerDelete", new object[] {
                        sessionId,
                        customerId}, this.customerCustomerDeleteOperationCompleted, userState);
        }
        
        private void OncustomerCustomerDeleteCompleted(object arg) {
            if ((this.customerCustomerDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.customerCustomerDeleteCompleted(this, new customerCustomerDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve customer groups
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public customerGroupEntity[] customerGroupList(string sessionId) {
            object[] results = this.Invoke("customerGroupList", new object[] {
                        sessionId});
            return ((customerGroupEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincustomerGroupList(string sessionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("customerGroupList", new object[] {
                        sessionId}, callback, asyncState);
        }
        
        public customerGroupEntity[] EndcustomerGroupList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((customerGroupEntity[])(results[0]));
        }
        
        public void customerGroupListAsync(string sessionId) {
            this.customerGroupListAsync(sessionId, null);
        }
        
        public void customerGroupListAsync(string sessionId, object userState) {
            if ((this.customerGroupListOperationCompleted == null)) {
                this.customerGroupListOperationCompleted = new System.Threading.SendOrPostCallback(this.OncustomerGroupListCompleted);
            }
            this.InvokeAsync("customerGroupList", new object[] {
                        sessionId}, this.customerGroupListOperationCompleted, userState);
        }
        
        private void OncustomerGroupListCompleted(object arg) {
            if ((this.customerGroupListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.customerGroupListCompleted(this, new customerGroupListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve customer addresses
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public customerAddressEntityItem[] customerAddressList(string sessionId, int customerId) {
            object[] results = this.Invoke("customerAddressList", new object[] {
                        sessionId,
                        customerId});
            return ((customerAddressEntityItem[])(results[0]));
        }
        
        public System.IAsyncResult BegincustomerAddressList(string sessionId, int customerId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("customerAddressList", new object[] {
                        sessionId,
                        customerId}, callback, asyncState);
        }
        
        public customerAddressEntityItem[] EndcustomerAddressList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((customerAddressEntityItem[])(results[0]));
        }
        
        public void customerAddressListAsync(string sessionId, int customerId) {
            this.customerAddressListAsync(sessionId, customerId, null);
        }
        
        public void customerAddressListAsync(string sessionId, int customerId, object userState) {
            if ((this.customerAddressListOperationCompleted == null)) {
                this.customerAddressListOperationCompleted = new System.Threading.SendOrPostCallback(this.OncustomerAddressListCompleted);
            }
            this.InvokeAsync("customerAddressList", new object[] {
                        sessionId,
                        customerId}, this.customerAddressListOperationCompleted, userState);
        }
        
        private void OncustomerAddressListCompleted(object arg) {
            if ((this.customerAddressListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.customerAddressListCompleted(this, new customerAddressListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Create customer address
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public int customerAddressCreate(string sessionId, int customerId, customerAddressEntityCreate addressData) {
            object[] results = this.Invoke("customerAddressCreate", new object[] {
                        sessionId,
                        customerId,
                        addressData});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BegincustomerAddressCreate(string sessionId, int customerId, customerAddressEntityCreate addressData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("customerAddressCreate", new object[] {
                        sessionId,
                        customerId,
                        addressData}, callback, asyncState);
        }
        
        public int EndcustomerAddressCreate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void customerAddressCreateAsync(string sessionId, int customerId, customerAddressEntityCreate addressData) {
            this.customerAddressCreateAsync(sessionId, customerId, addressData, null);
        }
        
        public void customerAddressCreateAsync(string sessionId, int customerId, customerAddressEntityCreate addressData, object userState) {
            if ((this.customerAddressCreateOperationCompleted == null)) {
                this.customerAddressCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncustomerAddressCreateCompleted);
            }
            this.InvokeAsync("customerAddressCreate", new object[] {
                        sessionId,
                        customerId,
                        addressData}, this.customerAddressCreateOperationCompleted, userState);
        }
        
        private void OncustomerAddressCreateCompleted(object arg) {
            if ((this.customerAddressCreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.customerAddressCreateCompleted(this, new customerAddressCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve customer address data
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("info")]
        public customerAddressEntityItem customerAddressInfo(string sessionId, int addressId) {
            object[] results = this.Invoke("customerAddressInfo", new object[] {
                        sessionId,
                        addressId});
            return ((customerAddressEntityItem)(results[0]));
        }
        
        public System.IAsyncResult BegincustomerAddressInfo(string sessionId, int addressId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("customerAddressInfo", new object[] {
                        sessionId,
                        addressId}, callback, asyncState);
        }
        
        public customerAddressEntityItem EndcustomerAddressInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((customerAddressEntityItem)(results[0]));
        }
        
        public void customerAddressInfoAsync(string sessionId, int addressId) {
            this.customerAddressInfoAsync(sessionId, addressId, null);
        }
        
        public void customerAddressInfoAsync(string sessionId, int addressId, object userState) {
            if ((this.customerAddressInfoOperationCompleted == null)) {
                this.customerAddressInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OncustomerAddressInfoCompleted);
            }
            this.InvokeAsync("customerAddressInfo", new object[] {
                        sessionId,
                        addressId}, this.customerAddressInfoOperationCompleted, userState);
        }
        
        private void OncustomerAddressInfoCompleted(object arg) {
            if ((this.customerAddressInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.customerAddressInfoCompleted(this, new customerAddressInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Update customer address data
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("info")]
        public bool customerAddressUpdate(string sessionId, int addressId, customerAddressEntityCreate addressData) {
            object[] results = this.Invoke("customerAddressUpdate", new object[] {
                        sessionId,
                        addressId,
                        addressData});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincustomerAddressUpdate(string sessionId, int addressId, customerAddressEntityCreate addressData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("customerAddressUpdate", new object[] {
                        sessionId,
                        addressId,
                        addressData}, callback, asyncState);
        }
        
        public bool EndcustomerAddressUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void customerAddressUpdateAsync(string sessionId, int addressId, customerAddressEntityCreate addressData) {
            this.customerAddressUpdateAsync(sessionId, addressId, addressData, null);
        }
        
        public void customerAddressUpdateAsync(string sessionId, int addressId, customerAddressEntityCreate addressData, object userState) {
            if ((this.customerAddressUpdateOperationCompleted == null)) {
                this.customerAddressUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncustomerAddressUpdateCompleted);
            }
            this.InvokeAsync("customerAddressUpdate", new object[] {
                        sessionId,
                        addressId,
                        addressData}, this.customerAddressUpdateOperationCompleted, userState);
        }
        
        private void OncustomerAddressUpdateCompleted(object arg) {
            if ((this.customerAddressUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.customerAddressUpdateCompleted(this, new customerAddressUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Delete customer address
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("info")]
        public bool customerAddressDelete(string sessionId, int addressId) {
            object[] results = this.Invoke("customerAddressDelete", new object[] {
                        sessionId,
                        addressId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincustomerAddressDelete(string sessionId, int addressId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("customerAddressDelete", new object[] {
                        sessionId,
                        addressId}, callback, asyncState);
        }
        
        public bool EndcustomerAddressDelete(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void customerAddressDeleteAsync(string sessionId, int addressId) {
            this.customerAddressDeleteAsync(sessionId, addressId, null);
        }
        
        public void customerAddressDeleteAsync(string sessionId, int addressId, object userState) {
            if ((this.customerAddressDeleteOperationCompleted == null)) {
                this.customerAddressDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OncustomerAddressDeleteCompleted);
            }
            this.InvokeAsync("customerAddressDelete", new object[] {
                        sessionId,
                        addressId}, this.customerAddressDeleteOperationCompleted, userState);
        }
        
        private void OncustomerAddressDeleteCompleted(object arg) {
            if ((this.customerAddressDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.customerAddressDeleteCompleted(this, new customerAddressDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Set_Get current store view
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("storeView")]
        public int catalogCategoryCurrentStore(string sessionId, string storeView) {
            object[] results = this.Invoke("catalogCategoryCurrentStore", new object[] {
                        sessionId,
                        storeView});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogCategoryCurrentStore(string sessionId, string storeView, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogCategoryCurrentStore", new object[] {
                        sessionId,
                        storeView}, callback, asyncState);
        }
        
        public int EndcatalogCategoryCurrentStore(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void catalogCategoryCurrentStoreAsync(string sessionId, string storeView) {
            this.catalogCategoryCurrentStoreAsync(sessionId, storeView, null);
        }
        
        public void catalogCategoryCurrentStoreAsync(string sessionId, string storeView, object userState) {
            if ((this.catalogCategoryCurrentStoreOperationCompleted == null)) {
                this.catalogCategoryCurrentStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogCategoryCurrentStoreCompleted);
            }
            this.InvokeAsync("catalogCategoryCurrentStore", new object[] {
                        sessionId,
                        storeView}, this.catalogCategoryCurrentStoreOperationCompleted, userState);
        }
        
        private void OncatalogCategoryCurrentStoreCompleted(object arg) {
            if ((this.catalogCategoryCurrentStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogCategoryCurrentStoreCompleted(this, new catalogCategoryCurrentStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve hierarchical tree of categories.
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("tree")]
        public catalogCategoryTree catalogCategoryTree(string sessionId, string parentId, string storeView) {
            object[] results = this.Invoke("catalogCategoryTree", new object[] {
                        sessionId,
                        parentId,
                        storeView});
            return ((catalogCategoryTree)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogCategoryTree(string sessionId, string parentId, string storeView, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogCategoryTree", new object[] {
                        sessionId,
                        parentId,
                        storeView}, callback, asyncState);
        }
        
        public catalogCategoryTree EndcatalogCategoryTree(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogCategoryTree)(results[0]));
        }
        
        public void catalogCategoryTreeAsync(string sessionId, string parentId, string storeView) {
            this.catalogCategoryTreeAsync(sessionId, parentId, storeView, null);
        }
        
        public void catalogCategoryTreeAsync(string sessionId, string parentId, string storeView, object userState) {
            if ((this.catalogCategoryTreeOperationCompleted == null)) {
                this.catalogCategoryTreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogCategoryTreeCompleted);
            }
            this.InvokeAsync("catalogCategoryTree", new object[] {
                        sessionId,
                        parentId,
                        storeView}, this.catalogCategoryTreeOperationCompleted, userState);
        }
        
        private void OncatalogCategoryTreeCompleted(object arg) {
            if ((this.catalogCategoryTreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogCategoryTreeCompleted(this, new catalogCategoryTreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve hierarchical tree of categories.
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("tree")]
        public catalogCategoryEntityNoChildren[] catalogCategoryLevel(string sessionId, string website, string storeView, string parentCategory) {
            object[] results = this.Invoke("catalogCategoryLevel", new object[] {
                        sessionId,
                        website,
                        storeView,
                        parentCategory});
            return ((catalogCategoryEntityNoChildren[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogCategoryLevel(string sessionId, string website, string storeView, string parentCategory, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogCategoryLevel", new object[] {
                        sessionId,
                        website,
                        storeView,
                        parentCategory}, callback, asyncState);
        }
        
        public catalogCategoryEntityNoChildren[] EndcatalogCategoryLevel(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogCategoryEntityNoChildren[])(results[0]));
        }
        
        public void catalogCategoryLevelAsync(string sessionId, string website, string storeView, string parentCategory) {
            this.catalogCategoryLevelAsync(sessionId, website, storeView, parentCategory, null);
        }
        
        public void catalogCategoryLevelAsync(string sessionId, string website, string storeView, string parentCategory, object userState) {
            if ((this.catalogCategoryLevelOperationCompleted == null)) {
                this.catalogCategoryLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogCategoryLevelCompleted);
            }
            this.InvokeAsync("catalogCategoryLevel", new object[] {
                        sessionId,
                        website,
                        storeView,
                        parentCategory}, this.catalogCategoryLevelOperationCompleted, userState);
        }
        
        private void OncatalogCategoryLevelCompleted(object arg) {
            if ((this.catalogCategoryLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogCategoryLevelCompleted(this, new catalogCategoryLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve hierarchical tree of categories.
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("info")]
        public catalogCategoryInfo catalogCategoryInfo(string sessionId, int categoryId, string storeView, string[] attributes) {
            object[] results = this.Invoke("catalogCategoryInfo", new object[] {
                        sessionId,
                        categoryId,
                        storeView,
                        attributes});
            return ((catalogCategoryInfo)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogCategoryInfo(string sessionId, int categoryId, string storeView, string[] attributes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogCategoryInfo", new object[] {
                        sessionId,
                        categoryId,
                        storeView,
                        attributes}, callback, asyncState);
        }
        
        public catalogCategoryInfo EndcatalogCategoryInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogCategoryInfo)(results[0]));
        }
        
        public void catalogCategoryInfoAsync(string sessionId, int categoryId, string storeView, string[] attributes) {
            this.catalogCategoryInfoAsync(sessionId, categoryId, storeView, attributes, null);
        }
        
        public void catalogCategoryInfoAsync(string sessionId, int categoryId, string storeView, string[] attributes, object userState) {
            if ((this.catalogCategoryInfoOperationCompleted == null)) {
                this.catalogCategoryInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogCategoryInfoCompleted);
            }
            this.InvokeAsync("catalogCategoryInfo", new object[] {
                        sessionId,
                        categoryId,
                        storeView,
                        attributes}, this.catalogCategoryInfoOperationCompleted, userState);
        }
        
        private void OncatalogCategoryInfoCompleted(object arg) {
            if ((this.catalogCategoryInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogCategoryInfoCompleted(this, new catalogCategoryInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Create new category and return its id.
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("attribute_id")]
        public int catalogCategoryCreate(string sessionId, int parentId, catalogCategoryEntityCreate categoryData, string storeView) {
            object[] results = this.Invoke("catalogCategoryCreate", new object[] {
                        sessionId,
                        parentId,
                        categoryData,
                        storeView});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogCategoryCreate(string sessionId, int parentId, catalogCategoryEntityCreate categoryData, string storeView, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogCategoryCreate", new object[] {
                        sessionId,
                        parentId,
                        categoryData,
                        storeView}, callback, asyncState);
        }
        
        public int EndcatalogCategoryCreate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void catalogCategoryCreateAsync(string sessionId, int parentId, catalogCategoryEntityCreate categoryData, string storeView) {
            this.catalogCategoryCreateAsync(sessionId, parentId, categoryData, storeView, null);
        }
        
        public void catalogCategoryCreateAsync(string sessionId, int parentId, catalogCategoryEntityCreate categoryData, string storeView, object userState) {
            if ((this.catalogCategoryCreateOperationCompleted == null)) {
                this.catalogCategoryCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogCategoryCreateCompleted);
            }
            this.InvokeAsync("catalogCategoryCreate", new object[] {
                        sessionId,
                        parentId,
                        categoryData,
                        storeView}, this.catalogCategoryCreateOperationCompleted, userState);
        }
        
        private void OncatalogCategoryCreateCompleted(object arg) {
            if ((this.catalogCategoryCreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogCategoryCreateCompleted(this, new catalogCategoryCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Update category
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("id")]
        public bool catalogCategoryUpdate(string sessionId, int categoryId, catalogCategoryEntityCreate categoryData, string storeView) {
            object[] results = this.Invoke("catalogCategoryUpdate", new object[] {
                        sessionId,
                        categoryId,
                        categoryData,
                        storeView});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogCategoryUpdate(string sessionId, int categoryId, catalogCategoryEntityCreate categoryData, string storeView, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogCategoryUpdate", new object[] {
                        sessionId,
                        categoryId,
                        categoryData,
                        storeView}, callback, asyncState);
        }
        
        public bool EndcatalogCategoryUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogCategoryUpdateAsync(string sessionId, int categoryId, catalogCategoryEntityCreate categoryData, string storeView) {
            this.catalogCategoryUpdateAsync(sessionId, categoryId, categoryData, storeView, null);
        }
        
        public void catalogCategoryUpdateAsync(string sessionId, int categoryId, catalogCategoryEntityCreate categoryData, string storeView, object userState) {
            if ((this.catalogCategoryUpdateOperationCompleted == null)) {
                this.catalogCategoryUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogCategoryUpdateCompleted);
            }
            this.InvokeAsync("catalogCategoryUpdate", new object[] {
                        sessionId,
                        categoryId,
                        categoryData,
                        storeView}, this.catalogCategoryUpdateOperationCompleted, userState);
        }
        
        private void OncatalogCategoryUpdateCompleted(object arg) {
            if ((this.catalogCategoryUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogCategoryUpdateCompleted(this, new catalogCategoryUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Move category in tree
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("id")]
        public bool catalogCategoryMove(string sessionId, int categoryId, int parentId, string afterId) {
            object[] results = this.Invoke("catalogCategoryMove", new object[] {
                        sessionId,
                        categoryId,
                        parentId,
                        afterId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogCategoryMove(string sessionId, int categoryId, int parentId, string afterId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogCategoryMove", new object[] {
                        sessionId,
                        categoryId,
                        parentId,
                        afterId}, callback, asyncState);
        }
        
        public bool EndcatalogCategoryMove(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogCategoryMoveAsync(string sessionId, int categoryId, int parentId, string afterId) {
            this.catalogCategoryMoveAsync(sessionId, categoryId, parentId, afterId, null);
        }
        
        public void catalogCategoryMoveAsync(string sessionId, int categoryId, int parentId, string afterId, object userState) {
            if ((this.catalogCategoryMoveOperationCompleted == null)) {
                this.catalogCategoryMoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogCategoryMoveCompleted);
            }
            this.InvokeAsync("catalogCategoryMove", new object[] {
                        sessionId,
                        categoryId,
                        parentId,
                        afterId}, this.catalogCategoryMoveOperationCompleted, userState);
        }
        
        private void OncatalogCategoryMoveCompleted(object arg) {
            if ((this.catalogCategoryMoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogCategoryMoveCompleted(this, new catalogCategoryMoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Delete category
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogCategoryDelete(string sessionId, int categoryId) {
            object[] results = this.Invoke("catalogCategoryDelete", new object[] {
                        sessionId,
                        categoryId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogCategoryDelete(string sessionId, int categoryId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogCategoryDelete", new object[] {
                        sessionId,
                        categoryId}, callback, asyncState);
        }
        
        public bool EndcatalogCategoryDelete(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogCategoryDeleteAsync(string sessionId, int categoryId) {
            this.catalogCategoryDeleteAsync(sessionId, categoryId, null);
        }
        
        public void catalogCategoryDeleteAsync(string sessionId, int categoryId, object userState) {
            if ((this.catalogCategoryDeleteOperationCompleted == null)) {
                this.catalogCategoryDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogCategoryDeleteCompleted);
            }
            this.InvokeAsync("catalogCategoryDelete", new object[] {
                        sessionId,
                        categoryId}, this.catalogCategoryDeleteOperationCompleted, userState);
        }
        
        private void OncatalogCategoryDeleteCompleted(object arg) {
            if ((this.catalogCategoryDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogCategoryDeleteCompleted(this, new catalogCategoryDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve list of assigned products
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogAssignedProduct[] catalogCategoryAssignedProducts(string sessionId, int categoryId) {
            object[] results = this.Invoke("catalogCategoryAssignedProducts", new object[] {
                        sessionId,
                        categoryId});
            return ((catalogAssignedProduct[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogCategoryAssignedProducts(string sessionId, int categoryId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogCategoryAssignedProducts", new object[] {
                        sessionId,
                        categoryId}, callback, asyncState);
        }
        
        public catalogAssignedProduct[] EndcatalogCategoryAssignedProducts(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogAssignedProduct[])(results[0]));
        }
        
        public void catalogCategoryAssignedProductsAsync(string sessionId, int categoryId) {
            this.catalogCategoryAssignedProductsAsync(sessionId, categoryId, null);
        }
        
        public void catalogCategoryAssignedProductsAsync(string sessionId, int categoryId, object userState) {
            if ((this.catalogCategoryAssignedProductsOperationCompleted == null)) {
                this.catalogCategoryAssignedProductsOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogCategoryAssignedProductsCompleted);
            }
            this.InvokeAsync("catalogCategoryAssignedProducts", new object[] {
                        sessionId,
                        categoryId}, this.catalogCategoryAssignedProductsOperationCompleted, userState);
        }
        
        private void OncatalogCategoryAssignedProductsCompleted(object arg) {
            if ((this.catalogCategoryAssignedProductsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogCategoryAssignedProductsCompleted(this, new catalogCategoryAssignedProductsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Assign product to category
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogCategoryAssignProduct(string sessionId, int categoryId, string product, string position, string identifierType) {
            object[] results = this.Invoke("catalogCategoryAssignProduct", new object[] {
                        sessionId,
                        categoryId,
                        product,
                        position,
                        identifierType});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogCategoryAssignProduct(string sessionId, int categoryId, string product, string position, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogCategoryAssignProduct", new object[] {
                        sessionId,
                        categoryId,
                        product,
                        position,
                        identifierType}, callback, asyncState);
        }
        
        public bool EndcatalogCategoryAssignProduct(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogCategoryAssignProductAsync(string sessionId, int categoryId, string product, string position, string identifierType) {
            this.catalogCategoryAssignProductAsync(sessionId, categoryId, product, position, identifierType, null);
        }
        
        public void catalogCategoryAssignProductAsync(string sessionId, int categoryId, string product, string position, string identifierType, object userState) {
            if ((this.catalogCategoryAssignProductOperationCompleted == null)) {
                this.catalogCategoryAssignProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogCategoryAssignProductCompleted);
            }
            this.InvokeAsync("catalogCategoryAssignProduct", new object[] {
                        sessionId,
                        categoryId,
                        product,
                        position,
                        identifierType}, this.catalogCategoryAssignProductOperationCompleted, userState);
        }
        
        private void OncatalogCategoryAssignProductCompleted(object arg) {
            if ((this.catalogCategoryAssignProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogCategoryAssignProductCompleted(this, new catalogCategoryAssignProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Update assigned product
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogCategoryUpdateProduct(string sessionId, int categoryId, string product, string position, string identifierType) {
            object[] results = this.Invoke("catalogCategoryUpdateProduct", new object[] {
                        sessionId,
                        categoryId,
                        product,
                        position,
                        identifierType});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogCategoryUpdateProduct(string sessionId, int categoryId, string product, string position, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogCategoryUpdateProduct", new object[] {
                        sessionId,
                        categoryId,
                        product,
                        position,
                        identifierType}, callback, asyncState);
        }
        
        public bool EndcatalogCategoryUpdateProduct(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogCategoryUpdateProductAsync(string sessionId, int categoryId, string product, string position, string identifierType) {
            this.catalogCategoryUpdateProductAsync(sessionId, categoryId, product, position, identifierType, null);
        }
        
        public void catalogCategoryUpdateProductAsync(string sessionId, int categoryId, string product, string position, string identifierType, object userState) {
            if ((this.catalogCategoryUpdateProductOperationCompleted == null)) {
                this.catalogCategoryUpdateProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogCategoryUpdateProductCompleted);
            }
            this.InvokeAsync("catalogCategoryUpdateProduct", new object[] {
                        sessionId,
                        categoryId,
                        product,
                        position,
                        identifierType}, this.catalogCategoryUpdateProductOperationCompleted, userState);
        }
        
        private void OncatalogCategoryUpdateProductCompleted(object arg) {
            if ((this.catalogCategoryUpdateProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogCategoryUpdateProductCompleted(this, new catalogCategoryUpdateProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Remove product assignment from category
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogCategoryRemoveProduct(string sessionId, int categoryId, string product, string identifierType) {
            object[] results = this.Invoke("catalogCategoryRemoveProduct", new object[] {
                        sessionId,
                        categoryId,
                        product,
                        identifierType});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogCategoryRemoveProduct(string sessionId, int categoryId, string product, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogCategoryRemoveProduct", new object[] {
                        sessionId,
                        categoryId,
                        product,
                        identifierType}, callback, asyncState);
        }
        
        public bool EndcatalogCategoryRemoveProduct(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogCategoryRemoveProductAsync(string sessionId, int categoryId, string product, string identifierType) {
            this.catalogCategoryRemoveProductAsync(sessionId, categoryId, product, identifierType, null);
        }
        
        public void catalogCategoryRemoveProductAsync(string sessionId, int categoryId, string product, string identifierType, object userState) {
            if ((this.catalogCategoryRemoveProductOperationCompleted == null)) {
                this.catalogCategoryRemoveProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogCategoryRemoveProductCompleted);
            }
            this.InvokeAsync("catalogCategoryRemoveProduct", new object[] {
                        sessionId,
                        categoryId,
                        product,
                        identifierType}, this.catalogCategoryRemoveProductOperationCompleted, userState);
        }
        
        private void OncatalogCategoryRemoveProductCompleted(object arg) {
            if ((this.catalogCategoryRemoveProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogCategoryRemoveProductCompleted(this, new catalogCategoryRemoveProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Set/Get current store view
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("storeView")]
        public int catalogProductCurrentStore(string sessionId, string storeView) {
            object[] results = this.Invoke("catalogProductCurrentStore", new object[] {
                        sessionId,
                        storeView});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductCurrentStore(string sessionId, string storeView, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductCurrentStore", new object[] {
                        sessionId,
                        storeView}, callback, asyncState);
        }
        
        public int EndcatalogProductCurrentStore(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void catalogProductCurrentStoreAsync(string sessionId, string storeView) {
            this.catalogProductCurrentStoreAsync(sessionId, storeView, null);
        }
        
        public void catalogProductCurrentStoreAsync(string sessionId, string storeView, object userState) {
            if ((this.catalogProductCurrentStoreOperationCompleted == null)) {
                this.catalogProductCurrentStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductCurrentStoreCompleted);
            }
            this.InvokeAsync("catalogProductCurrentStore", new object[] {
                        sessionId,
                        storeView}, this.catalogProductCurrentStoreOperationCompleted, userState);
        }
        
        private void OncatalogProductCurrentStoreCompleted(object arg) {
            if ((this.catalogProductCurrentStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductCurrentStoreCompleted(this, new catalogProductCurrentStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get list of additional attributes which are not in default create/update list
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogAttributeEntity[] catalogProductListOfAdditionalAttributes(string sessionId, string productType, string attributeSetId) {
            object[] results = this.Invoke("catalogProductListOfAdditionalAttributes", new object[] {
                        sessionId,
                        productType,
                        attributeSetId});
            return ((catalogAttributeEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductListOfAdditionalAttributes(string sessionId, string productType, string attributeSetId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductListOfAdditionalAttributes", new object[] {
                        sessionId,
                        productType,
                        attributeSetId}, callback, asyncState);
        }
        
        public catalogAttributeEntity[] EndcatalogProductListOfAdditionalAttributes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogAttributeEntity[])(results[0]));
        }
        
        public void catalogProductListOfAdditionalAttributesAsync(string sessionId, string productType, string attributeSetId) {
            this.catalogProductListOfAdditionalAttributesAsync(sessionId, productType, attributeSetId, null);
        }
        
        public void catalogProductListOfAdditionalAttributesAsync(string sessionId, string productType, string attributeSetId, object userState) {
            if ((this.catalogProductListOfAdditionalAttributesOperationCompleted == null)) {
                this.catalogProductListOfAdditionalAttributesOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductListOfAdditionalAttributesCompleted);
            }
            this.InvokeAsync("catalogProductListOfAdditionalAttributes", new object[] {
                        sessionId,
                        productType,
                        attributeSetId}, this.catalogProductListOfAdditionalAttributesOperationCompleted, userState);
        }
        
        private void OncatalogProductListOfAdditionalAttributesCompleted(object arg) {
            if ((this.catalogProductListOfAdditionalAttributesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductListOfAdditionalAttributesCompleted(this, new catalogProductListOfAdditionalAttributesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve products list by filters
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("storeView")]
        public catalogProductEntity[] catalogProductList(string sessionId, filters filters, string storeView) {
            object[] results = this.Invoke("catalogProductList", new object[] {
                        sessionId,
                        filters,
                        storeView});
            return ((catalogProductEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductList(string sessionId, filters filters, string storeView, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductList", new object[] {
                        sessionId,
                        filters,
                        storeView}, callback, asyncState);
        }
        
        public catalogProductEntity[] EndcatalogProductList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductEntity[])(results[0]));
        }
        
        public void catalogProductListAsync(string sessionId, filters filters, string storeView) {
            this.catalogProductListAsync(sessionId, filters, storeView, null);
        }
        
        public void catalogProductListAsync(string sessionId, filters filters, string storeView, object userState) {
            if ((this.catalogProductListOperationCompleted == null)) {
                this.catalogProductListOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductListCompleted);
            }
            this.InvokeAsync("catalogProductList", new object[] {
                        sessionId,
                        filters,
                        storeView}, this.catalogProductListOperationCompleted, userState);
        }
        
        private void OncatalogProductListCompleted(object arg) {
            if ((this.catalogProductListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductListCompleted(this, new catalogProductListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve product
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("info")]
        public catalogProductReturnEntity catalogProductInfo(string sessionId, string productId, string storeView, catalogProductRequestAttributes attributes, string identifierType) {
            object[] results = this.Invoke("catalogProductInfo", new object[] {
                        sessionId,
                        productId,
                        storeView,
                        attributes,
                        identifierType});
            return ((catalogProductReturnEntity)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductInfo(string sessionId, string productId, string storeView, catalogProductRequestAttributes attributes, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductInfo", new object[] {
                        sessionId,
                        productId,
                        storeView,
                        attributes,
                        identifierType}, callback, asyncState);
        }
        
        public catalogProductReturnEntity EndcatalogProductInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductReturnEntity)(results[0]));
        }
        
        public void catalogProductInfoAsync(string sessionId, string productId, string storeView, catalogProductRequestAttributes attributes, string identifierType) {
            this.catalogProductInfoAsync(sessionId, productId, storeView, attributes, identifierType, null);
        }
        
        public void catalogProductInfoAsync(string sessionId, string productId, string storeView, catalogProductRequestAttributes attributes, string identifierType, object userState) {
            if ((this.catalogProductInfoOperationCompleted == null)) {
                this.catalogProductInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductInfoCompleted);
            }
            this.InvokeAsync("catalogProductInfo", new object[] {
                        sessionId,
                        productId,
                        storeView,
                        attributes,
                        identifierType}, this.catalogProductInfoOperationCompleted, userState);
        }
        
        private void OncatalogProductInfoCompleted(object arg) {
            if ((this.catalogProductInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductInfoCompleted(this, new catalogProductInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Create new product and return product id
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public int catalogProductCreate(string sessionId, string type, string set, string sku, catalogProductCreateEntity productData, string storeView) {
            object[] results = this.Invoke("catalogProductCreate", new object[] {
                        sessionId,
                        type,
                        set,
                        sku,
                        productData,
                        storeView});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductCreate(string sessionId, string type, string set, string sku, catalogProductCreateEntity productData, string storeView, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductCreate", new object[] {
                        sessionId,
                        type,
                        set,
                        sku,
                        productData,
                        storeView}, callback, asyncState);
        }
        
        public int EndcatalogProductCreate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void catalogProductCreateAsync(string sessionId, string type, string set, string sku, catalogProductCreateEntity productData, string storeView) {
            this.catalogProductCreateAsync(sessionId, type, set, sku, productData, storeView, null);
        }
        
        public void catalogProductCreateAsync(string sessionId, string type, string set, string sku, catalogProductCreateEntity productData, string storeView, object userState) {
            if ((this.catalogProductCreateOperationCompleted == null)) {
                this.catalogProductCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductCreateCompleted);
            }
            this.InvokeAsync("catalogProductCreate", new object[] {
                        sessionId,
                        type,
                        set,
                        sku,
                        productData,
                        storeView}, this.catalogProductCreateOperationCompleted, userState);
        }
        
        private void OncatalogProductCreateCompleted(object arg) {
            if ((this.catalogProductCreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductCreateCompleted(this, new catalogProductCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Update product
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductUpdate(string sessionId, string product, catalogProductCreateEntity productData, string storeView, string identifierType) {
            object[] results = this.Invoke("catalogProductUpdate", new object[] {
                        sessionId,
                        product,
                        productData,
                        storeView,
                        identifierType});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductUpdate(string sessionId, string product, catalogProductCreateEntity productData, string storeView, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductUpdate", new object[] {
                        sessionId,
                        product,
                        productData,
                        storeView,
                        identifierType}, callback, asyncState);
        }
        
        public bool EndcatalogProductUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductUpdateAsync(string sessionId, string product, catalogProductCreateEntity productData, string storeView, string identifierType) {
            this.catalogProductUpdateAsync(sessionId, product, productData, storeView, identifierType, null);
        }
        
        public void catalogProductUpdateAsync(string sessionId, string product, catalogProductCreateEntity productData, string storeView, string identifierType, object userState) {
            if ((this.catalogProductUpdateOperationCompleted == null)) {
                this.catalogProductUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductUpdateCompleted);
            }
            this.InvokeAsync("catalogProductUpdate", new object[] {
                        sessionId,
                        product,
                        productData,
                        storeView,
                        identifierType}, this.catalogProductUpdateOperationCompleted, userState);
        }
        
        private void OncatalogProductUpdateCompleted(object arg) {
            if ((this.catalogProductUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductUpdateCompleted(this, new catalogProductUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Product multi update
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductMultiUpdate(string sessionId, string[] productIds, catalogProductCreateEntity[] productData, string store, string identifierType) {
            object[] results = this.Invoke("catalogProductMultiUpdate", new object[] {
                        sessionId,
                        productIds,
                        productData,
                        store,
                        identifierType});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductMultiUpdate(string sessionId, string[] productIds, catalogProductCreateEntity[] productData, string store, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductMultiUpdate", new object[] {
                        sessionId,
                        productIds,
                        productData,
                        store,
                        identifierType}, callback, asyncState);
        }
        
        public bool EndcatalogProductMultiUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductMultiUpdateAsync(string sessionId, string[] productIds, catalogProductCreateEntity[] productData, string store, string identifierType) {
            this.catalogProductMultiUpdateAsync(sessionId, productIds, productData, store, identifierType, null);
        }
        
        public void catalogProductMultiUpdateAsync(string sessionId, string[] productIds, catalogProductCreateEntity[] productData, string store, string identifierType, object userState) {
            if ((this.catalogProductMultiUpdateOperationCompleted == null)) {
                this.catalogProductMultiUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductMultiUpdateCompleted);
            }
            this.InvokeAsync("catalogProductMultiUpdate", new object[] {
                        sessionId,
                        productIds,
                        productData,
                        store,
                        identifierType}, this.catalogProductMultiUpdateOperationCompleted, userState);
        }
        
        private void OncatalogProductMultiUpdateCompleted(object arg) {
            if ((this.catalogProductMultiUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductMultiUpdateCompleted(this, new catalogProductMultiUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Update product special price
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public int catalogProductSetSpecialPrice(string sessionId, string product, string specialPrice, string fromDate, string toDate, string storeView, string identifierType) {
            object[] results = this.Invoke("catalogProductSetSpecialPrice", new object[] {
                        sessionId,
                        product,
                        specialPrice,
                        fromDate,
                        toDate,
                        storeView,
                        identifierType});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductSetSpecialPrice(string sessionId, string product, string specialPrice, string fromDate, string toDate, string storeView, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductSetSpecialPrice", new object[] {
                        sessionId,
                        product,
                        specialPrice,
                        fromDate,
                        toDate,
                        storeView,
                        identifierType}, callback, asyncState);
        }
        
        public int EndcatalogProductSetSpecialPrice(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void catalogProductSetSpecialPriceAsync(string sessionId, string product, string specialPrice, string fromDate, string toDate, string storeView, string identifierType) {
            this.catalogProductSetSpecialPriceAsync(sessionId, product, specialPrice, fromDate, toDate, storeView, identifierType, null);
        }
        
        public void catalogProductSetSpecialPriceAsync(string sessionId, string product, string specialPrice, string fromDate, string toDate, string storeView, string identifierType, object userState) {
            if ((this.catalogProductSetSpecialPriceOperationCompleted == null)) {
                this.catalogProductSetSpecialPriceOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductSetSpecialPriceCompleted);
            }
            this.InvokeAsync("catalogProductSetSpecialPrice", new object[] {
                        sessionId,
                        product,
                        specialPrice,
                        fromDate,
                        toDate,
                        storeView,
                        identifierType}, this.catalogProductSetSpecialPriceOperationCompleted, userState);
        }
        
        private void OncatalogProductSetSpecialPriceCompleted(object arg) {
            if ((this.catalogProductSetSpecialPriceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductSetSpecialPriceCompleted(this, new catalogProductSetSpecialPriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get product special price data
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogProductSpecialPriceReturnEntity catalogProductGetSpecialPrice(string sessionId, string product, string storeView, string identifierType) {
            object[] results = this.Invoke("catalogProductGetSpecialPrice", new object[] {
                        sessionId,
                        product,
                        storeView,
                        identifierType});
            return ((catalogProductSpecialPriceReturnEntity)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductGetSpecialPrice(string sessionId, string product, string storeView, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductGetSpecialPrice", new object[] {
                        sessionId,
                        product,
                        storeView,
                        identifierType}, callback, asyncState);
        }
        
        public catalogProductSpecialPriceReturnEntity EndcatalogProductGetSpecialPrice(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductSpecialPriceReturnEntity)(results[0]));
        }
        
        public void catalogProductGetSpecialPriceAsync(string sessionId, string product, string storeView, string identifierType) {
            this.catalogProductGetSpecialPriceAsync(sessionId, product, storeView, identifierType, null);
        }
        
        public void catalogProductGetSpecialPriceAsync(string sessionId, string product, string storeView, string identifierType, object userState) {
            if ((this.catalogProductGetSpecialPriceOperationCompleted == null)) {
                this.catalogProductGetSpecialPriceOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductGetSpecialPriceCompleted);
            }
            this.InvokeAsync("catalogProductGetSpecialPrice", new object[] {
                        sessionId,
                        product,
                        storeView,
                        identifierType}, this.catalogProductGetSpecialPriceOperationCompleted, userState);
        }
        
        private void OncatalogProductGetSpecialPriceCompleted(object arg) {
            if ((this.catalogProductGetSpecialPriceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductGetSpecialPriceCompleted(this, new catalogProductGetSpecialPriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Delete product
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public int catalogProductDelete(string sessionId, string product, string identifierType) {
            object[] results = this.Invoke("catalogProductDelete", new object[] {
                        sessionId,
                        product,
                        identifierType});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductDelete(string sessionId, string product, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductDelete", new object[] {
                        sessionId,
                        product,
                        identifierType}, callback, asyncState);
        }
        
        public int EndcatalogProductDelete(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void catalogProductDeleteAsync(string sessionId, string product, string identifierType) {
            this.catalogProductDeleteAsync(sessionId, product, identifierType, null);
        }
        
        public void catalogProductDeleteAsync(string sessionId, string product, string identifierType, object userState) {
            if ((this.catalogProductDeleteOperationCompleted == null)) {
                this.catalogProductDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductDeleteCompleted);
            }
            this.InvokeAsync("catalogProductDelete", new object[] {
                        sessionId,
                        product,
                        identifierType}, this.catalogProductDeleteOperationCompleted, userState);
        }
        
        private void OncatalogProductDeleteCompleted(object arg) {
            if ((this.catalogProductDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductDeleteCompleted(this, new catalogProductDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Set/Get current store view
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("storeView")]
        public int catalogProductAttributeCurrentStore(string sessionId, string storeView) {
            object[] results = this.Invoke("catalogProductAttributeCurrentStore", new object[] {
                        sessionId,
                        storeView});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeCurrentStore(string sessionId, string storeView, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeCurrentStore", new object[] {
                        sessionId,
                        storeView}, callback, asyncState);
        }
        
        public int EndcatalogProductAttributeCurrentStore(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void catalogProductAttributeCurrentStoreAsync(string sessionId, string storeView) {
            this.catalogProductAttributeCurrentStoreAsync(sessionId, storeView, null);
        }
        
        public void catalogProductAttributeCurrentStoreAsync(string sessionId, string storeView, object userState) {
            if ((this.catalogProductAttributeCurrentStoreOperationCompleted == null)) {
                this.catalogProductAttributeCurrentStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeCurrentStoreCompleted);
            }
            this.InvokeAsync("catalogProductAttributeCurrentStore", new object[] {
                        sessionId,
                        storeView}, this.catalogProductAttributeCurrentStoreOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeCurrentStoreCompleted(object arg) {
            if ((this.catalogProductAttributeCurrentStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeCurrentStoreCompleted(this, new catalogProductAttributeCurrentStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Create product attribute set based on another set
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("setId")]
        public int catalogProductAttributeSetCreate(string sessionId, string attributeSetName, string skeletonSetId) {
            object[] results = this.Invoke("catalogProductAttributeSetCreate", new object[] {
                        sessionId,
                        attributeSetName,
                        skeletonSetId});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeSetCreate(string sessionId, string attributeSetName, string skeletonSetId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeSetCreate", new object[] {
                        sessionId,
                        attributeSetName,
                        skeletonSetId}, callback, asyncState);
        }
        
        public int EndcatalogProductAttributeSetCreate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void catalogProductAttributeSetCreateAsync(string sessionId, string attributeSetName, string skeletonSetId) {
            this.catalogProductAttributeSetCreateAsync(sessionId, attributeSetName, skeletonSetId, null);
        }
        
        public void catalogProductAttributeSetCreateAsync(string sessionId, string attributeSetName, string skeletonSetId, object userState) {
            if ((this.catalogProductAttributeSetCreateOperationCompleted == null)) {
                this.catalogProductAttributeSetCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeSetCreateCompleted);
            }
            this.InvokeAsync("catalogProductAttributeSetCreate", new object[] {
                        sessionId,
                        attributeSetName,
                        skeletonSetId}, this.catalogProductAttributeSetCreateOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeSetCreateCompleted(object arg) {
            if ((this.catalogProductAttributeSetCreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeSetCreateCompleted(this, new catalogProductAttributeSetCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve attribute list
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogAttributeEntity[] catalogProductAttributeList(string sessionId, int setId) {
            object[] results = this.Invoke("catalogProductAttributeList", new object[] {
                        sessionId,
                        setId});
            return ((catalogAttributeEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeList(string sessionId, int setId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeList", new object[] {
                        sessionId,
                        setId}, callback, asyncState);
        }
        
        public catalogAttributeEntity[] EndcatalogProductAttributeList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogAttributeEntity[])(results[0]));
        }
        
        public void catalogProductAttributeListAsync(string sessionId, int setId) {
            this.catalogProductAttributeListAsync(sessionId, setId, null);
        }
        
        public void catalogProductAttributeListAsync(string sessionId, int setId, object userState) {
            if ((this.catalogProductAttributeListOperationCompleted == null)) {
                this.catalogProductAttributeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeListCompleted);
            }
            this.InvokeAsync("catalogProductAttributeList", new object[] {
                        sessionId,
                        setId}, this.catalogProductAttributeListOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeListCompleted(object arg) {
            if ((this.catalogProductAttributeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeListCompleted(this, new catalogProductAttributeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve attribute options
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogAttributeOptionEntity[] catalogProductAttributeOptions(string sessionId, string attributeId, string storeView) {
            object[] results = this.Invoke("catalogProductAttributeOptions", new object[] {
                        sessionId,
                        attributeId,
                        storeView});
            return ((catalogAttributeOptionEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeOptions(string sessionId, string attributeId, string storeView, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeOptions", new object[] {
                        sessionId,
                        attributeId,
                        storeView}, callback, asyncState);
        }
        
        public catalogAttributeOptionEntity[] EndcatalogProductAttributeOptions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogAttributeOptionEntity[])(results[0]));
        }
        
        public void catalogProductAttributeOptionsAsync(string sessionId, string attributeId, string storeView) {
            this.catalogProductAttributeOptionsAsync(sessionId, attributeId, storeView, null);
        }
        
        public void catalogProductAttributeOptionsAsync(string sessionId, string attributeId, string storeView, object userState) {
            if ((this.catalogProductAttributeOptionsOperationCompleted == null)) {
                this.catalogProductAttributeOptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeOptionsCompleted);
            }
            this.InvokeAsync("catalogProductAttributeOptions", new object[] {
                        sessionId,
                        attributeId,
                        storeView}, this.catalogProductAttributeOptionsOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeOptionsCompleted(object arg) {
            if ((this.catalogProductAttributeOptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeOptionsCompleted(this, new catalogProductAttributeOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Remove product attribute set
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("isRemoved")]
        public bool catalogProductAttributeSetRemove(string sessionId, string attributeSetId, string forceProductsRemove) {
            object[] results = this.Invoke("catalogProductAttributeSetRemove", new object[] {
                        sessionId,
                        attributeSetId,
                        forceProductsRemove});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeSetRemove(string sessionId, string attributeSetId, string forceProductsRemove, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeSetRemove", new object[] {
                        sessionId,
                        attributeSetId,
                        forceProductsRemove}, callback, asyncState);
        }
        
        public bool EndcatalogProductAttributeSetRemove(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductAttributeSetRemoveAsync(string sessionId, string attributeSetId, string forceProductsRemove) {
            this.catalogProductAttributeSetRemoveAsync(sessionId, attributeSetId, forceProductsRemove, null);
        }
        
        public void catalogProductAttributeSetRemoveAsync(string sessionId, string attributeSetId, string forceProductsRemove, object userState) {
            if ((this.catalogProductAttributeSetRemoveOperationCompleted == null)) {
                this.catalogProductAttributeSetRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeSetRemoveCompleted);
            }
            this.InvokeAsync("catalogProductAttributeSetRemove", new object[] {
                        sessionId,
                        attributeSetId,
                        forceProductsRemove}, this.catalogProductAttributeSetRemoveOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeSetRemoveCompleted(object arg) {
            if ((this.catalogProductAttributeSetRemoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeSetRemoveCompleted(this, new catalogProductAttributeSetRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve product attribute sets
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogProductAttributeSetEntity[] catalogProductAttributeSetList(string sessionId) {
            object[] results = this.Invoke("catalogProductAttributeSetList", new object[] {
                        sessionId});
            return ((catalogProductAttributeSetEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeSetList(string sessionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeSetList", new object[] {
                        sessionId}, callback, asyncState);
        }
        
        public catalogProductAttributeSetEntity[] EndcatalogProductAttributeSetList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductAttributeSetEntity[])(results[0]));
        }
        
        public void catalogProductAttributeSetListAsync(string sessionId) {
            this.catalogProductAttributeSetListAsync(sessionId, null);
        }
        
        public void catalogProductAttributeSetListAsync(string sessionId, object userState) {
            if ((this.catalogProductAttributeSetListOperationCompleted == null)) {
                this.catalogProductAttributeSetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeSetListCompleted);
            }
            this.InvokeAsync("catalogProductAttributeSetList", new object[] {
                        sessionId}, this.catalogProductAttributeSetListOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeSetListCompleted(object arg) {
            if ((this.catalogProductAttributeSetListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeSetListCompleted(this, new catalogProductAttributeSetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Add attribute into attribute set
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("isAdded")]
        public bool catalogProductAttributeSetAttributeAdd(string sessionId, string attributeId, string attributeSetId, string attributeGroupId, string sortOrder) {
            object[] results = this.Invoke("catalogProductAttributeSetAttributeAdd", new object[] {
                        sessionId,
                        attributeId,
                        attributeSetId,
                        attributeGroupId,
                        sortOrder});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeSetAttributeAdd(string sessionId, string attributeId, string attributeSetId, string attributeGroupId, string sortOrder, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeSetAttributeAdd", new object[] {
                        sessionId,
                        attributeId,
                        attributeSetId,
                        attributeGroupId,
                        sortOrder}, callback, asyncState);
        }
        
        public bool EndcatalogProductAttributeSetAttributeAdd(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductAttributeSetAttributeAddAsync(string sessionId, string attributeId, string attributeSetId, string attributeGroupId, string sortOrder) {
            this.catalogProductAttributeSetAttributeAddAsync(sessionId, attributeId, attributeSetId, attributeGroupId, sortOrder, null);
        }
        
        public void catalogProductAttributeSetAttributeAddAsync(string sessionId, string attributeId, string attributeSetId, string attributeGroupId, string sortOrder, object userState) {
            if ((this.catalogProductAttributeSetAttributeAddOperationCompleted == null)) {
                this.catalogProductAttributeSetAttributeAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeSetAttributeAddCompleted);
            }
            this.InvokeAsync("catalogProductAttributeSetAttributeAdd", new object[] {
                        sessionId,
                        attributeId,
                        attributeSetId,
                        attributeGroupId,
                        sortOrder}, this.catalogProductAttributeSetAttributeAddOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeSetAttributeAddCompleted(object arg) {
            if ((this.catalogProductAttributeSetAttributeAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeSetAttributeAddCompleted(this, new catalogProductAttributeSetAttributeAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Remove attribute from attribute set
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("isRemoved")]
        public bool catalogProductAttributeSetAttributeRemove(string sessionId, string attributeId, string attributeSetId) {
            object[] results = this.Invoke("catalogProductAttributeSetAttributeRemove", new object[] {
                        sessionId,
                        attributeId,
                        attributeSetId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeSetAttributeRemove(string sessionId, string attributeId, string attributeSetId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeSetAttributeRemove", new object[] {
                        sessionId,
                        attributeId,
                        attributeSetId}, callback, asyncState);
        }
        
        public bool EndcatalogProductAttributeSetAttributeRemove(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductAttributeSetAttributeRemoveAsync(string sessionId, string attributeId, string attributeSetId) {
            this.catalogProductAttributeSetAttributeRemoveAsync(sessionId, attributeId, attributeSetId, null);
        }
        
        public void catalogProductAttributeSetAttributeRemoveAsync(string sessionId, string attributeId, string attributeSetId, object userState) {
            if ((this.catalogProductAttributeSetAttributeRemoveOperationCompleted == null)) {
                this.catalogProductAttributeSetAttributeRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeSetAttributeRemoveCompleted);
            }
            this.InvokeAsync("catalogProductAttributeSetAttributeRemove", new object[] {
                        sessionId,
                        attributeId,
                        attributeSetId}, this.catalogProductAttributeSetAttributeRemoveOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeSetAttributeRemoveCompleted(object arg) {
            if ((this.catalogProductAttributeSetAttributeRemoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeSetAttributeRemoveCompleted(this, new catalogProductAttributeSetAttributeRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Create group within existing attribute set
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public int catalogProductAttributeSetGroupAdd(string sessionId, string attributeSetId, string groupName) {
            object[] results = this.Invoke("catalogProductAttributeSetGroupAdd", new object[] {
                        sessionId,
                        attributeSetId,
                        groupName});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeSetGroupAdd(string sessionId, string attributeSetId, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeSetGroupAdd", new object[] {
                        sessionId,
                        attributeSetId,
                        groupName}, callback, asyncState);
        }
        
        public int EndcatalogProductAttributeSetGroupAdd(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void catalogProductAttributeSetGroupAddAsync(string sessionId, string attributeSetId, string groupName) {
            this.catalogProductAttributeSetGroupAddAsync(sessionId, attributeSetId, groupName, null);
        }
        
        public void catalogProductAttributeSetGroupAddAsync(string sessionId, string attributeSetId, string groupName, object userState) {
            if ((this.catalogProductAttributeSetGroupAddOperationCompleted == null)) {
                this.catalogProductAttributeSetGroupAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeSetGroupAddCompleted);
            }
            this.InvokeAsync("catalogProductAttributeSetGroupAdd", new object[] {
                        sessionId,
                        attributeSetId,
                        groupName}, this.catalogProductAttributeSetGroupAddOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeSetGroupAddCompleted(object arg) {
            if ((this.catalogProductAttributeSetGroupAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeSetGroupAddCompleted(this, new catalogProductAttributeSetGroupAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Rename existing group
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductAttributeSetGroupRename(string sessionId, string groupId, string groupName) {
            object[] results = this.Invoke("catalogProductAttributeSetGroupRename", new object[] {
                        sessionId,
                        groupId,
                        groupName});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeSetGroupRename(string sessionId, string groupId, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeSetGroupRename", new object[] {
                        sessionId,
                        groupId,
                        groupName}, callback, asyncState);
        }
        
        public bool EndcatalogProductAttributeSetGroupRename(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductAttributeSetGroupRenameAsync(string sessionId, string groupId, string groupName) {
            this.catalogProductAttributeSetGroupRenameAsync(sessionId, groupId, groupName, null);
        }
        
        public void catalogProductAttributeSetGroupRenameAsync(string sessionId, string groupId, string groupName, object userState) {
            if ((this.catalogProductAttributeSetGroupRenameOperationCompleted == null)) {
                this.catalogProductAttributeSetGroupRenameOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeSetGroupRenameCompleted);
            }
            this.InvokeAsync("catalogProductAttributeSetGroupRename", new object[] {
                        sessionId,
                        groupId,
                        groupName}, this.catalogProductAttributeSetGroupRenameOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeSetGroupRenameCompleted(object arg) {
            if ((this.catalogProductAttributeSetGroupRenameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeSetGroupRenameCompleted(this, new catalogProductAttributeSetGroupRenameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Remove group from attribute set
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductAttributeSetGroupRemove(string sessionId, string attributeGroupId) {
            object[] results = this.Invoke("catalogProductAttributeSetGroupRemove", new object[] {
                        sessionId,
                        attributeGroupId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeSetGroupRemove(string sessionId, string attributeGroupId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeSetGroupRemove", new object[] {
                        sessionId,
                        attributeGroupId}, callback, asyncState);
        }
        
        public bool EndcatalogProductAttributeSetGroupRemove(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductAttributeSetGroupRemoveAsync(string sessionId, string attributeGroupId) {
            this.catalogProductAttributeSetGroupRemoveAsync(sessionId, attributeGroupId, null);
        }
        
        public void catalogProductAttributeSetGroupRemoveAsync(string sessionId, string attributeGroupId, object userState) {
            if ((this.catalogProductAttributeSetGroupRemoveOperationCompleted == null)) {
                this.catalogProductAttributeSetGroupRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeSetGroupRemoveCompleted);
            }
            this.InvokeAsync("catalogProductAttributeSetGroupRemove", new object[] {
                        sessionId,
                        attributeGroupId}, this.catalogProductAttributeSetGroupRemoveOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeSetGroupRemoveCompleted(object arg) {
            if ((this.catalogProductAttributeSetGroupRemoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeSetGroupRemoveCompleted(this, new catalogProductAttributeSetGroupRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get list of possible attribute types
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogAttributeOptionEntity[] catalogProductAttributeTypes(string sessionId) {
            object[] results = this.Invoke("catalogProductAttributeTypes", new object[] {
                        sessionId});
            return ((catalogAttributeOptionEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeTypes(string sessionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeTypes", new object[] {
                        sessionId}, callback, asyncState);
        }
        
        public catalogAttributeOptionEntity[] EndcatalogProductAttributeTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogAttributeOptionEntity[])(results[0]));
        }
        
        public void catalogProductAttributeTypesAsync(string sessionId) {
            this.catalogProductAttributeTypesAsync(sessionId, null);
        }
        
        public void catalogProductAttributeTypesAsync(string sessionId, object userState) {
            if ((this.catalogProductAttributeTypesOperationCompleted == null)) {
                this.catalogProductAttributeTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeTypesCompleted);
            }
            this.InvokeAsync("catalogProductAttributeTypes", new object[] {
                        sessionId}, this.catalogProductAttributeTypesOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeTypesCompleted(object arg) {
            if ((this.catalogProductAttributeTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeTypesCompleted(this, new catalogProductAttributeTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Create new attribute
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public int catalogProductAttributeCreate(string sessionId, catalogProductAttributeEntityToCreate data) {
            object[] results = this.Invoke("catalogProductAttributeCreate", new object[] {
                        sessionId,
                        data});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeCreate(string sessionId, catalogProductAttributeEntityToCreate data, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeCreate", new object[] {
                        sessionId,
                        data}, callback, asyncState);
        }
        
        public int EndcatalogProductAttributeCreate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void catalogProductAttributeCreateAsync(string sessionId, catalogProductAttributeEntityToCreate data) {
            this.catalogProductAttributeCreateAsync(sessionId, data, null);
        }
        
        public void catalogProductAttributeCreateAsync(string sessionId, catalogProductAttributeEntityToCreate data, object userState) {
            if ((this.catalogProductAttributeCreateOperationCompleted == null)) {
                this.catalogProductAttributeCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeCreateCompleted);
            }
            this.InvokeAsync("catalogProductAttributeCreate", new object[] {
                        sessionId,
                        data}, this.catalogProductAttributeCreateOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeCreateCompleted(object arg) {
            if ((this.catalogProductAttributeCreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeCreateCompleted(this, new catalogProductAttributeCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Set/Get current store view
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("storeView")]
        public int catalogCategoryAttributeCurrentStore(string sessionId, string storeView) {
            object[] results = this.Invoke("catalogCategoryAttributeCurrentStore", new object[] {
                        sessionId,
                        storeView});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogCategoryAttributeCurrentStore(string sessionId, string storeView, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogCategoryAttributeCurrentStore", new object[] {
                        sessionId,
                        storeView}, callback, asyncState);
        }
        
        public int EndcatalogCategoryAttributeCurrentStore(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void catalogCategoryAttributeCurrentStoreAsync(string sessionId, string storeView) {
            this.catalogCategoryAttributeCurrentStoreAsync(sessionId, storeView, null);
        }
        
        public void catalogCategoryAttributeCurrentStoreAsync(string sessionId, string storeView, object userState) {
            if ((this.catalogCategoryAttributeCurrentStoreOperationCompleted == null)) {
                this.catalogCategoryAttributeCurrentStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogCategoryAttributeCurrentStoreCompleted);
            }
            this.InvokeAsync("catalogCategoryAttributeCurrentStore", new object[] {
                        sessionId,
                        storeView}, this.catalogCategoryAttributeCurrentStoreOperationCompleted, userState);
        }
        
        private void OncatalogCategoryAttributeCurrentStoreCompleted(object arg) {
            if ((this.catalogCategoryAttributeCurrentStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogCategoryAttributeCurrentStoreCompleted(this, new catalogCategoryAttributeCurrentStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Set/Get current store view
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("storeView")]
        public int catalogProductAttributeMediaCurrentStore(string sessionId, string storeView) {
            object[] results = this.Invoke("catalogProductAttributeMediaCurrentStore", new object[] {
                        sessionId,
                        storeView});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeMediaCurrentStore(string sessionId, string storeView, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeMediaCurrentStore", new object[] {
                        sessionId,
                        storeView}, callback, asyncState);
        }
        
        public int EndcatalogProductAttributeMediaCurrentStore(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void catalogProductAttributeMediaCurrentStoreAsync(string sessionId, string storeView) {
            this.catalogProductAttributeMediaCurrentStoreAsync(sessionId, storeView, null);
        }
        
        public void catalogProductAttributeMediaCurrentStoreAsync(string sessionId, string storeView, object userState) {
            if ((this.catalogProductAttributeMediaCurrentStoreOperationCompleted == null)) {
                this.catalogProductAttributeMediaCurrentStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeMediaCurrentStoreCompleted);
            }
            this.InvokeAsync("catalogProductAttributeMediaCurrentStore", new object[] {
                        sessionId,
                        storeView}, this.catalogProductAttributeMediaCurrentStoreOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeMediaCurrentStoreCompleted(object arg) {
            if ((this.catalogProductAttributeMediaCurrentStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeMediaCurrentStoreCompleted(this, new catalogProductAttributeMediaCurrentStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Delete attribute
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductAttributeRemove(string sessionId, string attribute) {
            object[] results = this.Invoke("catalogProductAttributeRemove", new object[] {
                        sessionId,
                        attribute});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeRemove(string sessionId, string attribute, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeRemove", new object[] {
                        sessionId,
                        attribute}, callback, asyncState);
        }
        
        public bool EndcatalogProductAttributeRemove(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductAttributeRemoveAsync(string sessionId, string attribute) {
            this.catalogProductAttributeRemoveAsync(sessionId, attribute, null);
        }
        
        public void catalogProductAttributeRemoveAsync(string sessionId, string attribute, object userState) {
            if ((this.catalogProductAttributeRemoveOperationCompleted == null)) {
                this.catalogProductAttributeRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeRemoveCompleted);
            }
            this.InvokeAsync("catalogProductAttributeRemove", new object[] {
                        sessionId,
                        attribute}, this.catalogProductAttributeRemoveOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeRemoveCompleted(object arg) {
            if ((this.catalogProductAttributeRemoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeRemoveCompleted(this, new catalogProductAttributeRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get full information about attribute with list of options
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogProductAttributeEntity catalogProductAttributeInfo(string sessionId, string attribute) {
            object[] results = this.Invoke("catalogProductAttributeInfo", new object[] {
                        sessionId,
                        attribute});
            return ((catalogProductAttributeEntity)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeInfo(string sessionId, string attribute, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeInfo", new object[] {
                        sessionId,
                        attribute}, callback, asyncState);
        }
        
        public catalogProductAttributeEntity EndcatalogProductAttributeInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductAttributeEntity)(results[0]));
        }
        
        public void catalogProductAttributeInfoAsync(string sessionId, string attribute) {
            this.catalogProductAttributeInfoAsync(sessionId, attribute, null);
        }
        
        public void catalogProductAttributeInfoAsync(string sessionId, string attribute, object userState) {
            if ((this.catalogProductAttributeInfoOperationCompleted == null)) {
                this.catalogProductAttributeInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeInfoCompleted);
            }
            this.InvokeAsync("catalogProductAttributeInfo", new object[] {
                        sessionId,
                        attribute}, this.catalogProductAttributeInfoOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeInfoCompleted(object arg) {
            if ((this.catalogProductAttributeInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeInfoCompleted(this, new catalogProductAttributeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Update attribute
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductAttributeUpdate(string sessionId, string attribute, catalogProductAttributeEntityToUpdate data) {
            object[] results = this.Invoke("catalogProductAttributeUpdate", new object[] {
                        sessionId,
                        attribute,
                        data});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeUpdate(string sessionId, string attribute, catalogProductAttributeEntityToUpdate data, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeUpdate", new object[] {
                        sessionId,
                        attribute,
                        data}, callback, asyncState);
        }
        
        public bool EndcatalogProductAttributeUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductAttributeUpdateAsync(string sessionId, string attribute, catalogProductAttributeEntityToUpdate data) {
            this.catalogProductAttributeUpdateAsync(sessionId, attribute, data, null);
        }
        
        public void catalogProductAttributeUpdateAsync(string sessionId, string attribute, catalogProductAttributeEntityToUpdate data, object userState) {
            if ((this.catalogProductAttributeUpdateOperationCompleted == null)) {
                this.catalogProductAttributeUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeUpdateCompleted);
            }
            this.InvokeAsync("catalogProductAttributeUpdate", new object[] {
                        sessionId,
                        attribute,
                        data}, this.catalogProductAttributeUpdateOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeUpdateCompleted(object arg) {
            if ((this.catalogProductAttributeUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeUpdateCompleted(this, new catalogProductAttributeUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Add option to attribute
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductAttributeAddOption(string sessionId, string attribute, catalogProductAttributeOptionEntityToAdd data) {
            object[] results = this.Invoke("catalogProductAttributeAddOption", new object[] {
                        sessionId,
                        attribute,
                        data});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeAddOption(string sessionId, string attribute, catalogProductAttributeOptionEntityToAdd data, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeAddOption", new object[] {
                        sessionId,
                        attribute,
                        data}, callback, asyncState);
        }
        
        public bool EndcatalogProductAttributeAddOption(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductAttributeAddOptionAsync(string sessionId, string attribute, catalogProductAttributeOptionEntityToAdd data) {
            this.catalogProductAttributeAddOptionAsync(sessionId, attribute, data, null);
        }
        
        public void catalogProductAttributeAddOptionAsync(string sessionId, string attribute, catalogProductAttributeOptionEntityToAdd data, object userState) {
            if ((this.catalogProductAttributeAddOptionOperationCompleted == null)) {
                this.catalogProductAttributeAddOptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeAddOptionCompleted);
            }
            this.InvokeAsync("catalogProductAttributeAddOption", new object[] {
                        sessionId,
                        attribute,
                        data}, this.catalogProductAttributeAddOptionOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeAddOptionCompleted(object arg) {
            if ((this.catalogProductAttributeAddOptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeAddOptionCompleted(this, new catalogProductAttributeAddOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Remove option from attribute
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductAttributeRemoveOption(string sessionId, string attribute, string optionId) {
            object[] results = this.Invoke("catalogProductAttributeRemoveOption", new object[] {
                        sessionId,
                        attribute,
                        optionId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeRemoveOption(string sessionId, string attribute, string optionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeRemoveOption", new object[] {
                        sessionId,
                        attribute,
                        optionId}, callback, asyncState);
        }
        
        public bool EndcatalogProductAttributeRemoveOption(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductAttributeRemoveOptionAsync(string sessionId, string attribute, string optionId) {
            this.catalogProductAttributeRemoveOptionAsync(sessionId, attribute, optionId, null);
        }
        
        public void catalogProductAttributeRemoveOptionAsync(string sessionId, string attribute, string optionId, object userState) {
            if ((this.catalogProductAttributeRemoveOptionOperationCompleted == null)) {
                this.catalogProductAttributeRemoveOptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeRemoveOptionCompleted);
            }
            this.InvokeAsync("catalogProductAttributeRemoveOption", new object[] {
                        sessionId,
                        attribute,
                        optionId}, this.catalogProductAttributeRemoveOptionOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeRemoveOptionCompleted(object arg) {
            if ((this.catalogProductAttributeRemoveOptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeRemoveOptionCompleted(this, new catalogProductAttributeRemoveOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve product types
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogProductTypeEntity[] catalogProductTypeList(string sessionId) {
            object[] results = this.Invoke("catalogProductTypeList", new object[] {
                        sessionId});
            return ((catalogProductTypeEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductTypeList(string sessionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductTypeList", new object[] {
                        sessionId}, callback, asyncState);
        }
        
        public catalogProductTypeEntity[] EndcatalogProductTypeList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductTypeEntity[])(results[0]));
        }
        
        public void catalogProductTypeListAsync(string sessionId) {
            this.catalogProductTypeListAsync(sessionId, null);
        }
        
        public void catalogProductTypeListAsync(string sessionId, object userState) {
            if ((this.catalogProductTypeListOperationCompleted == null)) {
                this.catalogProductTypeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductTypeListCompleted);
            }
            this.InvokeAsync("catalogProductTypeList", new object[] {
                        sessionId}, this.catalogProductTypeListOperationCompleted, userState);
        }
        
        private void OncatalogProductTypeListCompleted(object arg) {
            if ((this.catalogProductTypeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductTypeListCompleted(this, new catalogProductTypeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve product tier prices
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogProductTierPriceEntity[] catalogProductAttributeTierPriceInfo(string sessionId, string product, string identifierType) {
            object[] results = this.Invoke("catalogProductAttributeTierPriceInfo", new object[] {
                        sessionId,
                        product,
                        identifierType});
            return ((catalogProductTierPriceEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeTierPriceInfo(string sessionId, string product, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeTierPriceInfo", new object[] {
                        sessionId,
                        product,
                        identifierType}, callback, asyncState);
        }
        
        public catalogProductTierPriceEntity[] EndcatalogProductAttributeTierPriceInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductTierPriceEntity[])(results[0]));
        }
        
        public void catalogProductAttributeTierPriceInfoAsync(string sessionId, string product, string identifierType) {
            this.catalogProductAttributeTierPriceInfoAsync(sessionId, product, identifierType, null);
        }
        
        public void catalogProductAttributeTierPriceInfoAsync(string sessionId, string product, string identifierType, object userState) {
            if ((this.catalogProductAttributeTierPriceInfoOperationCompleted == null)) {
                this.catalogProductAttributeTierPriceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeTierPriceInfoCompleted);
            }
            this.InvokeAsync("catalogProductAttributeTierPriceInfo", new object[] {
                        sessionId,
                        product,
                        identifierType}, this.catalogProductAttributeTierPriceInfoOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeTierPriceInfoCompleted(object arg) {
            if ((this.catalogProductAttributeTierPriceInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeTierPriceInfoCompleted(this, new catalogProductAttributeTierPriceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Update product tier prices
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public int catalogProductAttributeTierPriceUpdate(string sessionId, string product, catalogProductTierPriceEntity[] tier_price, string identifierType) {
            object[] results = this.Invoke("catalogProductAttributeTierPriceUpdate", new object[] {
                        sessionId,
                        product,
                        tier_price,
                        identifierType});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeTierPriceUpdate(string sessionId, string product, catalogProductTierPriceEntity[] tier_price, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeTierPriceUpdate", new object[] {
                        sessionId,
                        product,
                        tier_price,
                        identifierType}, callback, asyncState);
        }
        
        public int EndcatalogProductAttributeTierPriceUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void catalogProductAttributeTierPriceUpdateAsync(string sessionId, string product, catalogProductTierPriceEntity[] tier_price, string identifierType) {
            this.catalogProductAttributeTierPriceUpdateAsync(sessionId, product, tier_price, identifierType, null);
        }
        
        public void catalogProductAttributeTierPriceUpdateAsync(string sessionId, string product, catalogProductTierPriceEntity[] tier_price, string identifierType, object userState) {
            if ((this.catalogProductAttributeTierPriceUpdateOperationCompleted == null)) {
                this.catalogProductAttributeTierPriceUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeTierPriceUpdateCompleted);
            }
            this.InvokeAsync("catalogProductAttributeTierPriceUpdate", new object[] {
                        sessionId,
                        product,
                        tier_price,
                        identifierType}, this.catalogProductAttributeTierPriceUpdateOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeTierPriceUpdateCompleted(object arg) {
            if ((this.catalogProductAttributeTierPriceUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeTierPriceUpdateCompleted(this, new catalogProductAttributeTierPriceUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve category attributes
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogAttributeEntity[] catalogCategoryAttributeList(string sessionId) {
            object[] results = this.Invoke("catalogCategoryAttributeList", new object[] {
                        sessionId});
            return ((catalogAttributeEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogCategoryAttributeList(string sessionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogCategoryAttributeList", new object[] {
                        sessionId}, callback, asyncState);
        }
        
        public catalogAttributeEntity[] EndcatalogCategoryAttributeList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogAttributeEntity[])(results[0]));
        }
        
        public void catalogCategoryAttributeListAsync(string sessionId) {
            this.catalogCategoryAttributeListAsync(sessionId, null);
        }
        
        public void catalogCategoryAttributeListAsync(string sessionId, object userState) {
            if ((this.catalogCategoryAttributeListOperationCompleted == null)) {
                this.catalogCategoryAttributeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogCategoryAttributeListCompleted);
            }
            this.InvokeAsync("catalogCategoryAttributeList", new object[] {
                        sessionId}, this.catalogCategoryAttributeListOperationCompleted, userState);
        }
        
        private void OncatalogCategoryAttributeListCompleted(object arg) {
            if ((this.catalogCategoryAttributeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogCategoryAttributeListCompleted(this, new catalogCategoryAttributeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve attribute options
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogAttributeOptionEntity[] catalogCategoryAttributeOptions(string sessionId, string attributeId, string storeView) {
            object[] results = this.Invoke("catalogCategoryAttributeOptions", new object[] {
                        sessionId,
                        attributeId,
                        storeView});
            return ((catalogAttributeOptionEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogCategoryAttributeOptions(string sessionId, string attributeId, string storeView, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogCategoryAttributeOptions", new object[] {
                        sessionId,
                        attributeId,
                        storeView}, callback, asyncState);
        }
        
        public catalogAttributeOptionEntity[] EndcatalogCategoryAttributeOptions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogAttributeOptionEntity[])(results[0]));
        }
        
        public void catalogCategoryAttributeOptionsAsync(string sessionId, string attributeId, string storeView) {
            this.catalogCategoryAttributeOptionsAsync(sessionId, attributeId, storeView, null);
        }
        
        public void catalogCategoryAttributeOptionsAsync(string sessionId, string attributeId, string storeView, object userState) {
            if ((this.catalogCategoryAttributeOptionsOperationCompleted == null)) {
                this.catalogCategoryAttributeOptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogCategoryAttributeOptionsCompleted);
            }
            this.InvokeAsync("catalogCategoryAttributeOptions", new object[] {
                        sessionId,
                        attributeId,
                        storeView}, this.catalogCategoryAttributeOptionsOperationCompleted, userState);
        }
        
        private void OncatalogCategoryAttributeOptionsCompleted(object arg) {
            if ((this.catalogCategoryAttributeOptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogCategoryAttributeOptionsCompleted(this, new catalogCategoryAttributeOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve product image list
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogProductImageEntity[] catalogProductAttributeMediaList(string sessionId, string product, string storeView, string identifierType) {
            object[] results = this.Invoke("catalogProductAttributeMediaList", new object[] {
                        sessionId,
                        product,
                        storeView,
                        identifierType});
            return ((catalogProductImageEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeMediaList(string sessionId, string product, string storeView, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeMediaList", new object[] {
                        sessionId,
                        product,
                        storeView,
                        identifierType}, callback, asyncState);
        }
        
        public catalogProductImageEntity[] EndcatalogProductAttributeMediaList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductImageEntity[])(results[0]));
        }
        
        public void catalogProductAttributeMediaListAsync(string sessionId, string product, string storeView, string identifierType) {
            this.catalogProductAttributeMediaListAsync(sessionId, product, storeView, identifierType, null);
        }
        
        public void catalogProductAttributeMediaListAsync(string sessionId, string product, string storeView, string identifierType, object userState) {
            if ((this.catalogProductAttributeMediaListOperationCompleted == null)) {
                this.catalogProductAttributeMediaListOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeMediaListCompleted);
            }
            this.InvokeAsync("catalogProductAttributeMediaList", new object[] {
                        sessionId,
                        product,
                        storeView,
                        identifierType}, this.catalogProductAttributeMediaListOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeMediaListCompleted(object arg) {
            if ((this.catalogProductAttributeMediaListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeMediaListCompleted(this, new catalogProductAttributeMediaListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve product image data
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogProductImageEntity catalogProductAttributeMediaInfo(string sessionId, string product, string file, string storeView, string identifierType) {
            object[] results = this.Invoke("catalogProductAttributeMediaInfo", new object[] {
                        sessionId,
                        product,
                        file,
                        storeView,
                        identifierType});
            return ((catalogProductImageEntity)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeMediaInfo(string sessionId, string product, string file, string storeView, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeMediaInfo", new object[] {
                        sessionId,
                        product,
                        file,
                        storeView,
                        identifierType}, callback, asyncState);
        }
        
        public catalogProductImageEntity EndcatalogProductAttributeMediaInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductImageEntity)(results[0]));
        }
        
        public void catalogProductAttributeMediaInfoAsync(string sessionId, string product, string file, string storeView, string identifierType) {
            this.catalogProductAttributeMediaInfoAsync(sessionId, product, file, storeView, identifierType, null);
        }
        
        public void catalogProductAttributeMediaInfoAsync(string sessionId, string product, string file, string storeView, string identifierType, object userState) {
            if ((this.catalogProductAttributeMediaInfoOperationCompleted == null)) {
                this.catalogProductAttributeMediaInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeMediaInfoCompleted);
            }
            this.InvokeAsync("catalogProductAttributeMediaInfo", new object[] {
                        sessionId,
                        product,
                        file,
                        storeView,
                        identifierType}, this.catalogProductAttributeMediaInfoOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeMediaInfoCompleted(object arg) {
            if ((this.catalogProductAttributeMediaInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeMediaInfoCompleted(this, new catalogProductAttributeMediaInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve product image types
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogProductAttributeMediaTypeEntity[] catalogProductAttributeMediaTypes(string sessionId, string setId) {
            object[] results = this.Invoke("catalogProductAttributeMediaTypes", new object[] {
                        sessionId,
                        setId});
            return ((catalogProductAttributeMediaTypeEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeMediaTypes(string sessionId, string setId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeMediaTypes", new object[] {
                        sessionId,
                        setId}, callback, asyncState);
        }
        
        public catalogProductAttributeMediaTypeEntity[] EndcatalogProductAttributeMediaTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductAttributeMediaTypeEntity[])(results[0]));
        }
        
        public void catalogProductAttributeMediaTypesAsync(string sessionId, string setId) {
            this.catalogProductAttributeMediaTypesAsync(sessionId, setId, null);
        }
        
        public void catalogProductAttributeMediaTypesAsync(string sessionId, string setId, object userState) {
            if ((this.catalogProductAttributeMediaTypesOperationCompleted == null)) {
                this.catalogProductAttributeMediaTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeMediaTypesCompleted);
            }
            this.InvokeAsync("catalogProductAttributeMediaTypes", new object[] {
                        sessionId,
                        setId}, this.catalogProductAttributeMediaTypesOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeMediaTypesCompleted(object arg) {
            if ((this.catalogProductAttributeMediaTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeMediaTypesCompleted(this, new catalogProductAttributeMediaTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Upload new product image
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public string catalogProductAttributeMediaCreate(string sessionId, string product, catalogProductAttributeMediaCreateEntity data, string storeView, string identifierType) {
            object[] results = this.Invoke("catalogProductAttributeMediaCreate", new object[] {
                        sessionId,
                        product,
                        data,
                        storeView,
                        identifierType});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeMediaCreate(string sessionId, string product, catalogProductAttributeMediaCreateEntity data, string storeView, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeMediaCreate", new object[] {
                        sessionId,
                        product,
                        data,
                        storeView,
                        identifierType}, callback, asyncState);
        }
        
        public string EndcatalogProductAttributeMediaCreate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void catalogProductAttributeMediaCreateAsync(string sessionId, string product, catalogProductAttributeMediaCreateEntity data, string storeView, string identifierType) {
            this.catalogProductAttributeMediaCreateAsync(sessionId, product, data, storeView, identifierType, null);
        }
        
        public void catalogProductAttributeMediaCreateAsync(string sessionId, string product, catalogProductAttributeMediaCreateEntity data, string storeView, string identifierType, object userState) {
            if ((this.catalogProductAttributeMediaCreateOperationCompleted == null)) {
                this.catalogProductAttributeMediaCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeMediaCreateCompleted);
            }
            this.InvokeAsync("catalogProductAttributeMediaCreate", new object[] {
                        sessionId,
                        product,
                        data,
                        storeView,
                        identifierType}, this.catalogProductAttributeMediaCreateOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeMediaCreateCompleted(object arg) {
            if ((this.catalogProductAttributeMediaCreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeMediaCreateCompleted(this, new catalogProductAttributeMediaCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Update product image
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductAttributeMediaUpdate(string sessionId, string product, string file, catalogProductAttributeMediaCreateEntity data, string storeView, string identifierType) {
            object[] results = this.Invoke("catalogProductAttributeMediaUpdate", new object[] {
                        sessionId,
                        product,
                        file,
                        data,
                        storeView,
                        identifierType});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeMediaUpdate(string sessionId, string product, string file, catalogProductAttributeMediaCreateEntity data, string storeView, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeMediaUpdate", new object[] {
                        sessionId,
                        product,
                        file,
                        data,
                        storeView,
                        identifierType}, callback, asyncState);
        }
        
        public bool EndcatalogProductAttributeMediaUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductAttributeMediaUpdateAsync(string sessionId, string product, string file, catalogProductAttributeMediaCreateEntity data, string storeView, string identifierType) {
            this.catalogProductAttributeMediaUpdateAsync(sessionId, product, file, data, storeView, identifierType, null);
        }
        
        public void catalogProductAttributeMediaUpdateAsync(string sessionId, string product, string file, catalogProductAttributeMediaCreateEntity data, string storeView, string identifierType, object userState) {
            if ((this.catalogProductAttributeMediaUpdateOperationCompleted == null)) {
                this.catalogProductAttributeMediaUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeMediaUpdateCompleted);
            }
            this.InvokeAsync("catalogProductAttributeMediaUpdate", new object[] {
                        sessionId,
                        product,
                        file,
                        data,
                        storeView,
                        identifierType}, this.catalogProductAttributeMediaUpdateOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeMediaUpdateCompleted(object arg) {
            if ((this.catalogProductAttributeMediaUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeMediaUpdateCompleted(this, new catalogProductAttributeMediaUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Remove product image
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductAttributeMediaRemove(string sessionId, string product, string file, string identifierType) {
            object[] results = this.Invoke("catalogProductAttributeMediaRemove", new object[] {
                        sessionId,
                        product,
                        file,
                        identifierType});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductAttributeMediaRemove(string sessionId, string product, string file, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductAttributeMediaRemove", new object[] {
                        sessionId,
                        product,
                        file,
                        identifierType}, callback, asyncState);
        }
        
        public bool EndcatalogProductAttributeMediaRemove(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductAttributeMediaRemoveAsync(string sessionId, string product, string file, string identifierType) {
            this.catalogProductAttributeMediaRemoveAsync(sessionId, product, file, identifierType, null);
        }
        
        public void catalogProductAttributeMediaRemoveAsync(string sessionId, string product, string file, string identifierType, object userState) {
            if ((this.catalogProductAttributeMediaRemoveOperationCompleted == null)) {
                this.catalogProductAttributeMediaRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductAttributeMediaRemoveCompleted);
            }
            this.InvokeAsync("catalogProductAttributeMediaRemove", new object[] {
                        sessionId,
                        product,
                        file,
                        identifierType}, this.catalogProductAttributeMediaRemoveOperationCompleted, userState);
        }
        
        private void OncatalogProductAttributeMediaRemoveCompleted(object arg) {
            if ((this.catalogProductAttributeMediaRemoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductAttributeMediaRemoveCompleted(this, new catalogProductAttributeMediaRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve linked products
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogProductLinkEntity[] catalogProductLinkList(string sessionId, string type, string product, string identifierType) {
            object[] results = this.Invoke("catalogProductLinkList", new object[] {
                        sessionId,
                        type,
                        product,
                        identifierType});
            return ((catalogProductLinkEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductLinkList(string sessionId, string type, string product, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductLinkList", new object[] {
                        sessionId,
                        type,
                        product,
                        identifierType}, callback, asyncState);
        }
        
        public catalogProductLinkEntity[] EndcatalogProductLinkList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductLinkEntity[])(results[0]));
        }
        
        public void catalogProductLinkListAsync(string sessionId, string type, string product, string identifierType) {
            this.catalogProductLinkListAsync(sessionId, type, product, identifierType, null);
        }
        
        public void catalogProductLinkListAsync(string sessionId, string type, string product, string identifierType, object userState) {
            if ((this.catalogProductLinkListOperationCompleted == null)) {
                this.catalogProductLinkListOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductLinkListCompleted);
            }
            this.InvokeAsync("catalogProductLinkList", new object[] {
                        sessionId,
                        type,
                        product,
                        identifierType}, this.catalogProductLinkListOperationCompleted, userState);
        }
        
        private void OncatalogProductLinkListCompleted(object arg) {
            if ((this.catalogProductLinkListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductLinkListCompleted(this, new catalogProductLinkListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Assign product link
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductLinkAssign(string sessionId, string type, string product, string linkedProduct, catalogProductLinkEntity data, string identifierType) {
            object[] results = this.Invoke("catalogProductLinkAssign", new object[] {
                        sessionId,
                        type,
                        product,
                        linkedProduct,
                        data,
                        identifierType});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductLinkAssign(string sessionId, string type, string product, string linkedProduct, catalogProductLinkEntity data, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductLinkAssign", new object[] {
                        sessionId,
                        type,
                        product,
                        linkedProduct,
                        data,
                        identifierType}, callback, asyncState);
        }
        
        public bool EndcatalogProductLinkAssign(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductLinkAssignAsync(string sessionId, string type, string product, string linkedProduct, catalogProductLinkEntity data, string identifierType) {
            this.catalogProductLinkAssignAsync(sessionId, type, product, linkedProduct, data, identifierType, null);
        }
        
        public void catalogProductLinkAssignAsync(string sessionId, string type, string product, string linkedProduct, catalogProductLinkEntity data, string identifierType, object userState) {
            if ((this.catalogProductLinkAssignOperationCompleted == null)) {
                this.catalogProductLinkAssignOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductLinkAssignCompleted);
            }
            this.InvokeAsync("catalogProductLinkAssign", new object[] {
                        sessionId,
                        type,
                        product,
                        linkedProduct,
                        data,
                        identifierType}, this.catalogProductLinkAssignOperationCompleted, userState);
        }
        
        private void OncatalogProductLinkAssignCompleted(object arg) {
            if ((this.catalogProductLinkAssignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductLinkAssignCompleted(this, new catalogProductLinkAssignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Update product link
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductLinkUpdate(string sessionId, string type, string product, string linkedProduct, catalogProductLinkEntity data, string identifierType) {
            object[] results = this.Invoke("catalogProductLinkUpdate", new object[] {
                        sessionId,
                        type,
                        product,
                        linkedProduct,
                        data,
                        identifierType});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductLinkUpdate(string sessionId, string type, string product, string linkedProduct, catalogProductLinkEntity data, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductLinkUpdate", new object[] {
                        sessionId,
                        type,
                        product,
                        linkedProduct,
                        data,
                        identifierType}, callback, asyncState);
        }
        
        public bool EndcatalogProductLinkUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductLinkUpdateAsync(string sessionId, string type, string product, string linkedProduct, catalogProductLinkEntity data, string identifierType) {
            this.catalogProductLinkUpdateAsync(sessionId, type, product, linkedProduct, data, identifierType, null);
        }
        
        public void catalogProductLinkUpdateAsync(string sessionId, string type, string product, string linkedProduct, catalogProductLinkEntity data, string identifierType, object userState) {
            if ((this.catalogProductLinkUpdateOperationCompleted == null)) {
                this.catalogProductLinkUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductLinkUpdateCompleted);
            }
            this.InvokeAsync("catalogProductLinkUpdate", new object[] {
                        sessionId,
                        type,
                        product,
                        linkedProduct,
                        data,
                        identifierType}, this.catalogProductLinkUpdateOperationCompleted, userState);
        }
        
        private void OncatalogProductLinkUpdateCompleted(object arg) {
            if ((this.catalogProductLinkUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductLinkUpdateCompleted(this, new catalogProductLinkUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Remove product link
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductLinkRemove(string sessionId, string type, string product, string linkedProduct, string identifierType) {
            object[] results = this.Invoke("catalogProductLinkRemove", new object[] {
                        sessionId,
                        type,
                        product,
                        linkedProduct,
                        identifierType});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductLinkRemove(string sessionId, string type, string product, string linkedProduct, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductLinkRemove", new object[] {
                        sessionId,
                        type,
                        product,
                        linkedProduct,
                        identifierType}, callback, asyncState);
        }
        
        public bool EndcatalogProductLinkRemove(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductLinkRemoveAsync(string sessionId, string type, string product, string linkedProduct, string identifierType) {
            this.catalogProductLinkRemoveAsync(sessionId, type, product, linkedProduct, identifierType, null);
        }
        
        public void catalogProductLinkRemoveAsync(string sessionId, string type, string product, string linkedProduct, string identifierType, object userState) {
            if ((this.catalogProductLinkRemoveOperationCompleted == null)) {
                this.catalogProductLinkRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductLinkRemoveCompleted);
            }
            this.InvokeAsync("catalogProductLinkRemove", new object[] {
                        sessionId,
                        type,
                        product,
                        linkedProduct,
                        identifierType}, this.catalogProductLinkRemoveOperationCompleted, userState);
        }
        
        private void OncatalogProductLinkRemoveCompleted(object arg) {
            if ((this.catalogProductLinkRemoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductLinkRemoveCompleted(this, new catalogProductLinkRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve product link types
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public string[] catalogProductLinkTypes(string sessionId) {
            object[] results = this.Invoke("catalogProductLinkTypes", new object[] {
                        sessionId});
            return ((string[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductLinkTypes(string sessionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductLinkTypes", new object[] {
                        sessionId}, callback, asyncState);
        }
        
        public string[] EndcatalogProductLinkTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        public void catalogProductLinkTypesAsync(string sessionId) {
            this.catalogProductLinkTypesAsync(sessionId, null);
        }
        
        public void catalogProductLinkTypesAsync(string sessionId, object userState) {
            if ((this.catalogProductLinkTypesOperationCompleted == null)) {
                this.catalogProductLinkTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductLinkTypesCompleted);
            }
            this.InvokeAsync("catalogProductLinkTypes", new object[] {
                        sessionId}, this.catalogProductLinkTypesOperationCompleted, userState);
        }
        
        private void OncatalogProductLinkTypesCompleted(object arg) {
            if ((this.catalogProductLinkTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductLinkTypesCompleted(this, new catalogProductLinkTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve product link type attributes
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogProductLinkAttributeEntity[] catalogProductLinkAttributes(string sessionId, string type) {
            object[] results = this.Invoke("catalogProductLinkAttributes", new object[] {
                        sessionId,
                        type});
            return ((catalogProductLinkAttributeEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductLinkAttributes(string sessionId, string type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductLinkAttributes", new object[] {
                        sessionId,
                        type}, callback, asyncState);
        }
        
        public catalogProductLinkAttributeEntity[] EndcatalogProductLinkAttributes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductLinkAttributeEntity[])(results[0]));
        }
        
        public void catalogProductLinkAttributesAsync(string sessionId, string type) {
            this.catalogProductLinkAttributesAsync(sessionId, type, null);
        }
        
        public void catalogProductLinkAttributesAsync(string sessionId, string type, object userState) {
            if ((this.catalogProductLinkAttributesOperationCompleted == null)) {
                this.catalogProductLinkAttributesOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductLinkAttributesCompleted);
            }
            this.InvokeAsync("catalogProductLinkAttributes", new object[] {
                        sessionId,
                        type}, this.catalogProductLinkAttributesOperationCompleted, userState);
        }
        
        private void OncatalogProductLinkAttributesCompleted(object arg) {
            if ((this.catalogProductLinkAttributesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductLinkAttributesCompleted(this, new catalogProductLinkAttributesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Add new custom option into product
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductCustomOptionAdd(string sessionId, string productId, catalogProductCustomOptionToAdd data, string store) {
            object[] results = this.Invoke("catalogProductCustomOptionAdd", new object[] {
                        sessionId,
                        productId,
                        data,
                        store});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductCustomOptionAdd(string sessionId, string productId, catalogProductCustomOptionToAdd data, string store, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductCustomOptionAdd", new object[] {
                        sessionId,
                        productId,
                        data,
                        store}, callback, asyncState);
        }
        
        public bool EndcatalogProductCustomOptionAdd(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductCustomOptionAddAsync(string sessionId, string productId, catalogProductCustomOptionToAdd data, string store) {
            this.catalogProductCustomOptionAddAsync(sessionId, productId, data, store, null);
        }
        
        public void catalogProductCustomOptionAddAsync(string sessionId, string productId, catalogProductCustomOptionToAdd data, string store, object userState) {
            if ((this.catalogProductCustomOptionAddOperationCompleted == null)) {
                this.catalogProductCustomOptionAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductCustomOptionAddCompleted);
            }
            this.InvokeAsync("catalogProductCustomOptionAdd", new object[] {
                        sessionId,
                        productId,
                        data,
                        store}, this.catalogProductCustomOptionAddOperationCompleted, userState);
        }
        
        private void OncatalogProductCustomOptionAddCompleted(object arg) {
            if ((this.catalogProductCustomOptionAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductCustomOptionAddCompleted(this, new catalogProductCustomOptionAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Update product custom option
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductCustomOptionUpdate(string sessionId, string optionId, catalogProductCustomOptionToUpdate data, string store) {
            object[] results = this.Invoke("catalogProductCustomOptionUpdate", new object[] {
                        sessionId,
                        optionId,
                        data,
                        store});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductCustomOptionUpdate(string sessionId, string optionId, catalogProductCustomOptionToUpdate data, string store, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductCustomOptionUpdate", new object[] {
                        sessionId,
                        optionId,
                        data,
                        store}, callback, asyncState);
        }
        
        public bool EndcatalogProductCustomOptionUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductCustomOptionUpdateAsync(string sessionId, string optionId, catalogProductCustomOptionToUpdate data, string store) {
            this.catalogProductCustomOptionUpdateAsync(sessionId, optionId, data, store, null);
        }
        
        public void catalogProductCustomOptionUpdateAsync(string sessionId, string optionId, catalogProductCustomOptionToUpdate data, string store, object userState) {
            if ((this.catalogProductCustomOptionUpdateOperationCompleted == null)) {
                this.catalogProductCustomOptionUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductCustomOptionUpdateCompleted);
            }
            this.InvokeAsync("catalogProductCustomOptionUpdate", new object[] {
                        sessionId,
                        optionId,
                        data,
                        store}, this.catalogProductCustomOptionUpdateOperationCompleted, userState);
        }
        
        private void OncatalogProductCustomOptionUpdateCompleted(object arg) {
            if ((this.catalogProductCustomOptionUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductCustomOptionUpdateCompleted(this, new catalogProductCustomOptionUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get full information about custom option in product
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogProductCustomOptionInfoEntity catalogProductCustomOptionInfo(string sessionId, string optionId, string store) {
            object[] results = this.Invoke("catalogProductCustomOptionInfo", new object[] {
                        sessionId,
                        optionId,
                        store});
            return ((catalogProductCustomOptionInfoEntity)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductCustomOptionInfo(string sessionId, string optionId, string store, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductCustomOptionInfo", new object[] {
                        sessionId,
                        optionId,
                        store}, callback, asyncState);
        }
        
        public catalogProductCustomOptionInfoEntity EndcatalogProductCustomOptionInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductCustomOptionInfoEntity)(results[0]));
        }
        
        public void catalogProductCustomOptionInfoAsync(string sessionId, string optionId, string store) {
            this.catalogProductCustomOptionInfoAsync(sessionId, optionId, store, null);
        }
        
        public void catalogProductCustomOptionInfoAsync(string sessionId, string optionId, string store, object userState) {
            if ((this.catalogProductCustomOptionInfoOperationCompleted == null)) {
                this.catalogProductCustomOptionInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductCustomOptionInfoCompleted);
            }
            this.InvokeAsync("catalogProductCustomOptionInfo", new object[] {
                        sessionId,
                        optionId,
                        store}, this.catalogProductCustomOptionInfoOperationCompleted, userState);
        }
        
        private void OncatalogProductCustomOptionInfoCompleted(object arg) {
            if ((this.catalogProductCustomOptionInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductCustomOptionInfoCompleted(this, new catalogProductCustomOptionInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get list of available custom option types
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogProductCustomOptionTypesEntity[] catalogProductCustomOptionTypes(string sessionId) {
            object[] results = this.Invoke("catalogProductCustomOptionTypes", new object[] {
                        sessionId});
            return ((catalogProductCustomOptionTypesEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductCustomOptionTypes(string sessionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductCustomOptionTypes", new object[] {
                        sessionId}, callback, asyncState);
        }
        
        public catalogProductCustomOptionTypesEntity[] EndcatalogProductCustomOptionTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductCustomOptionTypesEntity[])(results[0]));
        }
        
        public void catalogProductCustomOptionTypesAsync(string sessionId) {
            this.catalogProductCustomOptionTypesAsync(sessionId, null);
        }
        
        public void catalogProductCustomOptionTypesAsync(string sessionId, object userState) {
            if ((this.catalogProductCustomOptionTypesOperationCompleted == null)) {
                this.catalogProductCustomOptionTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductCustomOptionTypesCompleted);
            }
            this.InvokeAsync("catalogProductCustomOptionTypes", new object[] {
                        sessionId}, this.catalogProductCustomOptionTypesOperationCompleted, userState);
        }
        
        private void OncatalogProductCustomOptionTypesCompleted(object arg) {
            if ((this.catalogProductCustomOptionTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductCustomOptionTypesCompleted(this, new catalogProductCustomOptionTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve custom option value info
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogProductCustomOptionValueInfoEntity catalogProductCustomOptionValueInfo(string sessionId, string valueId, string store) {
            object[] results = this.Invoke("catalogProductCustomOptionValueInfo", new object[] {
                        sessionId,
                        valueId,
                        store});
            return ((catalogProductCustomOptionValueInfoEntity)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductCustomOptionValueInfo(string sessionId, string valueId, string store, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductCustomOptionValueInfo", new object[] {
                        sessionId,
                        valueId,
                        store}, callback, asyncState);
        }
        
        public catalogProductCustomOptionValueInfoEntity EndcatalogProductCustomOptionValueInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductCustomOptionValueInfoEntity)(results[0]));
        }
        
        public void catalogProductCustomOptionValueInfoAsync(string sessionId, string valueId, string store) {
            this.catalogProductCustomOptionValueInfoAsync(sessionId, valueId, store, null);
        }
        
        public void catalogProductCustomOptionValueInfoAsync(string sessionId, string valueId, string store, object userState) {
            if ((this.catalogProductCustomOptionValueInfoOperationCompleted == null)) {
                this.catalogProductCustomOptionValueInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductCustomOptionValueInfoCompleted);
            }
            this.InvokeAsync("catalogProductCustomOptionValueInfo", new object[] {
                        sessionId,
                        valueId,
                        store}, this.catalogProductCustomOptionValueInfoOperationCompleted, userState);
        }
        
        private void OncatalogProductCustomOptionValueInfoCompleted(object arg) {
            if ((this.catalogProductCustomOptionValueInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductCustomOptionValueInfoCompleted(this, new catalogProductCustomOptionValueInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve custom option values list
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogProductCustomOptionValueListEntity[] catalogProductCustomOptionValueList(string sessionId, string optionId, string store) {
            object[] results = this.Invoke("catalogProductCustomOptionValueList", new object[] {
                        sessionId,
                        optionId,
                        store});
            return ((catalogProductCustomOptionValueListEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductCustomOptionValueList(string sessionId, string optionId, string store, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductCustomOptionValueList", new object[] {
                        sessionId,
                        optionId,
                        store}, callback, asyncState);
        }
        
        public catalogProductCustomOptionValueListEntity[] EndcatalogProductCustomOptionValueList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductCustomOptionValueListEntity[])(results[0]));
        }
        
        public void catalogProductCustomOptionValueListAsync(string sessionId, string optionId, string store) {
            this.catalogProductCustomOptionValueListAsync(sessionId, optionId, store, null);
        }
        
        public void catalogProductCustomOptionValueListAsync(string sessionId, string optionId, string store, object userState) {
            if ((this.catalogProductCustomOptionValueListOperationCompleted == null)) {
                this.catalogProductCustomOptionValueListOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductCustomOptionValueListCompleted);
            }
            this.InvokeAsync("catalogProductCustomOptionValueList", new object[] {
                        sessionId,
                        optionId,
                        store}, this.catalogProductCustomOptionValueListOperationCompleted, userState);
        }
        
        private void OncatalogProductCustomOptionValueListCompleted(object arg) {
            if ((this.catalogProductCustomOptionValueListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductCustomOptionValueListCompleted(this, new catalogProductCustomOptionValueListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Add new custom option values
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductCustomOptionValueAdd(string sessionId, string optionId, catalogProductCustomOptionValueAddEntity[] data, string store) {
            object[] results = this.Invoke("catalogProductCustomOptionValueAdd", new object[] {
                        sessionId,
                        optionId,
                        data,
                        store});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductCustomOptionValueAdd(string sessionId, string optionId, catalogProductCustomOptionValueAddEntity[] data, string store, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductCustomOptionValueAdd", new object[] {
                        sessionId,
                        optionId,
                        data,
                        store}, callback, asyncState);
        }
        
        public bool EndcatalogProductCustomOptionValueAdd(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductCustomOptionValueAddAsync(string sessionId, string optionId, catalogProductCustomOptionValueAddEntity[] data, string store) {
            this.catalogProductCustomOptionValueAddAsync(sessionId, optionId, data, store, null);
        }
        
        public void catalogProductCustomOptionValueAddAsync(string sessionId, string optionId, catalogProductCustomOptionValueAddEntity[] data, string store, object userState) {
            if ((this.catalogProductCustomOptionValueAddOperationCompleted == null)) {
                this.catalogProductCustomOptionValueAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductCustomOptionValueAddCompleted);
            }
            this.InvokeAsync("catalogProductCustomOptionValueAdd", new object[] {
                        sessionId,
                        optionId,
                        data,
                        store}, this.catalogProductCustomOptionValueAddOperationCompleted, userState);
        }
        
        private void OncatalogProductCustomOptionValueAddCompleted(object arg) {
            if ((this.catalogProductCustomOptionValueAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductCustomOptionValueAddCompleted(this, new catalogProductCustomOptionValueAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Update custom option value
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductCustomOptionValueUpdate(string sessionId, string valueId, catalogProductCustomOptionValueUpdateEntity data, string storeId) {
            object[] results = this.Invoke("catalogProductCustomOptionValueUpdate", new object[] {
                        sessionId,
                        valueId,
                        data,
                        storeId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductCustomOptionValueUpdate(string sessionId, string valueId, catalogProductCustomOptionValueUpdateEntity data, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductCustomOptionValueUpdate", new object[] {
                        sessionId,
                        valueId,
                        data,
                        storeId}, callback, asyncState);
        }
        
        public bool EndcatalogProductCustomOptionValueUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductCustomOptionValueUpdateAsync(string sessionId, string valueId, catalogProductCustomOptionValueUpdateEntity data, string storeId) {
            this.catalogProductCustomOptionValueUpdateAsync(sessionId, valueId, data, storeId, null);
        }
        
        public void catalogProductCustomOptionValueUpdateAsync(string sessionId, string valueId, catalogProductCustomOptionValueUpdateEntity data, string storeId, object userState) {
            if ((this.catalogProductCustomOptionValueUpdateOperationCompleted == null)) {
                this.catalogProductCustomOptionValueUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductCustomOptionValueUpdateCompleted);
            }
            this.InvokeAsync("catalogProductCustomOptionValueUpdate", new object[] {
                        sessionId,
                        valueId,
                        data,
                        storeId}, this.catalogProductCustomOptionValueUpdateOperationCompleted, userState);
        }
        
        private void OncatalogProductCustomOptionValueUpdateCompleted(object arg) {
            if ((this.catalogProductCustomOptionValueUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductCustomOptionValueUpdateCompleted(this, new catalogProductCustomOptionValueUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Remove value from custom option
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductCustomOptionValueRemove(string sessionId, string valueId) {
            object[] results = this.Invoke("catalogProductCustomOptionValueRemove", new object[] {
                        sessionId,
                        valueId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductCustomOptionValueRemove(string sessionId, string valueId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductCustomOptionValueRemove", new object[] {
                        sessionId,
                        valueId}, callback, asyncState);
        }
        
        public bool EndcatalogProductCustomOptionValueRemove(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductCustomOptionValueRemoveAsync(string sessionId, string valueId) {
            this.catalogProductCustomOptionValueRemoveAsync(sessionId, valueId, null);
        }
        
        public void catalogProductCustomOptionValueRemoveAsync(string sessionId, string valueId, object userState) {
            if ((this.catalogProductCustomOptionValueRemoveOperationCompleted == null)) {
                this.catalogProductCustomOptionValueRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductCustomOptionValueRemoveCompleted);
            }
            this.InvokeAsync("catalogProductCustomOptionValueRemove", new object[] {
                        sessionId,
                        valueId}, this.catalogProductCustomOptionValueRemoveOperationCompleted, userState);
        }
        
        private void OncatalogProductCustomOptionValueRemoveCompleted(object arg) {
            if ((this.catalogProductCustomOptionValueRemoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductCustomOptionValueRemoveCompleted(this, new catalogProductCustomOptionValueRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve list of product custom options
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogProductCustomOptionListEntity[] catalogProductCustomOptionList(string sessionId, string productId, string store) {
            object[] results = this.Invoke("catalogProductCustomOptionList", new object[] {
                        sessionId,
                        productId,
                        store});
            return ((catalogProductCustomOptionListEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductCustomOptionList(string sessionId, string productId, string store, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductCustomOptionList", new object[] {
                        sessionId,
                        productId,
                        store}, callback, asyncState);
        }
        
        public catalogProductCustomOptionListEntity[] EndcatalogProductCustomOptionList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductCustomOptionListEntity[])(results[0]));
        }
        
        public void catalogProductCustomOptionListAsync(string sessionId, string productId, string store) {
            this.catalogProductCustomOptionListAsync(sessionId, productId, store, null);
        }
        
        public void catalogProductCustomOptionListAsync(string sessionId, string productId, string store, object userState) {
            if ((this.catalogProductCustomOptionListOperationCompleted == null)) {
                this.catalogProductCustomOptionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductCustomOptionListCompleted);
            }
            this.InvokeAsync("catalogProductCustomOptionList", new object[] {
                        sessionId,
                        productId,
                        store}, this.catalogProductCustomOptionListOperationCompleted, userState);
        }
        
        private void OncatalogProductCustomOptionListCompleted(object arg) {
            if ((this.catalogProductCustomOptionListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductCustomOptionListCompleted(this, new catalogProductCustomOptionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Remove custom option
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductCustomOptionRemove(string sessionId, string optionId) {
            object[] results = this.Invoke("catalogProductCustomOptionRemove", new object[] {
                        sessionId,
                        optionId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductCustomOptionRemove(string sessionId, string optionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductCustomOptionRemove", new object[] {
                        sessionId,
                        optionId}, callback, asyncState);
        }
        
        public bool EndcatalogProductCustomOptionRemove(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductCustomOptionRemoveAsync(string sessionId, string optionId) {
            this.catalogProductCustomOptionRemoveAsync(sessionId, optionId, null);
        }
        
        public void catalogProductCustomOptionRemoveAsync(string sessionId, string optionId, object userState) {
            if ((this.catalogProductCustomOptionRemoveOperationCompleted == null)) {
                this.catalogProductCustomOptionRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductCustomOptionRemoveCompleted);
            }
            this.InvokeAsync("catalogProductCustomOptionRemove", new object[] {
                        sessionId,
                        optionId}, this.catalogProductCustomOptionRemoveOperationCompleted, userState);
        }
        
        private void OncatalogProductCustomOptionRemoveCompleted(object arg) {
            if ((this.catalogProductCustomOptionRemoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductCustomOptionRemoveCompleted(this, new catalogProductCustomOptionRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve list of orders by filters
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public salesOrderListEntity[] salesOrderList(string sessionId, filters filters) {
            object[] results = this.Invoke("salesOrderList", new object[] {
                        sessionId,
                        filters});
            return ((salesOrderListEntity[])(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderList(string sessionId, filters filters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderList", new object[] {
                        sessionId,
                        filters}, callback, asyncState);
        }
        
        public salesOrderListEntity[] EndsalesOrderList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((salesOrderListEntity[])(results[0]));
        }
        
        public void salesOrderListAsync(string sessionId, filters filters) {
            this.salesOrderListAsync(sessionId, filters, null);
        }
        
        public void salesOrderListAsync(string sessionId, filters filters, object userState) {
            if ((this.salesOrderListOperationCompleted == null)) {
                this.salesOrderListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderListCompleted);
            }
            this.InvokeAsync("salesOrderList", new object[] {
                        sessionId,
                        filters}, this.salesOrderListOperationCompleted, userState);
        }
        
        private void OnsalesOrderListCompleted(object arg) {
            if ((this.salesOrderListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderListCompleted(this, new salesOrderListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve order information
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public salesOrderEntity salesOrderInfo(string sessionId, string orderIncrementId) {
            object[] results = this.Invoke("salesOrderInfo", new object[] {
                        sessionId,
                        orderIncrementId});
            return ((salesOrderEntity)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderInfo(string sessionId, string orderIncrementId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderInfo", new object[] {
                        sessionId,
                        orderIncrementId}, callback, asyncState);
        }
        
        public salesOrderEntity EndsalesOrderInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((salesOrderEntity)(results[0]));
        }
        
        public void salesOrderInfoAsync(string sessionId, string orderIncrementId) {
            this.salesOrderInfoAsync(sessionId, orderIncrementId, null);
        }
        
        public void salesOrderInfoAsync(string sessionId, string orderIncrementId, object userState) {
            if ((this.salesOrderInfoOperationCompleted == null)) {
                this.salesOrderInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderInfoCompleted);
            }
            this.InvokeAsync("salesOrderInfo", new object[] {
                        sessionId,
                        orderIncrementId}, this.salesOrderInfoOperationCompleted, userState);
        }
        
        private void OnsalesOrderInfoCompleted(object arg) {
            if ((this.salesOrderInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderInfoCompleted(this, new salesOrderInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Add comment to order
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool salesOrderAddComment(string sessionId, string orderIncrementId, string status, string comment, string notify) {
            object[] results = this.Invoke("salesOrderAddComment", new object[] {
                        sessionId,
                        orderIncrementId,
                        status,
                        comment,
                        notify});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderAddComment(string sessionId, string orderIncrementId, string status, string comment, string notify, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderAddComment", new object[] {
                        sessionId,
                        orderIncrementId,
                        status,
                        comment,
                        notify}, callback, asyncState);
        }
        
        public bool EndsalesOrderAddComment(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void salesOrderAddCommentAsync(string sessionId, string orderIncrementId, string status, string comment, string notify) {
            this.salesOrderAddCommentAsync(sessionId, orderIncrementId, status, comment, notify, null);
        }
        
        public void salesOrderAddCommentAsync(string sessionId, string orderIncrementId, string status, string comment, string notify, object userState) {
            if ((this.salesOrderAddCommentOperationCompleted == null)) {
                this.salesOrderAddCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderAddCommentCompleted);
            }
            this.InvokeAsync("salesOrderAddComment", new object[] {
                        sessionId,
                        orderIncrementId,
                        status,
                        comment,
                        notify}, this.salesOrderAddCommentOperationCompleted, userState);
        }
        
        private void OnsalesOrderAddCommentCompleted(object arg) {
            if ((this.salesOrderAddCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderAddCommentCompleted(this, new salesOrderAddCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Hold order
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool salesOrderHold(string sessionId, string orderIncrementId) {
            object[] results = this.Invoke("salesOrderHold", new object[] {
                        sessionId,
                        orderIncrementId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderHold(string sessionId, string orderIncrementId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderHold", new object[] {
                        sessionId,
                        orderIncrementId}, callback, asyncState);
        }
        
        public bool EndsalesOrderHold(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void salesOrderHoldAsync(string sessionId, string orderIncrementId) {
            this.salesOrderHoldAsync(sessionId, orderIncrementId, null);
        }
        
        public void salesOrderHoldAsync(string sessionId, string orderIncrementId, object userState) {
            if ((this.salesOrderHoldOperationCompleted == null)) {
                this.salesOrderHoldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderHoldCompleted);
            }
            this.InvokeAsync("salesOrderHold", new object[] {
                        sessionId,
                        orderIncrementId}, this.salesOrderHoldOperationCompleted, userState);
        }
        
        private void OnsalesOrderHoldCompleted(object arg) {
            if ((this.salesOrderHoldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderHoldCompleted(this, new salesOrderHoldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Unhold order
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool salesOrderUnhold(string sessionId, string orderIncrementId) {
            object[] results = this.Invoke("salesOrderUnhold", new object[] {
                        sessionId,
                        orderIncrementId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderUnhold(string sessionId, string orderIncrementId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderUnhold", new object[] {
                        sessionId,
                        orderIncrementId}, callback, asyncState);
        }
        
        public bool EndsalesOrderUnhold(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void salesOrderUnholdAsync(string sessionId, string orderIncrementId) {
            this.salesOrderUnholdAsync(sessionId, orderIncrementId, null);
        }
        
        public void salesOrderUnholdAsync(string sessionId, string orderIncrementId, object userState) {
            if ((this.salesOrderUnholdOperationCompleted == null)) {
                this.salesOrderUnholdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderUnholdCompleted);
            }
            this.InvokeAsync("salesOrderUnhold", new object[] {
                        sessionId,
                        orderIncrementId}, this.salesOrderUnholdOperationCompleted, userState);
        }
        
        private void OnsalesOrderUnholdCompleted(object arg) {
            if ((this.salesOrderUnholdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderUnholdCompleted(this, new salesOrderUnholdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Cancel order
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool salesOrderCancel(string sessionId, string orderIncrementId) {
            object[] results = this.Invoke("salesOrderCancel", new object[] {
                        sessionId,
                        orderIncrementId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderCancel(string sessionId, string orderIncrementId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderCancel", new object[] {
                        sessionId,
                        orderIncrementId}, callback, asyncState);
        }
        
        public bool EndsalesOrderCancel(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void salesOrderCancelAsync(string sessionId, string orderIncrementId) {
            this.salesOrderCancelAsync(sessionId, orderIncrementId, null);
        }
        
        public void salesOrderCancelAsync(string sessionId, string orderIncrementId, object userState) {
            if ((this.salesOrderCancelOperationCompleted == null)) {
                this.salesOrderCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderCancelCompleted);
            }
            this.InvokeAsync("salesOrderCancel", new object[] {
                        sessionId,
                        orderIncrementId}, this.salesOrderCancelOperationCompleted, userState);
        }
        
        private void OnsalesOrderCancelCompleted(object arg) {
            if ((this.salesOrderCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderCancelCompleted(this, new salesOrderCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve list of shipments by filters
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public salesOrderShipmentEntity[] salesOrderShipmentList(string sessionId, filters filters) {
            object[] results = this.Invoke("salesOrderShipmentList", new object[] {
                        sessionId,
                        filters});
            return ((salesOrderShipmentEntity[])(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderShipmentList(string sessionId, filters filters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderShipmentList", new object[] {
                        sessionId,
                        filters}, callback, asyncState);
        }
        
        public salesOrderShipmentEntity[] EndsalesOrderShipmentList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((salesOrderShipmentEntity[])(results[0]));
        }
        
        public void salesOrderShipmentListAsync(string sessionId, filters filters) {
            this.salesOrderShipmentListAsync(sessionId, filters, null);
        }
        
        public void salesOrderShipmentListAsync(string sessionId, filters filters, object userState) {
            if ((this.salesOrderShipmentListOperationCompleted == null)) {
                this.salesOrderShipmentListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderShipmentListCompleted);
            }
            this.InvokeAsync("salesOrderShipmentList", new object[] {
                        sessionId,
                        filters}, this.salesOrderShipmentListOperationCompleted, userState);
        }
        
        private void OnsalesOrderShipmentListCompleted(object arg) {
            if ((this.salesOrderShipmentListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderShipmentListCompleted(this, new salesOrderShipmentListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve shipment information
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public salesOrderShipmentEntity salesOrderShipmentInfo(string sessionId, string shipmentIncrementId) {
            object[] results = this.Invoke("salesOrderShipmentInfo", new object[] {
                        sessionId,
                        shipmentIncrementId});
            return ((salesOrderShipmentEntity)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderShipmentInfo(string sessionId, string shipmentIncrementId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderShipmentInfo", new object[] {
                        sessionId,
                        shipmentIncrementId}, callback, asyncState);
        }
        
        public salesOrderShipmentEntity EndsalesOrderShipmentInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((salesOrderShipmentEntity)(results[0]));
        }
        
        public void salesOrderShipmentInfoAsync(string sessionId, string shipmentIncrementId) {
            this.salesOrderShipmentInfoAsync(sessionId, shipmentIncrementId, null);
        }
        
        public void salesOrderShipmentInfoAsync(string sessionId, string shipmentIncrementId, object userState) {
            if ((this.salesOrderShipmentInfoOperationCompleted == null)) {
                this.salesOrderShipmentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderShipmentInfoCompleted);
            }
            this.InvokeAsync("salesOrderShipmentInfo", new object[] {
                        sessionId,
                        shipmentIncrementId}, this.salesOrderShipmentInfoOperationCompleted, userState);
        }
        
        private void OnsalesOrderShipmentInfoCompleted(object arg) {
            if ((this.salesOrderShipmentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderShipmentInfoCompleted(this, new salesOrderShipmentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Create new shipment for order
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("shipmentIncrementId")]
        public string salesOrderShipmentCreate(string sessionId, string orderIncrementId, orderItemIdQty[] itemsQty, string comment, int email, int includeComment) {
            object[] results = this.Invoke("salesOrderShipmentCreate", new object[] {
                        sessionId,
                        orderIncrementId,
                        itemsQty,
                        comment,
                        email,
                        includeComment});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderShipmentCreate(string sessionId, string orderIncrementId, orderItemIdQty[] itemsQty, string comment, int email, int includeComment, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderShipmentCreate", new object[] {
                        sessionId,
                        orderIncrementId,
                        itemsQty,
                        comment,
                        email,
                        includeComment}, callback, asyncState);
        }
        
        public string EndsalesOrderShipmentCreate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void salesOrderShipmentCreateAsync(string sessionId, string orderIncrementId, orderItemIdQty[] itemsQty, string comment, int email, int includeComment) {
            this.salesOrderShipmentCreateAsync(sessionId, orderIncrementId, itemsQty, comment, email, includeComment, null);
        }
        
        public void salesOrderShipmentCreateAsync(string sessionId, string orderIncrementId, orderItemIdQty[] itemsQty, string comment, int email, int includeComment, object userState) {
            if ((this.salesOrderShipmentCreateOperationCompleted == null)) {
                this.salesOrderShipmentCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderShipmentCreateCompleted);
            }
            this.InvokeAsync("salesOrderShipmentCreate", new object[] {
                        sessionId,
                        orderIncrementId,
                        itemsQty,
                        comment,
                        email,
                        includeComment}, this.salesOrderShipmentCreateOperationCompleted, userState);
        }
        
        private void OnsalesOrderShipmentCreateCompleted(object arg) {
            if ((this.salesOrderShipmentCreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderShipmentCreateCompleted(this, new salesOrderShipmentCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Add new comment to shipment
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("shipmentIncrementId")]
        public bool salesOrderShipmentAddComment(string sessionId, string shipmentIncrementId, string comment, string email, string includeInEmail) {
            object[] results = this.Invoke("salesOrderShipmentAddComment", new object[] {
                        sessionId,
                        shipmentIncrementId,
                        comment,
                        email,
                        includeInEmail});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderShipmentAddComment(string sessionId, string shipmentIncrementId, string comment, string email, string includeInEmail, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderShipmentAddComment", new object[] {
                        sessionId,
                        shipmentIncrementId,
                        comment,
                        email,
                        includeInEmail}, callback, asyncState);
        }
        
        public bool EndsalesOrderShipmentAddComment(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void salesOrderShipmentAddCommentAsync(string sessionId, string shipmentIncrementId, string comment, string email, string includeInEmail) {
            this.salesOrderShipmentAddCommentAsync(sessionId, shipmentIncrementId, comment, email, includeInEmail, null);
        }
        
        public void salesOrderShipmentAddCommentAsync(string sessionId, string shipmentIncrementId, string comment, string email, string includeInEmail, object userState) {
            if ((this.salesOrderShipmentAddCommentOperationCompleted == null)) {
                this.salesOrderShipmentAddCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderShipmentAddCommentCompleted);
            }
            this.InvokeAsync("salesOrderShipmentAddComment", new object[] {
                        sessionId,
                        shipmentIncrementId,
                        comment,
                        email,
                        includeInEmail}, this.salesOrderShipmentAddCommentOperationCompleted, userState);
        }
        
        private void OnsalesOrderShipmentAddCommentCompleted(object arg) {
            if ((this.salesOrderShipmentAddCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderShipmentAddCommentCompleted(this, new salesOrderShipmentAddCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Add new tracking number
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public int salesOrderShipmentAddTrack(string sessionId, string shipmentIncrementId, string carrier, string title, string trackNumber) {
            object[] results = this.Invoke("salesOrderShipmentAddTrack", new object[] {
                        sessionId,
                        shipmentIncrementId,
                        carrier,
                        title,
                        trackNumber});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderShipmentAddTrack(string sessionId, string shipmentIncrementId, string carrier, string title, string trackNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderShipmentAddTrack", new object[] {
                        sessionId,
                        shipmentIncrementId,
                        carrier,
                        title,
                        trackNumber}, callback, asyncState);
        }
        
        public int EndsalesOrderShipmentAddTrack(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void salesOrderShipmentAddTrackAsync(string sessionId, string shipmentIncrementId, string carrier, string title, string trackNumber) {
            this.salesOrderShipmentAddTrackAsync(sessionId, shipmentIncrementId, carrier, title, trackNumber, null);
        }
        
        public void salesOrderShipmentAddTrackAsync(string sessionId, string shipmentIncrementId, string carrier, string title, string trackNumber, object userState) {
            if ((this.salesOrderShipmentAddTrackOperationCompleted == null)) {
                this.salesOrderShipmentAddTrackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderShipmentAddTrackCompleted);
            }
            this.InvokeAsync("salesOrderShipmentAddTrack", new object[] {
                        sessionId,
                        shipmentIncrementId,
                        carrier,
                        title,
                        trackNumber}, this.salesOrderShipmentAddTrackOperationCompleted, userState);
        }
        
        private void OnsalesOrderShipmentAddTrackCompleted(object arg) {
            if ((this.salesOrderShipmentAddTrackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderShipmentAddTrackCompleted(this, new salesOrderShipmentAddTrackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Send shipment info
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool salesOrderShipmentSendInfo(string sessionId, string shipmentIncrementId, string comment) {
            object[] results = this.Invoke("salesOrderShipmentSendInfo", new object[] {
                        sessionId,
                        shipmentIncrementId,
                        comment});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderShipmentSendInfo(string sessionId, string shipmentIncrementId, string comment, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderShipmentSendInfo", new object[] {
                        sessionId,
                        shipmentIncrementId,
                        comment}, callback, asyncState);
        }
        
        public bool EndsalesOrderShipmentSendInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void salesOrderShipmentSendInfoAsync(string sessionId, string shipmentIncrementId, string comment) {
            this.salesOrderShipmentSendInfoAsync(sessionId, shipmentIncrementId, comment, null);
        }
        
        public void salesOrderShipmentSendInfoAsync(string sessionId, string shipmentIncrementId, string comment, object userState) {
            if ((this.salesOrderShipmentSendInfoOperationCompleted == null)) {
                this.salesOrderShipmentSendInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderShipmentSendInfoCompleted);
            }
            this.InvokeAsync("salesOrderShipmentSendInfo", new object[] {
                        sessionId,
                        shipmentIncrementId,
                        comment}, this.salesOrderShipmentSendInfoOperationCompleted, userState);
        }
        
        private void OnsalesOrderShipmentSendInfoCompleted(object arg) {
            if ((this.salesOrderShipmentSendInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderShipmentSendInfoCompleted(this, new salesOrderShipmentSendInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Remove tracking number
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool salesOrderShipmentRemoveTrack(string sessionId, string shipmentIncrementId, string trackId) {
            object[] results = this.Invoke("salesOrderShipmentRemoveTrack", new object[] {
                        sessionId,
                        shipmentIncrementId,
                        trackId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderShipmentRemoveTrack(string sessionId, string shipmentIncrementId, string trackId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderShipmentRemoveTrack", new object[] {
                        sessionId,
                        shipmentIncrementId,
                        trackId}, callback, asyncState);
        }
        
        public bool EndsalesOrderShipmentRemoveTrack(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void salesOrderShipmentRemoveTrackAsync(string sessionId, string shipmentIncrementId, string trackId) {
            this.salesOrderShipmentRemoveTrackAsync(sessionId, shipmentIncrementId, trackId, null);
        }
        
        public void salesOrderShipmentRemoveTrackAsync(string sessionId, string shipmentIncrementId, string trackId, object userState) {
            if ((this.salesOrderShipmentRemoveTrackOperationCompleted == null)) {
                this.salesOrderShipmentRemoveTrackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderShipmentRemoveTrackCompleted);
            }
            this.InvokeAsync("salesOrderShipmentRemoveTrack", new object[] {
                        sessionId,
                        shipmentIncrementId,
                        trackId}, this.salesOrderShipmentRemoveTrackOperationCompleted, userState);
        }
        
        private void OnsalesOrderShipmentRemoveTrackCompleted(object arg) {
            if ((this.salesOrderShipmentRemoveTrackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderShipmentRemoveTrackCompleted(this, new salesOrderShipmentRemoveTrackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve list of allowed carriers for order
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public associativeEntity[] salesOrderShipmentGetCarriers(string sessionId, string orderIncrementId) {
            object[] results = this.Invoke("salesOrderShipmentGetCarriers", new object[] {
                        sessionId,
                        orderIncrementId});
            return ((associativeEntity[])(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderShipmentGetCarriers(string sessionId, string orderIncrementId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderShipmentGetCarriers", new object[] {
                        sessionId,
                        orderIncrementId}, callback, asyncState);
        }
        
        public associativeEntity[] EndsalesOrderShipmentGetCarriers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((associativeEntity[])(results[0]));
        }
        
        public void salesOrderShipmentGetCarriersAsync(string sessionId, string orderIncrementId) {
            this.salesOrderShipmentGetCarriersAsync(sessionId, orderIncrementId, null);
        }
        
        public void salesOrderShipmentGetCarriersAsync(string sessionId, string orderIncrementId, object userState) {
            if ((this.salesOrderShipmentGetCarriersOperationCompleted == null)) {
                this.salesOrderShipmentGetCarriersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderShipmentGetCarriersCompleted);
            }
            this.InvokeAsync("salesOrderShipmentGetCarriers", new object[] {
                        sessionId,
                        orderIncrementId}, this.salesOrderShipmentGetCarriersOperationCompleted, userState);
        }
        
        private void OnsalesOrderShipmentGetCarriersCompleted(object arg) {
            if ((this.salesOrderShipmentGetCarriersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderShipmentGetCarriersCompleted(this, new salesOrderShipmentGetCarriersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve list of invoices by filters
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public salesOrderInvoiceEntity[] salesOrderInvoiceList(string sessionId, filters filters) {
            object[] results = this.Invoke("salesOrderInvoiceList", new object[] {
                        sessionId,
                        filters});
            return ((salesOrderInvoiceEntity[])(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderInvoiceList(string sessionId, filters filters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderInvoiceList", new object[] {
                        sessionId,
                        filters}, callback, asyncState);
        }
        
        public salesOrderInvoiceEntity[] EndsalesOrderInvoiceList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((salesOrderInvoiceEntity[])(results[0]));
        }
        
        public void salesOrderInvoiceListAsync(string sessionId, filters filters) {
            this.salesOrderInvoiceListAsync(sessionId, filters, null);
        }
        
        public void salesOrderInvoiceListAsync(string sessionId, filters filters, object userState) {
            if ((this.salesOrderInvoiceListOperationCompleted == null)) {
                this.salesOrderInvoiceListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderInvoiceListCompleted);
            }
            this.InvokeAsync("salesOrderInvoiceList", new object[] {
                        sessionId,
                        filters}, this.salesOrderInvoiceListOperationCompleted, userState);
        }
        
        private void OnsalesOrderInvoiceListCompleted(object arg) {
            if ((this.salesOrderInvoiceListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderInvoiceListCompleted(this, new salesOrderInvoiceListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve invoice information
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public salesOrderInvoiceEntity salesOrderInvoiceInfo(string sessionId, string invoiceIncrementId) {
            object[] results = this.Invoke("salesOrderInvoiceInfo", new object[] {
                        sessionId,
                        invoiceIncrementId});
            return ((salesOrderInvoiceEntity)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderInvoiceInfo(string sessionId, string invoiceIncrementId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderInvoiceInfo", new object[] {
                        sessionId,
                        invoiceIncrementId}, callback, asyncState);
        }
        
        public salesOrderInvoiceEntity EndsalesOrderInvoiceInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((salesOrderInvoiceEntity)(results[0]));
        }
        
        public void salesOrderInvoiceInfoAsync(string sessionId, string invoiceIncrementId) {
            this.salesOrderInvoiceInfoAsync(sessionId, invoiceIncrementId, null);
        }
        
        public void salesOrderInvoiceInfoAsync(string sessionId, string invoiceIncrementId, object userState) {
            if ((this.salesOrderInvoiceInfoOperationCompleted == null)) {
                this.salesOrderInvoiceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderInvoiceInfoCompleted);
            }
            this.InvokeAsync("salesOrderInvoiceInfo", new object[] {
                        sessionId,
                        invoiceIncrementId}, this.salesOrderInvoiceInfoOperationCompleted, userState);
        }
        
        private void OnsalesOrderInvoiceInfoCompleted(object arg) {
            if ((this.salesOrderInvoiceInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderInvoiceInfoCompleted(this, new salesOrderInvoiceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Create new invoice for order
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public string salesOrderInvoiceCreate(string sessionId, string invoiceIncrementId, orderItemIdQty[] itemsQty, string comment, string email, string includeComment) {
            object[] results = this.Invoke("salesOrderInvoiceCreate", new object[] {
                        sessionId,
                        invoiceIncrementId,
                        itemsQty,
                        comment,
                        email,
                        includeComment});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderInvoiceCreate(string sessionId, string invoiceIncrementId, orderItemIdQty[] itemsQty, string comment, string email, string includeComment, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderInvoiceCreate", new object[] {
                        sessionId,
                        invoiceIncrementId,
                        itemsQty,
                        comment,
                        email,
                        includeComment}, callback, asyncState);
        }
        
        public string EndsalesOrderInvoiceCreate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void salesOrderInvoiceCreateAsync(string sessionId, string invoiceIncrementId, orderItemIdQty[] itemsQty, string comment, string email, string includeComment) {
            this.salesOrderInvoiceCreateAsync(sessionId, invoiceIncrementId, itemsQty, comment, email, includeComment, null);
        }
        
        public void salesOrderInvoiceCreateAsync(string sessionId, string invoiceIncrementId, orderItemIdQty[] itemsQty, string comment, string email, string includeComment, object userState) {
            if ((this.salesOrderInvoiceCreateOperationCompleted == null)) {
                this.salesOrderInvoiceCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderInvoiceCreateCompleted);
            }
            this.InvokeAsync("salesOrderInvoiceCreate", new object[] {
                        sessionId,
                        invoiceIncrementId,
                        itemsQty,
                        comment,
                        email,
                        includeComment}, this.salesOrderInvoiceCreateOperationCompleted, userState);
        }
        
        private void OnsalesOrderInvoiceCreateCompleted(object arg) {
            if ((this.salesOrderInvoiceCreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderInvoiceCreateCompleted(this, new salesOrderInvoiceCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Add new comment to shipment
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool salesOrderInvoiceAddComment(string sessionId, string invoiceIncrementId, string comment, string email, string includeComment) {
            object[] results = this.Invoke("salesOrderInvoiceAddComment", new object[] {
                        sessionId,
                        invoiceIncrementId,
                        comment,
                        email,
                        includeComment});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderInvoiceAddComment(string sessionId, string invoiceIncrementId, string comment, string email, string includeComment, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderInvoiceAddComment", new object[] {
                        sessionId,
                        invoiceIncrementId,
                        comment,
                        email,
                        includeComment}, callback, asyncState);
        }
        
        public bool EndsalesOrderInvoiceAddComment(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void salesOrderInvoiceAddCommentAsync(string sessionId, string invoiceIncrementId, string comment, string email, string includeComment) {
            this.salesOrderInvoiceAddCommentAsync(sessionId, invoiceIncrementId, comment, email, includeComment, null);
        }
        
        public void salesOrderInvoiceAddCommentAsync(string sessionId, string invoiceIncrementId, string comment, string email, string includeComment, object userState) {
            if ((this.salesOrderInvoiceAddCommentOperationCompleted == null)) {
                this.salesOrderInvoiceAddCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderInvoiceAddCommentCompleted);
            }
            this.InvokeAsync("salesOrderInvoiceAddComment", new object[] {
                        sessionId,
                        invoiceIncrementId,
                        comment,
                        email,
                        includeComment}, this.salesOrderInvoiceAddCommentOperationCompleted, userState);
        }
        
        private void OnsalesOrderInvoiceAddCommentCompleted(object arg) {
            if ((this.salesOrderInvoiceAddCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderInvoiceAddCommentCompleted(this, new salesOrderInvoiceAddCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Capture invoice
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool salesOrderInvoiceCapture(string sessionId, string invoiceIncrementId) {
            object[] results = this.Invoke("salesOrderInvoiceCapture", new object[] {
                        sessionId,
                        invoiceIncrementId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderInvoiceCapture(string sessionId, string invoiceIncrementId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderInvoiceCapture", new object[] {
                        sessionId,
                        invoiceIncrementId}, callback, asyncState);
        }
        
        public bool EndsalesOrderInvoiceCapture(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void salesOrderInvoiceCaptureAsync(string sessionId, string invoiceIncrementId) {
            this.salesOrderInvoiceCaptureAsync(sessionId, invoiceIncrementId, null);
        }
        
        public void salesOrderInvoiceCaptureAsync(string sessionId, string invoiceIncrementId, object userState) {
            if ((this.salesOrderInvoiceCaptureOperationCompleted == null)) {
                this.salesOrderInvoiceCaptureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderInvoiceCaptureCompleted);
            }
            this.InvokeAsync("salesOrderInvoiceCapture", new object[] {
                        sessionId,
                        invoiceIncrementId}, this.salesOrderInvoiceCaptureOperationCompleted, userState);
        }
        
        private void OnsalesOrderInvoiceCaptureCompleted(object arg) {
            if ((this.salesOrderInvoiceCaptureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderInvoiceCaptureCompleted(this, new salesOrderInvoiceCaptureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Void invoice
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool salesOrderInvoiceVoid(string sessionId, string invoiceIncrementId) {
            object[] results = this.Invoke("salesOrderInvoiceVoid", new object[] {
                        sessionId,
                        invoiceIncrementId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderInvoiceVoid(string sessionId, string invoiceIncrementId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderInvoiceVoid", new object[] {
                        sessionId,
                        invoiceIncrementId}, callback, asyncState);
        }
        
        public bool EndsalesOrderInvoiceVoid(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void salesOrderInvoiceVoidAsync(string sessionId, string invoiceIncrementId) {
            this.salesOrderInvoiceVoidAsync(sessionId, invoiceIncrementId, null);
        }
        
        public void salesOrderInvoiceVoidAsync(string sessionId, string invoiceIncrementId, object userState) {
            if ((this.salesOrderInvoiceVoidOperationCompleted == null)) {
                this.salesOrderInvoiceVoidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderInvoiceVoidCompleted);
            }
            this.InvokeAsync("salesOrderInvoiceVoid", new object[] {
                        sessionId,
                        invoiceIncrementId}, this.salesOrderInvoiceVoidOperationCompleted, userState);
        }
        
        private void OnsalesOrderInvoiceVoidCompleted(object arg) {
            if ((this.salesOrderInvoiceVoidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderInvoiceVoidCompleted(this, new salesOrderInvoiceVoidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Cancel invoice
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool salesOrderInvoiceCancel(string sessionId, string invoiceIncrementId) {
            object[] results = this.Invoke("salesOrderInvoiceCancel", new object[] {
                        sessionId,
                        invoiceIncrementId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderInvoiceCancel(string sessionId, string invoiceIncrementId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderInvoiceCancel", new object[] {
                        sessionId,
                        invoiceIncrementId}, callback, asyncState);
        }
        
        public bool EndsalesOrderInvoiceCancel(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void salesOrderInvoiceCancelAsync(string sessionId, string invoiceIncrementId) {
            this.salesOrderInvoiceCancelAsync(sessionId, invoiceIncrementId, null);
        }
        
        public void salesOrderInvoiceCancelAsync(string sessionId, string invoiceIncrementId, object userState) {
            if ((this.salesOrderInvoiceCancelOperationCompleted == null)) {
                this.salesOrderInvoiceCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderInvoiceCancelCompleted);
            }
            this.InvokeAsync("salesOrderInvoiceCancel", new object[] {
                        sessionId,
                        invoiceIncrementId}, this.salesOrderInvoiceCancelOperationCompleted, userState);
        }
        
        private void OnsalesOrderInvoiceCancelCompleted(object arg) {
            if ((this.salesOrderInvoiceCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderInvoiceCancelCompleted(this, new salesOrderInvoiceCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve list of creditmemos by filters
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public salesOrderCreditmemoEntity[] salesOrderCreditmemoList(string sessionId, filters filters) {
            object[] results = this.Invoke("salesOrderCreditmemoList", new object[] {
                        sessionId,
                        filters});
            return ((salesOrderCreditmemoEntity[])(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderCreditmemoList(string sessionId, filters filters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderCreditmemoList", new object[] {
                        sessionId,
                        filters}, callback, asyncState);
        }
        
        public salesOrderCreditmemoEntity[] EndsalesOrderCreditmemoList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((salesOrderCreditmemoEntity[])(results[0]));
        }
        
        public void salesOrderCreditmemoListAsync(string sessionId, filters filters) {
            this.salesOrderCreditmemoListAsync(sessionId, filters, null);
        }
        
        public void salesOrderCreditmemoListAsync(string sessionId, filters filters, object userState) {
            if ((this.salesOrderCreditmemoListOperationCompleted == null)) {
                this.salesOrderCreditmemoListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderCreditmemoListCompleted);
            }
            this.InvokeAsync("salesOrderCreditmemoList", new object[] {
                        sessionId,
                        filters}, this.salesOrderCreditmemoListOperationCompleted, userState);
        }
        
        private void OnsalesOrderCreditmemoListCompleted(object arg) {
            if ((this.salesOrderCreditmemoListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderCreditmemoListCompleted(this, new salesOrderCreditmemoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve creditmemo information
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public salesOrderCreditmemoEntity salesOrderCreditmemoInfo(string sessionId, string creditmemoIncrementId) {
            object[] results = this.Invoke("salesOrderCreditmemoInfo", new object[] {
                        sessionId,
                        creditmemoIncrementId});
            return ((salesOrderCreditmemoEntity)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderCreditmemoInfo(string sessionId, string creditmemoIncrementId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderCreditmemoInfo", new object[] {
                        sessionId,
                        creditmemoIncrementId}, callback, asyncState);
        }
        
        public salesOrderCreditmemoEntity EndsalesOrderCreditmemoInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((salesOrderCreditmemoEntity)(results[0]));
        }
        
        public void salesOrderCreditmemoInfoAsync(string sessionId, string creditmemoIncrementId) {
            this.salesOrderCreditmemoInfoAsync(sessionId, creditmemoIncrementId, null);
        }
        
        public void salesOrderCreditmemoInfoAsync(string sessionId, string creditmemoIncrementId, object userState) {
            if ((this.salesOrderCreditmemoInfoOperationCompleted == null)) {
                this.salesOrderCreditmemoInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderCreditmemoInfoCompleted);
            }
            this.InvokeAsync("salesOrderCreditmemoInfo", new object[] {
                        sessionId,
                        creditmemoIncrementId}, this.salesOrderCreditmemoInfoOperationCompleted, userState);
        }
        
        private void OnsalesOrderCreditmemoInfoCompleted(object arg) {
            if ((this.salesOrderCreditmemoInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderCreditmemoInfoCompleted(this, new salesOrderCreditmemoInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Create new creditmemo for order
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public string salesOrderCreditmemoCreate(string sessionId, string orderIncrementId, salesOrderCreditmemoData creditmemoData, string comment, int notifyCustomer, int includeComment, string refundToStoreCreditAmount) {
            object[] results = this.Invoke("salesOrderCreditmemoCreate", new object[] {
                        sessionId,
                        orderIncrementId,
                        creditmemoData,
                        comment,
                        notifyCustomer,
                        includeComment,
                        refundToStoreCreditAmount});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderCreditmemoCreate(string sessionId, string orderIncrementId, salesOrderCreditmemoData creditmemoData, string comment, int notifyCustomer, int includeComment, string refundToStoreCreditAmount, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderCreditmemoCreate", new object[] {
                        sessionId,
                        orderIncrementId,
                        creditmemoData,
                        comment,
                        notifyCustomer,
                        includeComment,
                        refundToStoreCreditAmount}, callback, asyncState);
        }
        
        public string EndsalesOrderCreditmemoCreate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void salesOrderCreditmemoCreateAsync(string sessionId, string orderIncrementId, salesOrderCreditmemoData creditmemoData, string comment, int notifyCustomer, int includeComment, string refundToStoreCreditAmount) {
            this.salesOrderCreditmemoCreateAsync(sessionId, orderIncrementId, creditmemoData, comment, notifyCustomer, includeComment, refundToStoreCreditAmount, null);
        }
        
        public void salesOrderCreditmemoCreateAsync(string sessionId, string orderIncrementId, salesOrderCreditmemoData creditmemoData, string comment, int notifyCustomer, int includeComment, string refundToStoreCreditAmount, object userState) {
            if ((this.salesOrderCreditmemoCreateOperationCompleted == null)) {
                this.salesOrderCreditmemoCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderCreditmemoCreateCompleted);
            }
            this.InvokeAsync("salesOrderCreditmemoCreate", new object[] {
                        sessionId,
                        orderIncrementId,
                        creditmemoData,
                        comment,
                        notifyCustomer,
                        includeComment,
                        refundToStoreCreditAmount}, this.salesOrderCreditmemoCreateOperationCompleted, userState);
        }
        
        private void OnsalesOrderCreditmemoCreateCompleted(object arg) {
            if ((this.salesOrderCreditmemoCreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderCreditmemoCreateCompleted(this, new salesOrderCreditmemoCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Add new comment to shipment
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool salesOrderCreditmemoAddComment(string sessionId, string creditmemoIncrementId, string comment, int notifyCustomer, int includeComment) {
            object[] results = this.Invoke("salesOrderCreditmemoAddComment", new object[] {
                        sessionId,
                        creditmemoIncrementId,
                        comment,
                        notifyCustomer,
                        includeComment});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderCreditmemoAddComment(string sessionId, string creditmemoIncrementId, string comment, int notifyCustomer, int includeComment, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderCreditmemoAddComment", new object[] {
                        sessionId,
                        creditmemoIncrementId,
                        comment,
                        notifyCustomer,
                        includeComment}, callback, asyncState);
        }
        
        public bool EndsalesOrderCreditmemoAddComment(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void salesOrderCreditmemoAddCommentAsync(string sessionId, string creditmemoIncrementId, string comment, int notifyCustomer, int includeComment) {
            this.salesOrderCreditmemoAddCommentAsync(sessionId, creditmemoIncrementId, comment, notifyCustomer, includeComment, null);
        }
        
        public void salesOrderCreditmemoAddCommentAsync(string sessionId, string creditmemoIncrementId, string comment, int notifyCustomer, int includeComment, object userState) {
            if ((this.salesOrderCreditmemoAddCommentOperationCompleted == null)) {
                this.salesOrderCreditmemoAddCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderCreditmemoAddCommentCompleted);
            }
            this.InvokeAsync("salesOrderCreditmemoAddComment", new object[] {
                        sessionId,
                        creditmemoIncrementId,
                        comment,
                        notifyCustomer,
                        includeComment}, this.salesOrderCreditmemoAddCommentOperationCompleted, userState);
        }
        
        private void OnsalesOrderCreditmemoAddCommentCompleted(object arg) {
            if ((this.salesOrderCreditmemoAddCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderCreditmemoAddCommentCompleted(this, new salesOrderCreditmemoAddCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Cancel creditmemo
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool salesOrderCreditmemoCancel(string sessionId, string creditmemoIncrementId) {
            object[] results = this.Invoke("salesOrderCreditmemoCancel", new object[] {
                        sessionId,
                        creditmemoIncrementId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginsalesOrderCreditmemoCancel(string sessionId, string creditmemoIncrementId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("salesOrderCreditmemoCancel", new object[] {
                        sessionId,
                        creditmemoIncrementId}, callback, asyncState);
        }
        
        public bool EndsalesOrderCreditmemoCancel(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void salesOrderCreditmemoCancelAsync(string sessionId, string creditmemoIncrementId) {
            this.salesOrderCreditmemoCancelAsync(sessionId, creditmemoIncrementId, null);
        }
        
        public void salesOrderCreditmemoCancelAsync(string sessionId, string creditmemoIncrementId, object userState) {
            if ((this.salesOrderCreditmemoCancelOperationCompleted == null)) {
                this.salesOrderCreditmemoCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsalesOrderCreditmemoCancelCompleted);
            }
            this.InvokeAsync("salesOrderCreditmemoCancel", new object[] {
                        sessionId,
                        creditmemoIncrementId}, this.salesOrderCreditmemoCancelOperationCompleted, userState);
        }
        
        private void OnsalesOrderCreditmemoCancelCompleted(object arg) {
            if ((this.salesOrderCreditmemoCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.salesOrderCreditmemoCancelCompleted(this, new salesOrderCreditmemoCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve stock data by product ids
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogInventoryStockItemEntity[] catalogInventoryStockItemList(string sessionId, string[] products) {
            object[] results = this.Invoke("catalogInventoryStockItemList", new object[] {
                        sessionId,
                        products});
            return ((catalogInventoryStockItemEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogInventoryStockItemList(string sessionId, string[] products, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogInventoryStockItemList", new object[] {
                        sessionId,
                        products}, callback, asyncState);
        }
        
        public catalogInventoryStockItemEntity[] EndcatalogInventoryStockItemList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogInventoryStockItemEntity[])(results[0]));
        }
        
        public void catalogInventoryStockItemListAsync(string sessionId, string[] products) {
            this.catalogInventoryStockItemListAsync(sessionId, products, null);
        }
        
        public void catalogInventoryStockItemListAsync(string sessionId, string[] products, object userState) {
            if ((this.catalogInventoryStockItemListOperationCompleted == null)) {
                this.catalogInventoryStockItemListOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogInventoryStockItemListCompleted);
            }
            this.InvokeAsync("catalogInventoryStockItemList", new object[] {
                        sessionId,
                        products}, this.catalogInventoryStockItemListOperationCompleted, userState);
        }
        
        private void OncatalogInventoryStockItemListCompleted(object arg) {
            if ((this.catalogInventoryStockItemListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogInventoryStockItemListCompleted(this, new catalogInventoryStockItemListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Update product stock data
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public int catalogInventoryStockItemUpdate(string sessionId, string product, catalogInventoryStockItemUpdateEntity data) {
            object[] results = this.Invoke("catalogInventoryStockItemUpdate", new object[] {
                        sessionId,
                        product,
                        data});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogInventoryStockItemUpdate(string sessionId, string product, catalogInventoryStockItemUpdateEntity data, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogInventoryStockItemUpdate", new object[] {
                        sessionId,
                        product,
                        data}, callback, asyncState);
        }
        
        public int EndcatalogInventoryStockItemUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void catalogInventoryStockItemUpdateAsync(string sessionId, string product, catalogInventoryStockItemUpdateEntity data) {
            this.catalogInventoryStockItemUpdateAsync(sessionId, product, data, null);
        }
        
        public void catalogInventoryStockItemUpdateAsync(string sessionId, string product, catalogInventoryStockItemUpdateEntity data, object userState) {
            if ((this.catalogInventoryStockItemUpdateOperationCompleted == null)) {
                this.catalogInventoryStockItemUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogInventoryStockItemUpdateCompleted);
            }
            this.InvokeAsync("catalogInventoryStockItemUpdate", new object[] {
                        sessionId,
                        product,
                        data}, this.catalogInventoryStockItemUpdateOperationCompleted, userState);
        }
        
        private void OncatalogInventoryStockItemUpdateCompleted(object arg) {
            if ((this.catalogInventoryStockItemUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogInventoryStockItemUpdateCompleted(this, new catalogInventoryStockItemUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Multi stock item update
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogInventoryStockItemMultiUpdate(string sessionId, string[] productIds, catalogInventoryStockItemUpdateEntity[] productData) {
            object[] results = this.Invoke("catalogInventoryStockItemMultiUpdate", new object[] {
                        sessionId,
                        productIds,
                        productData});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogInventoryStockItemMultiUpdate(string sessionId, string[] productIds, catalogInventoryStockItemUpdateEntity[] productData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogInventoryStockItemMultiUpdate", new object[] {
                        sessionId,
                        productIds,
                        productData}, callback, asyncState);
        }
        
        public bool EndcatalogInventoryStockItemMultiUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogInventoryStockItemMultiUpdateAsync(string sessionId, string[] productIds, catalogInventoryStockItemUpdateEntity[] productData) {
            this.catalogInventoryStockItemMultiUpdateAsync(sessionId, productIds, productData, null);
        }
        
        public void catalogInventoryStockItemMultiUpdateAsync(string sessionId, string[] productIds, catalogInventoryStockItemUpdateEntity[] productData, object userState) {
            if ((this.catalogInventoryStockItemMultiUpdateOperationCompleted == null)) {
                this.catalogInventoryStockItemMultiUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogInventoryStockItemMultiUpdateCompleted);
            }
            this.InvokeAsync("catalogInventoryStockItemMultiUpdate", new object[] {
                        sessionId,
                        productIds,
                        productData}, this.catalogInventoryStockItemMultiUpdateOperationCompleted, userState);
        }
        
        private void OncatalogInventoryStockItemMultiUpdateCompleted(object arg) {
            if ((this.catalogInventoryStockItemMultiUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogInventoryStockItemMultiUpdateCompleted(this, new catalogInventoryStockItemMultiUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Create shopping cart
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("quoteId")]
        public int shoppingCartCreate(string sessionId, string storeId) {
            object[] results = this.Invoke("shoppingCartCreate", new object[] {
                        sessionId,
                        storeId});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginshoppingCartCreate(string sessionId, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("shoppingCartCreate", new object[] {
                        sessionId,
                        storeId}, callback, asyncState);
        }
        
        public int EndshoppingCartCreate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void shoppingCartCreateAsync(string sessionId, string storeId) {
            this.shoppingCartCreateAsync(sessionId, storeId, null);
        }
        
        public void shoppingCartCreateAsync(string sessionId, string storeId, object userState) {
            if ((this.shoppingCartCreateOperationCompleted == null)) {
                this.shoppingCartCreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshoppingCartCreateCompleted);
            }
            this.InvokeAsync("shoppingCartCreate", new object[] {
                        sessionId,
                        storeId}, this.shoppingCartCreateOperationCompleted, userState);
        }
        
        private void OnshoppingCartCreateCompleted(object arg) {
            if ((this.shoppingCartCreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.shoppingCartCreateCompleted(this, new shoppingCartCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve information about shopping cart
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public shoppingCartInfoEntity shoppingCartInfo(string sessionId, int quoteId, string storeId) {
            object[] results = this.Invoke("shoppingCartInfo", new object[] {
                        sessionId,
                        quoteId,
                        storeId});
            return ((shoppingCartInfoEntity)(results[0]));
        }
        
        public System.IAsyncResult BeginshoppingCartInfo(string sessionId, int quoteId, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("shoppingCartInfo", new object[] {
                        sessionId,
                        quoteId,
                        storeId}, callback, asyncState);
        }
        
        public shoppingCartInfoEntity EndshoppingCartInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((shoppingCartInfoEntity)(results[0]));
        }
        
        public void shoppingCartInfoAsync(string sessionId, int quoteId, string storeId) {
            this.shoppingCartInfoAsync(sessionId, quoteId, storeId, null);
        }
        
        public void shoppingCartInfoAsync(string sessionId, int quoteId, string storeId, object userState) {
            if ((this.shoppingCartInfoOperationCompleted == null)) {
                this.shoppingCartInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshoppingCartInfoCompleted);
            }
            this.InvokeAsync("shoppingCartInfo", new object[] {
                        sessionId,
                        quoteId,
                        storeId}, this.shoppingCartInfoOperationCompleted, userState);
        }
        
        private void OnshoppingCartInfoCompleted(object arg) {
            if ((this.shoppingCartInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.shoppingCartInfoCompleted(this, new shoppingCartInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get total prices for shopping cart
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public shoppingCartTotalsEntity[] shoppingCartTotals(string sessionId, int quoteId, string storeId) {
            object[] results = this.Invoke("shoppingCartTotals", new object[] {
                        sessionId,
                        quoteId,
                        storeId});
            return ((shoppingCartTotalsEntity[])(results[0]));
        }
        
        public System.IAsyncResult BeginshoppingCartTotals(string sessionId, int quoteId, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("shoppingCartTotals", new object[] {
                        sessionId,
                        quoteId,
                        storeId}, callback, asyncState);
        }
        
        public shoppingCartTotalsEntity[] EndshoppingCartTotals(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((shoppingCartTotalsEntity[])(results[0]));
        }
        
        public void shoppingCartTotalsAsync(string sessionId, int quoteId, string storeId) {
            this.shoppingCartTotalsAsync(sessionId, quoteId, storeId, null);
        }
        
        public void shoppingCartTotalsAsync(string sessionId, int quoteId, string storeId, object userState) {
            if ((this.shoppingCartTotalsOperationCompleted == null)) {
                this.shoppingCartTotalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshoppingCartTotalsCompleted);
            }
            this.InvokeAsync("shoppingCartTotals", new object[] {
                        sessionId,
                        quoteId,
                        storeId}, this.shoppingCartTotalsOperationCompleted, userState);
        }
        
        private void OnshoppingCartTotalsCompleted(object arg) {
            if ((this.shoppingCartTotalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.shoppingCartTotalsCompleted(this, new shoppingCartTotalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Create an order from shopping cart
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public string shoppingCartOrder(string sessionId, int quoteId, string storeId, string[] licenses) {
            object[] results = this.Invoke("shoppingCartOrder", new object[] {
                        sessionId,
                        quoteId,
                        storeId,
                        licenses});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginshoppingCartOrder(string sessionId, int quoteId, string storeId, string[] licenses, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("shoppingCartOrder", new object[] {
                        sessionId,
                        quoteId,
                        storeId,
                        licenses}, callback, asyncState);
        }
        
        public string EndshoppingCartOrder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void shoppingCartOrderAsync(string sessionId, int quoteId, string storeId, string[] licenses) {
            this.shoppingCartOrderAsync(sessionId, quoteId, storeId, licenses, null);
        }
        
        public void shoppingCartOrderAsync(string sessionId, int quoteId, string storeId, string[] licenses, object userState) {
            if ((this.shoppingCartOrderOperationCompleted == null)) {
                this.shoppingCartOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshoppingCartOrderCompleted);
            }
            this.InvokeAsync("shoppingCartOrder", new object[] {
                        sessionId,
                        quoteId,
                        storeId,
                        licenses}, this.shoppingCartOrderOperationCompleted, userState);
        }
        
        private void OnshoppingCartOrderCompleted(object arg) {
            if ((this.shoppingCartOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.shoppingCartOrderCompleted(this, new shoppingCartOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get terms and conditions
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public shoppingCartLicenseEntity[] shoppingCartLicense(string sessionId, int quoteId, string storeId) {
            object[] results = this.Invoke("shoppingCartLicense", new object[] {
                        sessionId,
                        quoteId,
                        storeId});
            return ((shoppingCartLicenseEntity[])(results[0]));
        }
        
        public System.IAsyncResult BeginshoppingCartLicense(string sessionId, int quoteId, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("shoppingCartLicense", new object[] {
                        sessionId,
                        quoteId,
                        storeId}, callback, asyncState);
        }
        
        public shoppingCartLicenseEntity[] EndshoppingCartLicense(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((shoppingCartLicenseEntity[])(results[0]));
        }
        
        public void shoppingCartLicenseAsync(string sessionId, int quoteId, string storeId) {
            this.shoppingCartLicenseAsync(sessionId, quoteId, storeId, null);
        }
        
        public void shoppingCartLicenseAsync(string sessionId, int quoteId, string storeId, object userState) {
            if ((this.shoppingCartLicenseOperationCompleted == null)) {
                this.shoppingCartLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshoppingCartLicenseCompleted);
            }
            this.InvokeAsync("shoppingCartLicense", new object[] {
                        sessionId,
                        quoteId,
                        storeId}, this.shoppingCartLicenseOperationCompleted, userState);
        }
        
        private void OnshoppingCartLicenseCompleted(object arg) {
            if ((this.shoppingCartLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.shoppingCartLicenseCompleted(this, new shoppingCartLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Add product(s) to shopping cart
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool shoppingCartProductAdd(string sessionId, int quoteId, shoppingCartProductEntity[] products, string storeId) {
            object[] results = this.Invoke("shoppingCartProductAdd", new object[] {
                        sessionId,
                        quoteId,
                        products,
                        storeId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginshoppingCartProductAdd(string sessionId, int quoteId, shoppingCartProductEntity[] products, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("shoppingCartProductAdd", new object[] {
                        sessionId,
                        quoteId,
                        products,
                        storeId}, callback, asyncState);
        }
        
        public bool EndshoppingCartProductAdd(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void shoppingCartProductAddAsync(string sessionId, int quoteId, shoppingCartProductEntity[] products, string storeId) {
            this.shoppingCartProductAddAsync(sessionId, quoteId, products, storeId, null);
        }
        
        public void shoppingCartProductAddAsync(string sessionId, int quoteId, shoppingCartProductEntity[] products, string storeId, object userState) {
            if ((this.shoppingCartProductAddOperationCompleted == null)) {
                this.shoppingCartProductAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshoppingCartProductAddCompleted);
            }
            this.InvokeAsync("shoppingCartProductAdd", new object[] {
                        sessionId,
                        quoteId,
                        products,
                        storeId}, this.shoppingCartProductAddOperationCompleted, userState);
        }
        
        private void OnshoppingCartProductAddCompleted(object arg) {
            if ((this.shoppingCartProductAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.shoppingCartProductAddCompleted(this, new shoppingCartProductAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Update product(s) quantities in shopping cart
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool shoppingCartProductUpdate(string sessionId, int quoteId, shoppingCartProductEntity[] products, string storeId) {
            object[] results = this.Invoke("shoppingCartProductUpdate", new object[] {
                        sessionId,
                        quoteId,
                        products,
                        storeId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginshoppingCartProductUpdate(string sessionId, int quoteId, shoppingCartProductEntity[] products, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("shoppingCartProductUpdate", new object[] {
                        sessionId,
                        quoteId,
                        products,
                        storeId}, callback, asyncState);
        }
        
        public bool EndshoppingCartProductUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void shoppingCartProductUpdateAsync(string sessionId, int quoteId, shoppingCartProductEntity[] products, string storeId) {
            this.shoppingCartProductUpdateAsync(sessionId, quoteId, products, storeId, null);
        }
        
        public void shoppingCartProductUpdateAsync(string sessionId, int quoteId, shoppingCartProductEntity[] products, string storeId, object userState) {
            if ((this.shoppingCartProductUpdateOperationCompleted == null)) {
                this.shoppingCartProductUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshoppingCartProductUpdateCompleted);
            }
            this.InvokeAsync("shoppingCartProductUpdate", new object[] {
                        sessionId,
                        quoteId,
                        products,
                        storeId}, this.shoppingCartProductUpdateOperationCompleted, userState);
        }
        
        private void OnshoppingCartProductUpdateCompleted(object arg) {
            if ((this.shoppingCartProductUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.shoppingCartProductUpdateCompleted(this, new shoppingCartProductUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Remove product(s) from shopping cart
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool shoppingCartProductRemove(string sessionId, int quoteId, shoppingCartProductEntity[] products, string storeId) {
            object[] results = this.Invoke("shoppingCartProductRemove", new object[] {
                        sessionId,
                        quoteId,
                        products,
                        storeId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginshoppingCartProductRemove(string sessionId, int quoteId, shoppingCartProductEntity[] products, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("shoppingCartProductRemove", new object[] {
                        sessionId,
                        quoteId,
                        products,
                        storeId}, callback, asyncState);
        }
        
        public bool EndshoppingCartProductRemove(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void shoppingCartProductRemoveAsync(string sessionId, int quoteId, shoppingCartProductEntity[] products, string storeId) {
            this.shoppingCartProductRemoveAsync(sessionId, quoteId, products, storeId, null);
        }
        
        public void shoppingCartProductRemoveAsync(string sessionId, int quoteId, shoppingCartProductEntity[] products, string storeId, object userState) {
            if ((this.shoppingCartProductRemoveOperationCompleted == null)) {
                this.shoppingCartProductRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshoppingCartProductRemoveCompleted);
            }
            this.InvokeAsync("shoppingCartProductRemove", new object[] {
                        sessionId,
                        quoteId,
                        products,
                        storeId}, this.shoppingCartProductRemoveOperationCompleted, userState);
        }
        
        private void OnshoppingCartProductRemoveCompleted(object arg) {
            if ((this.shoppingCartProductRemoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.shoppingCartProductRemoveCompleted(this, new shoppingCartProductRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get list of products in shopping cart
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogProductEntity[] shoppingCartProductList(string sessionId, int quoteId, string storeId) {
            object[] results = this.Invoke("shoppingCartProductList", new object[] {
                        sessionId,
                        quoteId,
                        storeId});
            return ((catalogProductEntity[])(results[0]));
        }
        
        public System.IAsyncResult BeginshoppingCartProductList(string sessionId, int quoteId, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("shoppingCartProductList", new object[] {
                        sessionId,
                        quoteId,
                        storeId}, callback, asyncState);
        }
        
        public catalogProductEntity[] EndshoppingCartProductList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductEntity[])(results[0]));
        }
        
        public void shoppingCartProductListAsync(string sessionId, int quoteId, string storeId) {
            this.shoppingCartProductListAsync(sessionId, quoteId, storeId, null);
        }
        
        public void shoppingCartProductListAsync(string sessionId, int quoteId, string storeId, object userState) {
            if ((this.shoppingCartProductListOperationCompleted == null)) {
                this.shoppingCartProductListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshoppingCartProductListCompleted);
            }
            this.InvokeAsync("shoppingCartProductList", new object[] {
                        sessionId,
                        quoteId,
                        storeId}, this.shoppingCartProductListOperationCompleted, userState);
        }
        
        private void OnshoppingCartProductListCompleted(object arg) {
            if ((this.shoppingCartProductListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.shoppingCartProductListCompleted(this, new shoppingCartProductListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Move product(s) to customer quote
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool shoppingCartProductMoveToCustomerQuote(string sessionId, int quoteId, shoppingCartProductEntity[] products, string storeId) {
            object[] results = this.Invoke("shoppingCartProductMoveToCustomerQuote", new object[] {
                        sessionId,
                        quoteId,
                        products,
                        storeId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginshoppingCartProductMoveToCustomerQuote(string sessionId, int quoteId, shoppingCartProductEntity[] products, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("shoppingCartProductMoveToCustomerQuote", new object[] {
                        sessionId,
                        quoteId,
                        products,
                        storeId}, callback, asyncState);
        }
        
        public bool EndshoppingCartProductMoveToCustomerQuote(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void shoppingCartProductMoveToCustomerQuoteAsync(string sessionId, int quoteId, shoppingCartProductEntity[] products, string storeId) {
            this.shoppingCartProductMoveToCustomerQuoteAsync(sessionId, quoteId, products, storeId, null);
        }
        
        public void shoppingCartProductMoveToCustomerQuoteAsync(string sessionId, int quoteId, shoppingCartProductEntity[] products, string storeId, object userState) {
            if ((this.shoppingCartProductMoveToCustomerQuoteOperationCompleted == null)) {
                this.shoppingCartProductMoveToCustomerQuoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshoppingCartProductMoveToCustomerQuoteCompleted);
            }
            this.InvokeAsync("shoppingCartProductMoveToCustomerQuote", new object[] {
                        sessionId,
                        quoteId,
                        products,
                        storeId}, this.shoppingCartProductMoveToCustomerQuoteOperationCompleted, userState);
        }
        
        private void OnshoppingCartProductMoveToCustomerQuoteCompleted(object arg) {
            if ((this.shoppingCartProductMoveToCustomerQuoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.shoppingCartProductMoveToCustomerQuoteCompleted(this, new shoppingCartProductMoveToCustomerQuoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Set customer for shopping cart
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool shoppingCartCustomerSet(string sessionId, int quoteId, shoppingCartCustomerEntity customer, string storeId) {
            object[] results = this.Invoke("shoppingCartCustomerSet", new object[] {
                        sessionId,
                        quoteId,
                        customer,
                        storeId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginshoppingCartCustomerSet(string sessionId, int quoteId, shoppingCartCustomerEntity customer, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("shoppingCartCustomerSet", new object[] {
                        sessionId,
                        quoteId,
                        customer,
                        storeId}, callback, asyncState);
        }
        
        public bool EndshoppingCartCustomerSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void shoppingCartCustomerSetAsync(string sessionId, int quoteId, shoppingCartCustomerEntity customer, string storeId) {
            this.shoppingCartCustomerSetAsync(sessionId, quoteId, customer, storeId, null);
        }
        
        public void shoppingCartCustomerSetAsync(string sessionId, int quoteId, shoppingCartCustomerEntity customer, string storeId, object userState) {
            if ((this.shoppingCartCustomerSetOperationCompleted == null)) {
                this.shoppingCartCustomerSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshoppingCartCustomerSetCompleted);
            }
            this.InvokeAsync("shoppingCartCustomerSet", new object[] {
                        sessionId,
                        quoteId,
                        customer,
                        storeId}, this.shoppingCartCustomerSetOperationCompleted, userState);
        }
        
        private void OnshoppingCartCustomerSetCompleted(object arg) {
            if ((this.shoppingCartCustomerSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.shoppingCartCustomerSetCompleted(this, new shoppingCartCustomerSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Set customer's addresses in shopping cart
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool shoppingCartCustomerAddresses(string sessionId, int quoteId, shoppingCartCustomerAddressEntity[] customer, string storeId) {
            object[] results = this.Invoke("shoppingCartCustomerAddresses", new object[] {
                        sessionId,
                        quoteId,
                        customer,
                        storeId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginshoppingCartCustomerAddresses(string sessionId, int quoteId, shoppingCartCustomerAddressEntity[] customer, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("shoppingCartCustomerAddresses", new object[] {
                        sessionId,
                        quoteId,
                        customer,
                        storeId}, callback, asyncState);
        }
        
        public bool EndshoppingCartCustomerAddresses(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void shoppingCartCustomerAddressesAsync(string sessionId, int quoteId, shoppingCartCustomerAddressEntity[] customer, string storeId) {
            this.shoppingCartCustomerAddressesAsync(sessionId, quoteId, customer, storeId, null);
        }
        
        public void shoppingCartCustomerAddressesAsync(string sessionId, int quoteId, shoppingCartCustomerAddressEntity[] customer, string storeId, object userState) {
            if ((this.shoppingCartCustomerAddressesOperationCompleted == null)) {
                this.shoppingCartCustomerAddressesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshoppingCartCustomerAddressesCompleted);
            }
            this.InvokeAsync("shoppingCartCustomerAddresses", new object[] {
                        sessionId,
                        quoteId,
                        customer,
                        storeId}, this.shoppingCartCustomerAddressesOperationCompleted, userState);
        }
        
        private void OnshoppingCartCustomerAddressesCompleted(object arg) {
            if ((this.shoppingCartCustomerAddressesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.shoppingCartCustomerAddressesCompleted(this, new shoppingCartCustomerAddressesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Set shipping method
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool shoppingCartShippingMethod(string sessionId, int quoteId, string method, string storeId) {
            object[] results = this.Invoke("shoppingCartShippingMethod", new object[] {
                        sessionId,
                        quoteId,
                        method,
                        storeId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginshoppingCartShippingMethod(string sessionId, int quoteId, string method, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("shoppingCartShippingMethod", new object[] {
                        sessionId,
                        quoteId,
                        method,
                        storeId}, callback, asyncState);
        }
        
        public bool EndshoppingCartShippingMethod(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void shoppingCartShippingMethodAsync(string sessionId, int quoteId, string method, string storeId) {
            this.shoppingCartShippingMethodAsync(sessionId, quoteId, method, storeId, null);
        }
        
        public void shoppingCartShippingMethodAsync(string sessionId, int quoteId, string method, string storeId, object userState) {
            if ((this.shoppingCartShippingMethodOperationCompleted == null)) {
                this.shoppingCartShippingMethodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshoppingCartShippingMethodCompleted);
            }
            this.InvokeAsync("shoppingCartShippingMethod", new object[] {
                        sessionId,
                        quoteId,
                        method,
                        storeId}, this.shoppingCartShippingMethodOperationCompleted, userState);
        }
        
        private void OnshoppingCartShippingMethodCompleted(object arg) {
            if ((this.shoppingCartShippingMethodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.shoppingCartShippingMethodCompleted(this, new shoppingCartShippingMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get list of available shipping methods
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public shoppingCartShippingMethodEntity[] shoppingCartShippingList(string sessionId, int quoteId, string storeId) {
            object[] results = this.Invoke("shoppingCartShippingList", new object[] {
                        sessionId,
                        quoteId,
                        storeId});
            return ((shoppingCartShippingMethodEntity[])(results[0]));
        }
        
        public System.IAsyncResult BeginshoppingCartShippingList(string sessionId, int quoteId, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("shoppingCartShippingList", new object[] {
                        sessionId,
                        quoteId,
                        storeId}, callback, asyncState);
        }
        
        public shoppingCartShippingMethodEntity[] EndshoppingCartShippingList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((shoppingCartShippingMethodEntity[])(results[0]));
        }
        
        public void shoppingCartShippingListAsync(string sessionId, int quoteId, string storeId) {
            this.shoppingCartShippingListAsync(sessionId, quoteId, storeId, null);
        }
        
        public void shoppingCartShippingListAsync(string sessionId, int quoteId, string storeId, object userState) {
            if ((this.shoppingCartShippingListOperationCompleted == null)) {
                this.shoppingCartShippingListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshoppingCartShippingListCompleted);
            }
            this.InvokeAsync("shoppingCartShippingList", new object[] {
                        sessionId,
                        quoteId,
                        storeId}, this.shoppingCartShippingListOperationCompleted, userState);
        }
        
        private void OnshoppingCartShippingListCompleted(object arg) {
            if ((this.shoppingCartShippingListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.shoppingCartShippingListCompleted(this, new shoppingCartShippingListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Set payment method
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool shoppingCartPaymentMethod(string sessionId, int quoteId, shoppingCartPaymentMethodEntity method, string storeId) {
            object[] results = this.Invoke("shoppingCartPaymentMethod", new object[] {
                        sessionId,
                        quoteId,
                        method,
                        storeId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginshoppingCartPaymentMethod(string sessionId, int quoteId, shoppingCartPaymentMethodEntity method, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("shoppingCartPaymentMethod", new object[] {
                        sessionId,
                        quoteId,
                        method,
                        storeId}, callback, asyncState);
        }
        
        public bool EndshoppingCartPaymentMethod(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void shoppingCartPaymentMethodAsync(string sessionId, int quoteId, shoppingCartPaymentMethodEntity method, string storeId) {
            this.shoppingCartPaymentMethodAsync(sessionId, quoteId, method, storeId, null);
        }
        
        public void shoppingCartPaymentMethodAsync(string sessionId, int quoteId, shoppingCartPaymentMethodEntity method, string storeId, object userState) {
            if ((this.shoppingCartPaymentMethodOperationCompleted == null)) {
                this.shoppingCartPaymentMethodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshoppingCartPaymentMethodCompleted);
            }
            this.InvokeAsync("shoppingCartPaymentMethod", new object[] {
                        sessionId,
                        quoteId,
                        method,
                        storeId}, this.shoppingCartPaymentMethodOperationCompleted, userState);
        }
        
        private void OnshoppingCartPaymentMethodCompleted(object arg) {
            if ((this.shoppingCartPaymentMethodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.shoppingCartPaymentMethodCompleted(this, new shoppingCartPaymentMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get list of available payment methods
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public shoppingCartPaymentMethodResponseEntity[] shoppingCartPaymentList(string sessionId, int quoteId, string store) {
            object[] results = this.Invoke("shoppingCartPaymentList", new object[] {
                        sessionId,
                        quoteId,
                        store});
            return ((shoppingCartPaymentMethodResponseEntity[])(results[0]));
        }
        
        public System.IAsyncResult BeginshoppingCartPaymentList(string sessionId, int quoteId, string store, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("shoppingCartPaymentList", new object[] {
                        sessionId,
                        quoteId,
                        store}, callback, asyncState);
        }
        
        public shoppingCartPaymentMethodResponseEntity[] EndshoppingCartPaymentList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((shoppingCartPaymentMethodResponseEntity[])(results[0]));
        }
        
        public void shoppingCartPaymentListAsync(string sessionId, int quoteId, string store) {
            this.shoppingCartPaymentListAsync(sessionId, quoteId, store, null);
        }
        
        public void shoppingCartPaymentListAsync(string sessionId, int quoteId, string store, object userState) {
            if ((this.shoppingCartPaymentListOperationCompleted == null)) {
                this.shoppingCartPaymentListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshoppingCartPaymentListCompleted);
            }
            this.InvokeAsync("shoppingCartPaymentList", new object[] {
                        sessionId,
                        quoteId,
                        store}, this.shoppingCartPaymentListOperationCompleted, userState);
        }
        
        private void OnshoppingCartPaymentListCompleted(object arg) {
            if ((this.shoppingCartPaymentListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.shoppingCartPaymentListCompleted(this, new shoppingCartPaymentListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Add coupon code for shopping cart
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool shoppingCartCouponAdd(string sessionId, int quoteId, string couponCode, string storeId) {
            object[] results = this.Invoke("shoppingCartCouponAdd", new object[] {
                        sessionId,
                        quoteId,
                        couponCode,
                        storeId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginshoppingCartCouponAdd(string sessionId, int quoteId, string couponCode, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("shoppingCartCouponAdd", new object[] {
                        sessionId,
                        quoteId,
                        couponCode,
                        storeId}, callback, asyncState);
        }
        
        public bool EndshoppingCartCouponAdd(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void shoppingCartCouponAddAsync(string sessionId, int quoteId, string couponCode, string storeId) {
            this.shoppingCartCouponAddAsync(sessionId, quoteId, couponCode, storeId, null);
        }
        
        public void shoppingCartCouponAddAsync(string sessionId, int quoteId, string couponCode, string storeId, object userState) {
            if ((this.shoppingCartCouponAddOperationCompleted == null)) {
                this.shoppingCartCouponAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshoppingCartCouponAddCompleted);
            }
            this.InvokeAsync("shoppingCartCouponAdd", new object[] {
                        sessionId,
                        quoteId,
                        couponCode,
                        storeId}, this.shoppingCartCouponAddOperationCompleted, userState);
        }
        
        private void OnshoppingCartCouponAddCompleted(object arg) {
            if ((this.shoppingCartCouponAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.shoppingCartCouponAddCompleted(this, new shoppingCartCouponAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Remove coupon code from shopping cart
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool shoppingCartCouponRemove(string sessionId, int quoteId, string storeId) {
            object[] results = this.Invoke("shoppingCartCouponRemove", new object[] {
                        sessionId,
                        quoteId,
                        storeId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginshoppingCartCouponRemove(string sessionId, int quoteId, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("shoppingCartCouponRemove", new object[] {
                        sessionId,
                        quoteId,
                        storeId}, callback, asyncState);
        }
        
        public bool EndshoppingCartCouponRemove(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void shoppingCartCouponRemoveAsync(string sessionId, int quoteId, string storeId) {
            this.shoppingCartCouponRemoveAsync(sessionId, quoteId, storeId, null);
        }
        
        public void shoppingCartCouponRemoveAsync(string sessionId, int quoteId, string storeId, object userState) {
            if ((this.shoppingCartCouponRemoveOperationCompleted == null)) {
                this.shoppingCartCouponRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshoppingCartCouponRemoveCompleted);
            }
            this.InvokeAsync("shoppingCartCouponRemove", new object[] {
                        sessionId,
                        quoteId,
                        storeId}, this.shoppingCartCouponRemoveOperationCompleted, userState);
        }
        
        private void OnshoppingCartCouponRemoveCompleted(object arg) {
            if ((this.shoppingCartCouponRemoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.shoppingCartCouponRemoveCompleted(this, new shoppingCartCouponRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve list of tags by product
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogProductTagListEntity[] catalogProductTagList(string sessionId, string productId, string store) {
            object[] results = this.Invoke("catalogProductTagList", new object[] {
                        sessionId,
                        productId,
                        store});
            return ((catalogProductTagListEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductTagList(string sessionId, string productId, string store, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductTagList", new object[] {
                        sessionId,
                        productId,
                        store}, callback, asyncState);
        }
        
        public catalogProductTagListEntity[] EndcatalogProductTagList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductTagListEntity[])(results[0]));
        }
        
        public void catalogProductTagListAsync(string sessionId, string productId, string store) {
            this.catalogProductTagListAsync(sessionId, productId, store, null);
        }
        
        public void catalogProductTagListAsync(string sessionId, string productId, string store, object userState) {
            if ((this.catalogProductTagListOperationCompleted == null)) {
                this.catalogProductTagListOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductTagListCompleted);
            }
            this.InvokeAsync("catalogProductTagList", new object[] {
                        sessionId,
                        productId,
                        store}, this.catalogProductTagListOperationCompleted, userState);
        }
        
        private void OncatalogProductTagListCompleted(object arg) {
            if ((this.catalogProductTagListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductTagListCompleted(this, new catalogProductTagListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve product tag info
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public catalogProductTagInfoEntity catalogProductTagInfo(string sessionId, string tagId, string store) {
            object[] results = this.Invoke("catalogProductTagInfo", new object[] {
                        sessionId,
                        tagId,
                        store});
            return ((catalogProductTagInfoEntity)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductTagInfo(string sessionId, string tagId, string store, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductTagInfo", new object[] {
                        sessionId,
                        tagId,
                        store}, callback, asyncState);
        }
        
        public catalogProductTagInfoEntity EndcatalogProductTagInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductTagInfoEntity)(results[0]));
        }
        
        public void catalogProductTagInfoAsync(string sessionId, string tagId, string store) {
            this.catalogProductTagInfoAsync(sessionId, tagId, store, null);
        }
        
        public void catalogProductTagInfoAsync(string sessionId, string tagId, string store, object userState) {
            if ((this.catalogProductTagInfoOperationCompleted == null)) {
                this.catalogProductTagInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductTagInfoCompleted);
            }
            this.InvokeAsync("catalogProductTagInfo", new object[] {
                        sessionId,
                        tagId,
                        store}, this.catalogProductTagInfoOperationCompleted, userState);
        }
        
        private void OncatalogProductTagInfoCompleted(object arg) {
            if ((this.catalogProductTagInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductTagInfoCompleted(this, new catalogProductTagInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Add tag(s) to product
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public associativeEntity[] catalogProductTagAdd(string sessionId, catalogProductTagAddEntity data) {
            object[] results = this.Invoke("catalogProductTagAdd", new object[] {
                        sessionId,
                        data});
            return ((associativeEntity[])(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductTagAdd(string sessionId, catalogProductTagAddEntity data, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductTagAdd", new object[] {
                        sessionId,
                        data}, callback, asyncState);
        }
        
        public associativeEntity[] EndcatalogProductTagAdd(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((associativeEntity[])(results[0]));
        }
        
        public void catalogProductTagAddAsync(string sessionId, catalogProductTagAddEntity data) {
            this.catalogProductTagAddAsync(sessionId, data, null);
        }
        
        public void catalogProductTagAddAsync(string sessionId, catalogProductTagAddEntity data, object userState) {
            if ((this.catalogProductTagAddOperationCompleted == null)) {
                this.catalogProductTagAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductTagAddCompleted);
            }
            this.InvokeAsync("catalogProductTagAdd", new object[] {
                        sessionId,
                        data}, this.catalogProductTagAddOperationCompleted, userState);
        }
        
        private void OncatalogProductTagAddCompleted(object arg) {
            if ((this.catalogProductTagAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductTagAddCompleted(this, new catalogProductTagAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Update product tag
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductTagUpdate(string sessionId, string tagId, catalogProductTagUpdateEntity data, string store) {
            object[] results = this.Invoke("catalogProductTagUpdate", new object[] {
                        sessionId,
                        tagId,
                        data,
                        store});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductTagUpdate(string sessionId, string tagId, catalogProductTagUpdateEntity data, string store, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductTagUpdate", new object[] {
                        sessionId,
                        tagId,
                        data,
                        store}, callback, asyncState);
        }
        
        public bool EndcatalogProductTagUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductTagUpdateAsync(string sessionId, string tagId, catalogProductTagUpdateEntity data, string store) {
            this.catalogProductTagUpdateAsync(sessionId, tagId, data, store, null);
        }
        
        public void catalogProductTagUpdateAsync(string sessionId, string tagId, catalogProductTagUpdateEntity data, string store, object userState) {
            if ((this.catalogProductTagUpdateOperationCompleted == null)) {
                this.catalogProductTagUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductTagUpdateCompleted);
            }
            this.InvokeAsync("catalogProductTagUpdate", new object[] {
                        sessionId,
                        tagId,
                        data,
                        store}, this.catalogProductTagUpdateOperationCompleted, userState);
        }
        
        private void OncatalogProductTagUpdateCompleted(object arg) {
            if ((this.catalogProductTagUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductTagUpdateCompleted(this, new catalogProductTagUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Remove product tag
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public bool catalogProductTagRemove(string sessionId, string tagId) {
            object[] results = this.Invoke("catalogProductTagRemove", new object[] {
                        sessionId,
                        tagId});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductTagRemove(string sessionId, string tagId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductTagRemove", new object[] {
                        sessionId,
                        tagId}, callback, asyncState);
        }
        
        public bool EndcatalogProductTagRemove(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductTagRemoveAsync(string sessionId, string tagId) {
            this.catalogProductTagRemoveAsync(sessionId, tagId, null);
        }
        
        public void catalogProductTagRemoveAsync(string sessionId, string tagId, object userState) {
            if ((this.catalogProductTagRemoveOperationCompleted == null)) {
                this.catalogProductTagRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductTagRemoveCompleted);
            }
            this.InvokeAsync("catalogProductTagRemove", new object[] {
                        sessionId,
                        tagId}, this.catalogProductTagRemoveOperationCompleted, userState);
        }
        
        private void OncatalogProductTagRemoveCompleted(object arg) {
            if ((this.catalogProductTagRemoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductTagRemoveCompleted(this, new catalogProductTagRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Set a gift message to the cart
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public giftMessageResponse giftMessageSetForQuote(string sessionId, string quoteId, giftMessageEntity giftMessage, string storeId) {
            object[] results = this.Invoke("giftMessageSetForQuote", new object[] {
                        sessionId,
                        quoteId,
                        giftMessage,
                        storeId});
            return ((giftMessageResponse)(results[0]));
        }
        
        public System.IAsyncResult BegingiftMessageSetForQuote(string sessionId, string quoteId, giftMessageEntity giftMessage, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("giftMessageSetForQuote", new object[] {
                        sessionId,
                        quoteId,
                        giftMessage,
                        storeId}, callback, asyncState);
        }
        
        public giftMessageResponse EndgiftMessageSetForQuote(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((giftMessageResponse)(results[0]));
        }
        
        public void giftMessageSetForQuoteAsync(string sessionId, string quoteId, giftMessageEntity giftMessage, string storeId) {
            this.giftMessageSetForQuoteAsync(sessionId, quoteId, giftMessage, storeId, null);
        }
        
        public void giftMessageSetForQuoteAsync(string sessionId, string quoteId, giftMessageEntity giftMessage, string storeId, object userState) {
            if ((this.giftMessageSetForQuoteOperationCompleted == null)) {
                this.giftMessageSetForQuoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OngiftMessageSetForQuoteCompleted);
            }
            this.InvokeAsync("giftMessageSetForQuote", new object[] {
                        sessionId,
                        quoteId,
                        giftMessage,
                        storeId}, this.giftMessageSetForQuoteOperationCompleted, userState);
        }
        
        private void OngiftMessageSetForQuoteCompleted(object arg) {
            if ((this.giftMessageSetForQuoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.giftMessageSetForQuoteCompleted(this, new giftMessageSetForQuoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Setting a gift messages to the quote item
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public giftMessageResponse giftMessageSetForQuoteItem(string sessionId, string quoteItemId, giftMessageEntity giftMessage, string storeId) {
            object[] results = this.Invoke("giftMessageSetForQuoteItem", new object[] {
                        sessionId,
                        quoteItemId,
                        giftMessage,
                        storeId});
            return ((giftMessageResponse)(results[0]));
        }
        
        public System.IAsyncResult BegingiftMessageSetForQuoteItem(string sessionId, string quoteItemId, giftMessageEntity giftMessage, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("giftMessageSetForQuoteItem", new object[] {
                        sessionId,
                        quoteItemId,
                        giftMessage,
                        storeId}, callback, asyncState);
        }
        
        public giftMessageResponse EndgiftMessageSetForQuoteItem(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((giftMessageResponse)(results[0]));
        }
        
        public void giftMessageSetForQuoteItemAsync(string sessionId, string quoteItemId, giftMessageEntity giftMessage, string storeId) {
            this.giftMessageSetForQuoteItemAsync(sessionId, quoteItemId, giftMessage, storeId, null);
        }
        
        public void giftMessageSetForQuoteItemAsync(string sessionId, string quoteItemId, giftMessageEntity giftMessage, string storeId, object userState) {
            if ((this.giftMessageSetForQuoteItemOperationCompleted == null)) {
                this.giftMessageSetForQuoteItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OngiftMessageSetForQuoteItemCompleted);
            }
            this.InvokeAsync("giftMessageSetForQuoteItem", new object[] {
                        sessionId,
                        quoteItemId,
                        giftMessage,
                        storeId}, this.giftMessageSetForQuoteItemOperationCompleted, userState);
        }
        
        private void OngiftMessageSetForQuoteItemCompleted(object arg) {
            if ((this.giftMessageSetForQuoteItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.giftMessageSetForQuoteItemCompleted(this, new giftMessageSetForQuoteItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Setting a gift messages to the quote items by products
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("result")]
        public giftMessageResponse[] giftMessageSetForQuoteProduct(string sessionId, string quoteId, giftMessageAssociativeProductsEntity[] productsAndMessages, string storeId) {
            object[] results = this.Invoke("giftMessageSetForQuoteProduct", new object[] {
                        sessionId,
                        quoteId,
                        productsAndMessages,
                        storeId});
            return ((giftMessageResponse[])(results[0]));
        }
        
        public System.IAsyncResult BegingiftMessageSetForQuoteProduct(string sessionId, string quoteId, giftMessageAssociativeProductsEntity[] productsAndMessages, string storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("giftMessageSetForQuoteProduct", new object[] {
                        sessionId,
                        quoteId,
                        productsAndMessages,
                        storeId}, callback, asyncState);
        }
        
        public giftMessageResponse[] EndgiftMessageSetForQuoteProduct(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((giftMessageResponse[])(results[0]));
        }
        
        public void giftMessageSetForQuoteProductAsync(string sessionId, string quoteId, giftMessageAssociativeProductsEntity[] productsAndMessages, string storeId) {
            this.giftMessageSetForQuoteProductAsync(sessionId, quoteId, productsAndMessages, storeId, null);
        }
        
        public void giftMessageSetForQuoteProductAsync(string sessionId, string quoteId, giftMessageAssociativeProductsEntity[] productsAndMessages, string storeId, object userState) {
            if ((this.giftMessageSetForQuoteProductOperationCompleted == null)) {
                this.giftMessageSetForQuoteProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OngiftMessageSetForQuoteProductCompleted);
            }
            this.InvokeAsync("giftMessageSetForQuoteProduct", new object[] {
                        sessionId,
                        quoteId,
                        productsAndMessages,
                        storeId}, this.giftMessageSetForQuoteProductOperationCompleted, userState);
        }
        
        private void OngiftMessageSetForQuoteProductCompleted(object arg) {
            if ((this.giftMessageSetForQuoteProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.giftMessageSetForQuoteProductCompleted(this, new giftMessageSetForQuoteProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Add links to downloadable product
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("respons")]
        public int catalogProductDownloadableLinkAdd(string sessionId, string productId, catalogProductDownloadableLinkAddEntity resource, string resourceType, string store, string identifierType) {
            object[] results = this.Invoke("catalogProductDownloadableLinkAdd", new object[] {
                        sessionId,
                        productId,
                        resource,
                        resourceType,
                        store,
                        identifierType});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductDownloadableLinkAdd(string sessionId, string productId, catalogProductDownloadableLinkAddEntity resource, string resourceType, string store, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductDownloadableLinkAdd", new object[] {
                        sessionId,
                        productId,
                        resource,
                        resourceType,
                        store,
                        identifierType}, callback, asyncState);
        }
        
        public int EndcatalogProductDownloadableLinkAdd(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void catalogProductDownloadableLinkAddAsync(string sessionId, string productId, catalogProductDownloadableLinkAddEntity resource, string resourceType, string store, string identifierType) {
            this.catalogProductDownloadableLinkAddAsync(sessionId, productId, resource, resourceType, store, identifierType, null);
        }
        
        public void catalogProductDownloadableLinkAddAsync(string sessionId, string productId, catalogProductDownloadableLinkAddEntity resource, string resourceType, string store, string identifierType, object userState) {
            if ((this.catalogProductDownloadableLinkAddOperationCompleted == null)) {
                this.catalogProductDownloadableLinkAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductDownloadableLinkAddCompleted);
            }
            this.InvokeAsync("catalogProductDownloadableLinkAdd", new object[] {
                        sessionId,
                        productId,
                        resource,
                        resourceType,
                        store,
                        identifierType}, this.catalogProductDownloadableLinkAddOperationCompleted, userState);
        }
        
        private void OncatalogProductDownloadableLinkAddCompleted(object arg) {
            if ((this.catalogProductDownloadableLinkAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductDownloadableLinkAddCompleted(this, new catalogProductDownloadableLinkAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Retrieve list of links and samples for downloadable product
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("respons")]
        public catalogProductDownloadableLinkInfoEntity catalogProductDownloadableLinkList(string sessionId, string productId, string store, string identifierType) {
            object[] results = this.Invoke("catalogProductDownloadableLinkList", new object[] {
                        sessionId,
                        productId,
                        store,
                        identifierType});
            return ((catalogProductDownloadableLinkInfoEntity)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductDownloadableLinkList(string sessionId, string productId, string store, string identifierType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductDownloadableLinkList", new object[] {
                        sessionId,
                        productId,
                        store,
                        identifierType}, callback, asyncState);
        }
        
        public catalogProductDownloadableLinkInfoEntity EndcatalogProductDownloadableLinkList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((catalogProductDownloadableLinkInfoEntity)(results[0]));
        }
        
        public void catalogProductDownloadableLinkListAsync(string sessionId, string productId, string store, string identifierType) {
            this.catalogProductDownloadableLinkListAsync(sessionId, productId, store, identifierType, null);
        }
        
        public void catalogProductDownloadableLinkListAsync(string sessionId, string productId, string store, string identifierType, object userState) {
            if ((this.catalogProductDownloadableLinkListOperationCompleted == null)) {
                this.catalogProductDownloadableLinkListOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductDownloadableLinkListCompleted);
            }
            this.InvokeAsync("catalogProductDownloadableLinkList", new object[] {
                        sessionId,
                        productId,
                        store,
                        identifierType}, this.catalogProductDownloadableLinkListOperationCompleted, userState);
        }
        
        private void OncatalogProductDownloadableLinkListCompleted(object arg) {
            if ((this.catalogProductDownloadableLinkListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductDownloadableLinkListCompleted(this, new catalogProductDownloadableLinkListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Remove links and samples from downloadable product
///</remarks>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Mage_Api_Model_Server_V2_HandlerAction", RequestNamespace="urn:Magento", ResponseNamespace="urn:Magento")]
        [return: System.Xml.Serialization.SoapElement("respons")]
        public bool catalogProductDownloadableLinkRemove(string sessionId, string linkId, string resourceType) {
            object[] results = this.Invoke("catalogProductDownloadableLinkRemove", new object[] {
                        sessionId,
                        linkId,
                        resourceType});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BegincatalogProductDownloadableLinkRemove(string sessionId, string linkId, string resourceType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("catalogProductDownloadableLinkRemove", new object[] {
                        sessionId,
                        linkId,
                        resourceType}, callback, asyncState);
        }
        
        public bool EndcatalogProductDownloadableLinkRemove(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void catalogProductDownloadableLinkRemoveAsync(string sessionId, string linkId, string resourceType) {
            this.catalogProductDownloadableLinkRemoveAsync(sessionId, linkId, resourceType, null);
        }
        
        public void catalogProductDownloadableLinkRemoveAsync(string sessionId, string linkId, string resourceType, object userState) {
            if ((this.catalogProductDownloadableLinkRemoveOperationCompleted == null)) {
                this.catalogProductDownloadableLinkRemoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OncatalogProductDownloadableLinkRemoveCompleted);
            }
            this.InvokeAsync("catalogProductDownloadableLinkRemove", new object[] {
                        sessionId,
                        linkId,
                        resourceType}, this.catalogProductDownloadableLinkRemoveOperationCompleted, userState);
        }
        
        private void OncatalogProductDownloadableLinkRemoveCompleted(object arg) {
            if ((this.catalogProductDownloadableLinkRemoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.catalogProductDownloadableLinkRemoveCompleted(this, new catalogProductDownloadableLinkRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class apiEntity {
        
        /// <remarks/>
        public string title;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public string[] aliases;
        
        /// <remarks/>
        public apiMethodEntity[] methods;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class apiMethodEntity {
        
        /// <remarks/>
        public string title;
        
        /// <remarks/>
        public string path;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public string[] aliases;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class existsFaltureEntity {
        
        /// <remarks/>
        public string code;
        
        /// <remarks/>
        public string message;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class storeEntity {
        
        /// <remarks/>
        public int store_id;
        
        /// <remarks/>
        public string code;
        
        /// <remarks/>
        public int website_id;
        
        /// <remarks/>
        public int group_id;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public int sort_order;
        
        /// <remarks/>
        public int is_active;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class magentoInfoEntity {
        
        /// <remarks/>
        public string magento_version;
        
        /// <remarks/>
        public string magento_edition;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class directoryCountryEntity {
        
        /// <remarks/>
        public string country_id;
        
        /// <remarks/>
        public string iso2_code;
        
        /// <remarks/>
        public string iso3_code;
        
        /// <remarks/>
        public string name;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class directoryRegionEntity {
        
        /// <remarks/>
        public string region_id;
        
        /// <remarks/>
        public string code;
        
        /// <remarks/>
        public string name;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class filters {
        
        /// <remarks/>
        public associativeEntity[] filter;
        
        /// <remarks/>
        public complexFilter[] complex_filter;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class associativeEntity {
        
        /// <remarks/>
        public string key;
        
        /// <remarks/>
        public string value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class complexFilter {
        
        /// <remarks/>
        public string key;
        
        /// <remarks/>
        public associativeEntity value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class customerCustomerEntity {
        
        /// <remarks/>
        public int customer_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool customer_idSpecified;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string increment_id;
        
        /// <remarks/>
        public int store_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool store_idSpecified;
        
        /// <remarks/>
        public int website_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool website_idSpecified;
        
        /// <remarks/>
        public string created_in;
        
        /// <remarks/>
        public string email;
        
        /// <remarks/>
        public string firstname;
        
        /// <remarks/>
        public string middlename;
        
        /// <remarks/>
        public string lastname;
        
        /// <remarks/>
        public int group_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool group_idSpecified;
        
        /// <remarks/>
        public string prefix;
        
        /// <remarks/>
        public string suffix;
        
        /// <remarks/>
        public string dob;
        
        /// <remarks/>
        public string taxvat;
        
        /// <remarks/>
        public bool confirmation;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool confirmationSpecified;
        
        /// <remarks/>
        public string password_hash;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class customerCustomerEntityToCreate {
        
        /// <remarks/>
        public int customer_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool customer_idSpecified;
        
        /// <remarks/>
        public string email;
        
        /// <remarks/>
        public string firstname;
        
        /// <remarks/>
        public string lastname;
        
        /// <remarks/>
        public string middlename;
        
        /// <remarks/>
        public string password;
        
        /// <remarks/>
        public int website_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool website_idSpecified;
        
        /// <remarks/>
        public int store_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool store_idSpecified;
        
        /// <remarks/>
        public int group_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool group_idSpecified;
        
        /// <remarks/>
        public string prefix;
        
        /// <remarks/>
        public string suffix;
        
        /// <remarks/>
        public string dob;
        
        /// <remarks/>
        public string taxvat;
        
        /// <remarks/>
        public int gender;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool genderSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class customerGroupEntity {
        
        /// <remarks/>
        public int customer_group_id;
        
        /// <remarks/>
        public string customer_group_code;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class customerAddressEntityItem {
        
        /// <remarks/>
        public int customer_address_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool customer_address_idSpecified;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string increment_id;
        
        /// <remarks/>
        public string city;
        
        /// <remarks/>
        public string company;
        
        /// <remarks/>
        public string country_id;
        
        /// <remarks/>
        public string fax;
        
        /// <remarks/>
        public string firstname;
        
        /// <remarks/>
        public string lastname;
        
        /// <remarks/>
        public string middlename;
        
        /// <remarks/>
        public string postcode;
        
        /// <remarks/>
        public string prefix;
        
        /// <remarks/>
        public string region;
        
        /// <remarks/>
        public int region_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool region_idSpecified;
        
        /// <remarks/>
        public string street;
        
        /// <remarks/>
        public string suffix;
        
        /// <remarks/>
        public string telephone;
        
        /// <remarks/>
        public bool is_default_billing;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_default_billingSpecified;
        
        /// <remarks/>
        public bool is_default_shipping;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_default_shippingSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class customerAddressEntityCreate {
        
        /// <remarks/>
        public string city;
        
        /// <remarks/>
        public string company;
        
        /// <remarks/>
        public string country_id;
        
        /// <remarks/>
        public string fax;
        
        /// <remarks/>
        public string firstname;
        
        /// <remarks/>
        public string lastname;
        
        /// <remarks/>
        public string middlename;
        
        /// <remarks/>
        public string postcode;
        
        /// <remarks/>
        public string prefix;
        
        /// <remarks/>
        public int region_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool region_idSpecified;
        
        /// <remarks/>
        public string region;
        
        /// <remarks/>
        public string[] street;
        
        /// <remarks/>
        public string suffix;
        
        /// <remarks/>
        public string telephone;
        
        /// <remarks/>
        public bool is_default_billing;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_default_billingSpecified;
        
        /// <remarks/>
        public bool is_default_shipping;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_default_shippingSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogCategoryTree {
        
        /// <remarks/>
        public int category_id;
        
        /// <remarks/>
        public int parent_id;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public int position;
        
        /// <remarks/>
        public int level;
        
        /// <remarks/>
        public catalogCategoryEntity[] children;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogCategoryEntity {
        
        /// <remarks/>
        public int category_id;
        
        /// <remarks/>
        public int parent_id;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public int is_active;
        
        /// <remarks/>
        public int position;
        
        /// <remarks/>
        public int level;
        
        /// <remarks/>
        public catalogCategoryEntity[] children;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogCategoryEntityNoChildren {
        
        /// <remarks/>
        public int category_id;
        
        /// <remarks/>
        public int parent_id;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public int is_active;
        
        /// <remarks/>
        public int position;
        
        /// <remarks/>
        public int level;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogCategoryInfo {
        
        /// <remarks/>
        public string category_id;
        
        /// <remarks/>
        public int is_active;
        
        /// <remarks/>
        public string position;
        
        /// <remarks/>
        public string level;
        
        /// <remarks/>
        public string parent_id;
        
        /// <remarks/>
        public string all_children;
        
        /// <remarks/>
        public string children;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public string url_key;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public string meta_title;
        
        /// <remarks/>
        public string meta_keywords;
        
        /// <remarks/>
        public string meta_description;
        
        /// <remarks/>
        public string path;
        
        /// <remarks/>
        public string url_path;
        
        /// <remarks/>
        public int children_count;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool children_countSpecified;
        
        /// <remarks/>
        public string display_mode;
        
        /// <remarks/>
        public int is_anchor;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_anchorSpecified;
        
        /// <remarks/>
        public string[] available_sort_by;
        
        /// <remarks/>
        public string custom_design;
        
        /// <remarks/>
        public string custom_design_apply;
        
        /// <remarks/>
        public string custom_design_from;
        
        /// <remarks/>
        public string custom_design_to;
        
        /// <remarks/>
        public string page_layout;
        
        /// <remarks/>
        public string custom_layout_update;
        
        /// <remarks/>
        public string default_sort_by;
        
        /// <remarks/>
        public int landing_page;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool landing_pageSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogCategoryEntityCreate {
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public int is_active;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_activeSpecified;
        
        /// <remarks/>
        public int position;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool positionSpecified;
        
        /// <remarks/>
        public string[] available_sort_by;
        
        /// <remarks/>
        public string custom_design;
        
        /// <remarks/>
        public int custom_design_apply;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool custom_design_applySpecified;
        
        /// <remarks/>
        public string custom_design_from;
        
        /// <remarks/>
        public string custom_design_to;
        
        /// <remarks/>
        public string custom_layout_update;
        
        /// <remarks/>
        public string default_sort_by;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public string display_mode;
        
        /// <remarks/>
        public int is_anchor;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_anchorSpecified;
        
        /// <remarks/>
        public int landing_page;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool landing_pageSpecified;
        
        /// <remarks/>
        public string meta_description;
        
        /// <remarks/>
        public string meta_keywords;
        
        /// <remarks/>
        public string meta_title;
        
        /// <remarks/>
        public string page_layout;
        
        /// <remarks/>
        public string url_key;
        
        /// <remarks/>
        public int include_in_menu;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool include_in_menuSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogAssignedProduct {
        
        /// <remarks/>
        public int product_id;
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public int set;
        
        /// <remarks/>
        public string sku;
        
        /// <remarks/>
        public int position;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogAttributeEntity {
        
        /// <remarks/>
        public int attribute_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool attribute_idSpecified;
        
        /// <remarks/>
        public string code;
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public string required;
        
        /// <remarks/>
        public string scope;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductEntity {
        
        /// <remarks/>
        public string product_id;
        
        /// <remarks/>
        public string sku;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public string set;
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public string[] category_ids;
        
        /// <remarks/>
        public string[] website_ids;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductRequestAttributes {
        
        /// <remarks/>
        public string[] attributes;
        
        /// <remarks/>
        public string[] additional_attributes;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductReturnEntity {
        
        /// <remarks/>
        public string product_id;
        
        /// <remarks/>
        public string sku;
        
        /// <remarks/>
        public string set;
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public string[] categories;
        
        /// <remarks/>
        public string[] websites;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string type_id;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public string short_description;
        
        /// <remarks/>
        public string weight;
        
        /// <remarks/>
        public string status;
        
        /// <remarks/>
        public string url_key;
        
        /// <remarks/>
        public string url_path;
        
        /// <remarks/>
        public string visibility;
        
        /// <remarks/>
        public string[] category_ids;
        
        /// <remarks/>
        public string[] website_ids;
        
        /// <remarks/>
        public string has_options;
        
        /// <remarks/>
        public string gift_message_available;
        
        /// <remarks/>
        public string price;
        
        /// <remarks/>
        public string special_price;
        
        /// <remarks/>
        public string special_from_date;
        
        /// <remarks/>
        public string special_to_date;
        
        /// <remarks/>
        public string tax_class_id;
        
        /// <remarks/>
        public catalogProductTierPriceEntity[] tier_price;
        
        /// <remarks/>
        public string meta_title;
        
        /// <remarks/>
        public string meta_keyword;
        
        /// <remarks/>
        public string meta_description;
        
        /// <remarks/>
        public string custom_design;
        
        /// <remarks/>
        public string custom_layout_update;
        
        /// <remarks/>
        public string options_container;
        
        /// <remarks/>
        public associativeEntity[] additional_attributes;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductTierPriceEntity {
        
        /// <remarks/>
        public string customer_group_id;
        
        /// <remarks/>
        public string website;
        
        /// <remarks/>
        public int qty;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool qtySpecified;
        
        /// <remarks/>
        public double price;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool priceSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductCreateEntity {
        
        /// <remarks/>
        public string[] categories;
        
        /// <remarks/>
        public string[] websites;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public string short_description;
        
        /// <remarks/>
        public string weight;
        
        /// <remarks/>
        public string status;
        
        /// <remarks/>
        public string url_key;
        
        /// <remarks/>
        public string url_path;
        
        /// <remarks/>
        public string visibility;
        
        /// <remarks/>
        public string[] category_ids;
        
        /// <remarks/>
        public string[] website_ids;
        
        /// <remarks/>
        public string has_options;
        
        /// <remarks/>
        public string gift_message_available;
        
        /// <remarks/>
        public string price;
        
        /// <remarks/>
        public string special_price;
        
        /// <remarks/>
        public string special_from_date;
        
        /// <remarks/>
        public string special_to_date;
        
        /// <remarks/>
        public string tax_class_id;
        
        /// <remarks/>
        public catalogProductTierPriceEntity[] tier_price;
        
        /// <remarks/>
        public string meta_title;
        
        /// <remarks/>
        public string meta_keyword;
        
        /// <remarks/>
        public string meta_description;
        
        /// <remarks/>
        public string custom_design;
        
        /// <remarks/>
        public string custom_layout_update;
        
        /// <remarks/>
        public string options_container;
        
        /// <remarks/>
        public catalogProductAdditionalAttributesEntity additional_attributes;
        
        /// <remarks/>
        public catalogInventoryStockItemUpdateEntity stock_data;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductAdditionalAttributesEntity {
        
        /// <remarks/>
        public associativeMultiEntity[] multi_data;
        
        /// <remarks/>
        public associativeEntity[] single_data;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class associativeMultiEntity {
        
        /// <remarks/>
        public string key;
        
        /// <remarks/>
        public string[] value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogInventoryStockItemUpdateEntity {
        
        /// <remarks/>
        public string qty;
        
        /// <remarks/>
        public int is_in_stock;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_in_stockSpecified;
        
        /// <remarks/>
        public int manage_stock;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool manage_stockSpecified;
        
        /// <remarks/>
        public int use_config_manage_stock;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool use_config_manage_stockSpecified;
        
        /// <remarks/>
        public int min_qty;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool min_qtySpecified;
        
        /// <remarks/>
        public int use_config_min_qty;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool use_config_min_qtySpecified;
        
        /// <remarks/>
        public int min_sale_qty;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool min_sale_qtySpecified;
        
        /// <remarks/>
        public int use_config_min_sale_qty;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool use_config_min_sale_qtySpecified;
        
        /// <remarks/>
        public int max_sale_qty;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool max_sale_qtySpecified;
        
        /// <remarks/>
        public int use_config_max_sale_qty;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool use_config_max_sale_qtySpecified;
        
        /// <remarks/>
        public int is_qty_decimal;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_qty_decimalSpecified;
        
        /// <remarks/>
        public int backorders;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool backordersSpecified;
        
        /// <remarks/>
        public int use_config_backorders;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool use_config_backordersSpecified;
        
        /// <remarks/>
        public int notify_stock_qty;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool notify_stock_qtySpecified;
        
        /// <remarks/>
        public int use_config_notify_stock_qty;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool use_config_notify_stock_qtySpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductSpecialPriceReturnEntity {
        
        /// <remarks/>
        public string special_price;
        
        /// <remarks/>
        public string special_from_date;
        
        /// <remarks/>
        public string special_to_date;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogAttributeOptionEntity {
        
        /// <remarks/>
        public string label;
        
        /// <remarks/>
        public string value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductAttributeSetEntity {
        
        /// <remarks/>
        public int set_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool set_idSpecified;
        
        /// <remarks/>
        public string name;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductAttributeEntityToCreate {
        
        /// <remarks/>
        public string attribute_code;
        
        /// <remarks/>
        public string frontend_input;
        
        /// <remarks/>
        public string scope;
        
        /// <remarks/>
        public string default_value;
        
        /// <remarks/>
        public int is_unique;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_uniqueSpecified;
        
        /// <remarks/>
        public int is_required;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_requiredSpecified;
        
        /// <remarks/>
        public string[] apply_to;
        
        /// <remarks/>
        public int is_configurable;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_configurableSpecified;
        
        /// <remarks/>
        public int is_searchable;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_searchableSpecified;
        
        /// <remarks/>
        public int is_visible_in_advanced_search;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_visible_in_advanced_searchSpecified;
        
        /// <remarks/>
        public int is_comparable;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_comparableSpecified;
        
        /// <remarks/>
        public int is_used_for_promo_rules;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_used_for_promo_rulesSpecified;
        
        /// <remarks/>
        public int is_visible_on_front;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_visible_on_frontSpecified;
        
        /// <remarks/>
        public int used_in_product_listing;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool used_in_product_listingSpecified;
        
        /// <remarks/>
        public associativeEntity[] additional_fields;
        
        /// <remarks/>
        public catalogProductAttributeFrontendLabelEntity[] frontend_label;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductAttributeFrontendLabelEntity {
        
        /// <remarks/>
        public string store_id;
        
        /// <remarks/>
        public string label;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductAttributeEntity {
        
        /// <remarks/>
        public string attribute_id;
        
        /// <remarks/>
        public string attribute_code;
        
        /// <remarks/>
        public string frontend_input;
        
        /// <remarks/>
        public string scope;
        
        /// <remarks/>
        public string default_value;
        
        /// <remarks/>
        public int is_unique;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_uniqueSpecified;
        
        /// <remarks/>
        public int is_required;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_requiredSpecified;
        
        /// <remarks/>
        public string[] apply_to;
        
        /// <remarks/>
        public int is_configurable;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_configurableSpecified;
        
        /// <remarks/>
        public int is_searchable;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_searchableSpecified;
        
        /// <remarks/>
        public int is_visible_in_advanced_search;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_visible_in_advanced_searchSpecified;
        
        /// <remarks/>
        public int is_comparable;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_comparableSpecified;
        
        /// <remarks/>
        public int is_used_for_promo_rules;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_used_for_promo_rulesSpecified;
        
        /// <remarks/>
        public int is_visible_on_front;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_visible_on_frontSpecified;
        
        /// <remarks/>
        public int used_in_product_listing;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool used_in_product_listingSpecified;
        
        /// <remarks/>
        public associativeEntity[] additional_fields;
        
        /// <remarks/>
        public catalogAttributeOptionEntity[] options;
        
        /// <remarks/>
        public catalogProductAttributeFrontendLabelEntity[] frontend_label;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductAttributeEntityToUpdate {
        
        /// <remarks/>
        public string scope;
        
        /// <remarks/>
        public string default_value;
        
        /// <remarks/>
        public int is_unique;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_uniqueSpecified;
        
        /// <remarks/>
        public int is_required;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_requiredSpecified;
        
        /// <remarks/>
        public string[] apply_to;
        
        /// <remarks/>
        public int is_configurable;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_configurableSpecified;
        
        /// <remarks/>
        public int is_searchable;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_searchableSpecified;
        
        /// <remarks/>
        public int is_visible_in_advanced_search;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_visible_in_advanced_searchSpecified;
        
        /// <remarks/>
        public int is_comparable;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_comparableSpecified;
        
        /// <remarks/>
        public int is_used_for_promo_rules;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_used_for_promo_rulesSpecified;
        
        /// <remarks/>
        public int is_visible_on_front;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_visible_on_frontSpecified;
        
        /// <remarks/>
        public int used_in_product_listing;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool used_in_product_listingSpecified;
        
        /// <remarks/>
        public associativeEntity[] additional_fields;
        
        /// <remarks/>
        public catalogProductAttributeFrontendLabelEntity[] frontend_label;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductAttributeOptionEntityToAdd {
        
        /// <remarks/>
        public catalogProductAttributeOptionLabelEntity[] label;
        
        /// <remarks/>
        public int order;
        
        /// <remarks/>
        public int is_default;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductAttributeOptionLabelEntity {
        
        /// <remarks/>
        public string[] store_id;
        
        /// <remarks/>
        public string value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductTypeEntity {
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public string label;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductImageEntity {
        
        /// <remarks/>
        public string file;
        
        /// <remarks/>
        public string label;
        
        /// <remarks/>
        public string position;
        
        /// <remarks/>
        public string exclude;
        
        /// <remarks/>
        public string url;
        
        /// <remarks/>
        public string[] types;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductAttributeMediaTypeEntity {
        
        /// <remarks/>
        public string code;
        
        /// <remarks/>
        public string scope;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductAttributeMediaCreateEntity {
        
        /// <remarks/>
        public catalogProductImageFileEntity file;
        
        /// <remarks/>
        public string label;
        
        /// <remarks/>
        public string position;
        
        /// <remarks/>
        public string[] types;
        
        /// <remarks/>
        public string exclude;
        
        /// <remarks/>
        public string remove;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductImageFileEntity {
        
        /// <remarks/>
        public string content;
        
        /// <remarks/>
        public string mime;
        
        /// <remarks/>
        public string name;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductLinkEntity {
        
        /// <remarks/>
        public string product_id;
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public string set;
        
        /// <remarks/>
        public string sku;
        
        /// <remarks/>
        public string position;
        
        /// <remarks/>
        public string qty;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductLinkAttributeEntity {
        
        /// <remarks/>
        public string code;
        
        /// <remarks/>
        public string type;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductCustomOptionToAdd {
        
        /// <remarks/>
        public string title;
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public string sort_order;
        
        /// <remarks/>
        public int is_require;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_requireSpecified;
        
        /// <remarks/>
        public catalogProductCustomOptionAdditionalFieldsEntity[] additional_fields;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductCustomOptionAdditionalFieldsEntity {
        
        /// <remarks/>
        public string title;
        
        /// <remarks/>
        public string price;
        
        /// <remarks/>
        public string price_type;
        
        /// <remarks/>
        public string sku;
        
        /// <remarks/>
        public string max_characters;
        
        /// <remarks/>
        public string sort_order;
        
        /// <remarks/>
        public string file_extension;
        
        /// <remarks/>
        public string image_size_x;
        
        /// <remarks/>
        public string image_size_y;
        
        /// <remarks/>
        public string value_id;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductCustomOptionToUpdate {
        
        /// <remarks/>
        public string title;
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public string sort_order;
        
        /// <remarks/>
        public int is_require;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_requireSpecified;
        
        /// <remarks/>
        public catalogProductCustomOptionAdditionalFieldsEntity[] additional_fields;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductCustomOptionInfoEntity {
        
        /// <remarks/>
        public string title;
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public string sort_order;
        
        /// <remarks/>
        public int is_require;
        
        /// <remarks/>
        public catalogProductCustomOptionAdditionalFieldsEntity[] additional_fields;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductCustomOptionTypesEntity {
        
        /// <remarks/>
        public string label;
        
        /// <remarks/>
        public string value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductCustomOptionValueInfoEntity {
        
        /// <remarks/>
        public string value_id;
        
        /// <remarks/>
        public string option_id;
        
        /// <remarks/>
        public string sku;
        
        /// <remarks/>
        public string sort_order;
        
        /// <remarks/>
        public string default_price;
        
        /// <remarks/>
        public string default_price_type;
        
        /// <remarks/>
        public string store_price;
        
        /// <remarks/>
        public string store_price_type;
        
        /// <remarks/>
        public string price;
        
        /// <remarks/>
        public string price_type;
        
        /// <remarks/>
        public string default_title;
        
        /// <remarks/>
        public string store_title;
        
        /// <remarks/>
        public string title;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductCustomOptionValueListEntity {
        
        /// <remarks/>
        public string value_id;
        
        /// <remarks/>
        public string title;
        
        /// <remarks/>
        public string price;
        
        /// <remarks/>
        public string price_type;
        
        /// <remarks/>
        public string sku;
        
        /// <remarks/>
        public string sort_order;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductCustomOptionValueAddEntity {
        
        /// <remarks/>
        public string title;
        
        /// <remarks/>
        public string price;
        
        /// <remarks/>
        public string price_type;
        
        /// <remarks/>
        public string sku;
        
        /// <remarks/>
        public string sort_order;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductCustomOptionValueUpdateEntity {
        
        /// <remarks/>
        public string title;
        
        /// <remarks/>
        public string price;
        
        /// <remarks/>
        public string price_type;
        
        /// <remarks/>
        public string sku;
        
        /// <remarks/>
        public string sort_order;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductCustomOptionListEntity {
        
        /// <remarks/>
        public string option_id;
        
        /// <remarks/>
        public string title;
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public string sort_order;
        
        /// <remarks/>
        public int is_require;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class salesOrderListEntity {
        
        /// <remarks/>
        public string increment_id;
        
        /// <remarks/>
        public string store_id;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string customer_id;
        
        /// <remarks/>
        public string tax_amount;
        
        /// <remarks/>
        public string shipping_amount;
        
        /// <remarks/>
        public string discount_amount;
        
        /// <remarks/>
        public string subtotal;
        
        /// <remarks/>
        public string grand_total;
        
        /// <remarks/>
        public string total_paid;
        
        /// <remarks/>
        public string total_refunded;
        
        /// <remarks/>
        public string total_qty_ordered;
        
        /// <remarks/>
        public string total_canceled;
        
        /// <remarks/>
        public string total_invoiced;
        
        /// <remarks/>
        public string total_online_refunded;
        
        /// <remarks/>
        public string total_offline_refunded;
        
        /// <remarks/>
        public string base_tax_amount;
        
        /// <remarks/>
        public string base_shipping_amount;
        
        /// <remarks/>
        public string base_discount_amount;
        
        /// <remarks/>
        public string base_subtotal;
        
        /// <remarks/>
        public string base_grand_total;
        
        /// <remarks/>
        public string base_total_paid;
        
        /// <remarks/>
        public string base_total_refunded;
        
        /// <remarks/>
        public string base_total_qty_ordered;
        
        /// <remarks/>
        public string base_total_canceled;
        
        /// <remarks/>
        public string base_total_invoiced;
        
        /// <remarks/>
        public string base_total_online_refunded;
        
        /// <remarks/>
        public string base_total_offline_refunded;
        
        /// <remarks/>
        public string billing_address_id;
        
        /// <remarks/>
        public string billing_firstname;
        
        /// <remarks/>
        public string billing_lastname;
        
        /// <remarks/>
        public string shipping_address_id;
        
        /// <remarks/>
        public string shipping_firstname;
        
        /// <remarks/>
        public string shipping_lastname;
        
        /// <remarks/>
        public string billing_name;
        
        /// <remarks/>
        public string shipping_name;
        
        /// <remarks/>
        public string store_to_base_rate;
        
        /// <remarks/>
        public string store_to_order_rate;
        
        /// <remarks/>
        public string base_to_global_rate;
        
        /// <remarks/>
        public string base_to_order_rate;
        
        /// <remarks/>
        public string weight;
        
        /// <remarks/>
        public string store_name;
        
        /// <remarks/>
        public string remote_ip;
        
        /// <remarks/>
        public string status;
        
        /// <remarks/>
        public string state;
        
        /// <remarks/>
        public string applied_rule_ids;
        
        /// <remarks/>
        public string global_currency_code;
        
        /// <remarks/>
        public string base_currency_code;
        
        /// <remarks/>
        public string store_currency_code;
        
        /// <remarks/>
        public string order_currency_code;
        
        /// <remarks/>
        public string shipping_method;
        
        /// <remarks/>
        public string shipping_description;
        
        /// <remarks/>
        public string customer_email;
        
        /// <remarks/>
        public string customer_firstname;
        
        /// <remarks/>
        public string customer_lastname;
        
        /// <remarks/>
        public string quote_id;
        
        /// <remarks/>
        public string is_virtual;
        
        /// <remarks/>
        public string customer_group_id;
        
        /// <remarks/>
        public string customer_note_notify;
        
        /// <remarks/>
        public string customer_is_guest;
        
        /// <remarks/>
        public string email_sent;
        
        /// <remarks/>
        public string order_id;
        
        /// <remarks/>
        public string gift_message_id;
        
        /// <remarks/>
        public string coupon_code;
        
        /// <remarks/>
        public string protect_code;
        
        /// <remarks/>
        public string base_discount_canceled;
        
        /// <remarks/>
        public string base_discount_invoiced;
        
        /// <remarks/>
        public string base_discount_refunded;
        
        /// <remarks/>
        public string base_shipping_canceled;
        
        /// <remarks/>
        public string base_shipping_invoiced;
        
        /// <remarks/>
        public string base_shipping_refunded;
        
        /// <remarks/>
        public string base_shipping_tax_amount;
        
        /// <remarks/>
        public string base_shipping_tax_refunded;
        
        /// <remarks/>
        public string base_subtotal_canceled;
        
        /// <remarks/>
        public string base_subtotal_invoiced;
        
        /// <remarks/>
        public string base_subtotal_refunded;
        
        /// <remarks/>
        public string base_tax_canceled;
        
        /// <remarks/>
        public string base_tax_invoiced;
        
        /// <remarks/>
        public string base_tax_refunded;
        
        /// <remarks/>
        public string base_total_invoiced_cost;
        
        /// <remarks/>
        public string discount_canceled;
        
        /// <remarks/>
        public string discount_invoiced;
        
        /// <remarks/>
        public string discount_refunded;
        
        /// <remarks/>
        public string shipping_canceled;
        
        /// <remarks/>
        public string shipping_invoiced;
        
        /// <remarks/>
        public string shipping_refunded;
        
        /// <remarks/>
        public string shipping_tax_amount;
        
        /// <remarks/>
        public string shipping_tax_refunded;
        
        /// <remarks/>
        public string subtotal_canceled;
        
        /// <remarks/>
        public string subtotal_invoiced;
        
        /// <remarks/>
        public string subtotal_refunded;
        
        /// <remarks/>
        public string tax_canceled;
        
        /// <remarks/>
        public string tax_invoiced;
        
        /// <remarks/>
        public string tax_refunded;
        
        /// <remarks/>
        public string can_ship_partially;
        
        /// <remarks/>
        public string can_ship_partially_item;
        
        /// <remarks/>
        public string edit_increment;
        
        /// <remarks/>
        public string forced_do_shipment_with_invoice;
        
        /// <remarks/>
        public string payment_authorization_expiration;
        
        /// <remarks/>
        public string paypal_ipn_customer_notified;
        
        /// <remarks/>
        public string quote_address_id;
        
        /// <remarks/>
        public string adjustment_negative;
        
        /// <remarks/>
        public string adjustment_positive;
        
        /// <remarks/>
        public string base_adjustment_negative;
        
        /// <remarks/>
        public string base_adjustment_positive;
        
        /// <remarks/>
        public string base_shipping_discount_amount;
        
        /// <remarks/>
        public string base_subtotal_incl_tax;
        
        /// <remarks/>
        public string base_total_due;
        
        /// <remarks/>
        public string payment_authorization_amount;
        
        /// <remarks/>
        public string shipping_discount_amount;
        
        /// <remarks/>
        public string subtotal_incl_tax;
        
        /// <remarks/>
        public string total_due;
        
        /// <remarks/>
        public string customer_dob;
        
        /// <remarks/>
        public string customer_middlename;
        
        /// <remarks/>
        public string customer_prefix;
        
        /// <remarks/>
        public string customer_suffix;
        
        /// <remarks/>
        public string customer_taxvat;
        
        /// <remarks/>
        public string discount_description;
        
        /// <remarks/>
        public string ext_customer_id;
        
        /// <remarks/>
        public string ext_order_id;
        
        /// <remarks/>
        public string hold_before_state;
        
        /// <remarks/>
        public string hold_before_status;
        
        /// <remarks/>
        public string original_increment_id;
        
        /// <remarks/>
        public string relation_child_id;
        
        /// <remarks/>
        public string relation_child_real_id;
        
        /// <remarks/>
        public string relation_parent_id;
        
        /// <remarks/>
        public string relation_parent_real_id;
        
        /// <remarks/>
        public string x_forwarded_for;
        
        /// <remarks/>
        public string customer_note;
        
        /// <remarks/>
        public string total_item_count;
        
        /// <remarks/>
        public string customer_gender;
        
        /// <remarks/>
        public string hidden_tax_amount;
        
        /// <remarks/>
        public string base_hidden_tax_amount;
        
        /// <remarks/>
        public string shipping_hidden_tax_amount;
        
        /// <remarks/>
        public string base_shipping_hidden_tax_amount;
        
        /// <remarks/>
        public string hidden_tax_invoiced;
        
        /// <remarks/>
        public string base_hidden_tax_invoiced;
        
        /// <remarks/>
        public string hidden_tax_refunded;
        
        /// <remarks/>
        public string base_hidden_tax_refunded;
        
        /// <remarks/>
        public string shipping_incl_tax;
        
        /// <remarks/>
        public string base_shipping_incl_tax;
        
        /// <remarks/>
        public string base_customer_balance_amount;
        
        /// <remarks/>
        public string customer_balance_amount;
        
        /// <remarks/>
        public string base_customer_balance_invoiced;
        
        /// <remarks/>
        public string customer_balance_invoiced;
        
        /// <remarks/>
        public string base_customer_balance_refunded;
        
        /// <remarks/>
        public string customer_balance_refunded;
        
        /// <remarks/>
        public string base_customer_balance_total_refunded;
        
        /// <remarks/>
        public string customer_balance_total_refunded;
        
        /// <remarks/>
        public string gift_cards;
        
        /// <remarks/>
        public string base_gift_cards_amount;
        
        /// <remarks/>
        public string gift_cards_amount;
        
        /// <remarks/>
        public string base_gift_cards_invoiced;
        
        /// <remarks/>
        public string gift_cards_invoiced;
        
        /// <remarks/>
        public string base_gift_cards_refunded;
        
        /// <remarks/>
        public string gift_cards_refunded;
        
        /// <remarks/>
        public string reward_points_balance;
        
        /// <remarks/>
        public string base_reward_currency_amount;
        
        /// <remarks/>
        public string reward_currency_amount;
        
        /// <remarks/>
        public string base_reward_currency_amount_invoiced;
        
        /// <remarks/>
        public string reward_currency_amount_invoiced;
        
        /// <remarks/>
        public string base_reward_currency_amount_refunded;
        
        /// <remarks/>
        public string reward_currency_amount_refunded;
        
        /// <remarks/>
        public string reward_points_balance_refunded;
        
        /// <remarks/>
        public string reward_points_balance_to_refund;
        
        /// <remarks/>
        public string reward_salesrule_points;
        
        /// <remarks/>
        public string firstname;
        
        /// <remarks/>
        public string lastname;
        
        /// <remarks/>
        public string telephone;
        
        /// <remarks/>
        public string postcode;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class salesOrderEntity {
        
        /// <remarks/>
        public string increment_id;
        
        /// <remarks/>
        public string parent_id;
        
        /// <remarks/>
        public string store_id;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string is_active;
        
        /// <remarks/>
        public string customer_id;
        
        /// <remarks/>
        public string tax_amount;
        
        /// <remarks/>
        public string shipping_amount;
        
        /// <remarks/>
        public string discount_amount;
        
        /// <remarks/>
        public string subtotal;
        
        /// <remarks/>
        public string grand_total;
        
        /// <remarks/>
        public string total_paid;
        
        /// <remarks/>
        public string total_refunded;
        
        /// <remarks/>
        public string total_qty_ordered;
        
        /// <remarks/>
        public string total_canceled;
        
        /// <remarks/>
        public string total_invoiced;
        
        /// <remarks/>
        public string total_online_refunded;
        
        /// <remarks/>
        public string total_offline_refunded;
        
        /// <remarks/>
        public string base_tax_amount;
        
        /// <remarks/>
        public string base_shipping_amount;
        
        /// <remarks/>
        public string base_discount_amount;
        
        /// <remarks/>
        public string base_subtotal;
        
        /// <remarks/>
        public string base_grand_total;
        
        /// <remarks/>
        public string base_total_paid;
        
        /// <remarks/>
        public string base_total_refunded;
        
        /// <remarks/>
        public string base_total_qty_ordered;
        
        /// <remarks/>
        public string base_total_canceled;
        
        /// <remarks/>
        public string base_total_invoiced;
        
        /// <remarks/>
        public string base_total_online_refunded;
        
        /// <remarks/>
        public string base_total_offline_refunded;
        
        /// <remarks/>
        public string billing_address_id;
        
        /// <remarks/>
        public string billing_firstname;
        
        /// <remarks/>
        public string billing_lastname;
        
        /// <remarks/>
        public string shipping_address_id;
        
        /// <remarks/>
        public string shipping_firstname;
        
        /// <remarks/>
        public string shipping_lastname;
        
        /// <remarks/>
        public string billing_name;
        
        /// <remarks/>
        public string shipping_name;
        
        /// <remarks/>
        public string store_to_base_rate;
        
        /// <remarks/>
        public string store_to_order_rate;
        
        /// <remarks/>
        public string base_to_global_rate;
        
        /// <remarks/>
        public string base_to_order_rate;
        
        /// <remarks/>
        public string weight;
        
        /// <remarks/>
        public string store_name;
        
        /// <remarks/>
        public string remote_ip;
        
        /// <remarks/>
        public string status;
        
        /// <remarks/>
        public string state;
        
        /// <remarks/>
        public string applied_rule_ids;
        
        /// <remarks/>
        public string global_currency_code;
        
        /// <remarks/>
        public string base_currency_code;
        
        /// <remarks/>
        public string store_currency_code;
        
        /// <remarks/>
        public string order_currency_code;
        
        /// <remarks/>
        public string shipping_method;
        
        /// <remarks/>
        public string shipping_description;
        
        /// <remarks/>
        public string customer_email;
        
        /// <remarks/>
        public string customer_firstname;
        
        /// <remarks/>
        public string customer_lastname;
        
        /// <remarks/>
        public string quote_id;
        
        /// <remarks/>
        public string is_virtual;
        
        /// <remarks/>
        public string customer_group_id;
        
        /// <remarks/>
        public string customer_note_notify;
        
        /// <remarks/>
        public string customer_is_guest;
        
        /// <remarks/>
        public string email_sent;
        
        /// <remarks/>
        public string order_id;
        
        /// <remarks/>
        public string gift_message_id;
        
        /// <remarks/>
        public string gift_message;
        
        /// <remarks/>
        public salesOrderAddressEntity shipping_address;
        
        /// <remarks/>
        public salesOrderAddressEntity billing_address;
        
        /// <remarks/>
        public salesOrderItemEntity[] items;
        
        /// <remarks/>
        public salesOrderPaymentEntity payment;
        
        /// <remarks/>
        public salesOrderStatusHistoryEntity[] status_history;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class salesOrderAddressEntity {
        
        /// <remarks/>
        public string increment_id;
        
        /// <remarks/>
        public string parent_id;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string is_active;
        
        /// <remarks/>
        public string address_type;
        
        /// <remarks/>
        public string firstname;
        
        /// <remarks/>
        public string lastname;
        
        /// <remarks/>
        public string company;
        
        /// <remarks/>
        public string street;
        
        /// <remarks/>
        public string city;
        
        /// <remarks/>
        public string region;
        
        /// <remarks/>
        public string postcode;
        
        /// <remarks/>
        public string country_id;
        
        /// <remarks/>
        public string telephone;
        
        /// <remarks/>
        public string fax;
        
        /// <remarks/>
        public string region_id;
        
        /// <remarks/>
        public string address_id;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class salesOrderItemEntity {
        
        /// <remarks/>
        public string item_id;
        
        /// <remarks/>
        public string order_id;
        
        /// <remarks/>
        public string quote_item_id;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string product_id;
        
        /// <remarks/>
        public string product_type;
        
        /// <remarks/>
        public string product_options;
        
        /// <remarks/>
        public string weight;
        
        /// <remarks/>
        public string is_virtual;
        
        /// <remarks/>
        public string sku;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public string applied_rule_ids;
        
        /// <remarks/>
        public string free_shipping;
        
        /// <remarks/>
        public string is_qty_decimal;
        
        /// <remarks/>
        public string no_discount;
        
        /// <remarks/>
        public string qty_canceled;
        
        /// <remarks/>
        public string qty_invoiced;
        
        /// <remarks/>
        public string qty_ordered;
        
        /// <remarks/>
        public string qty_refunded;
        
        /// <remarks/>
        public string qty_shipped;
        
        /// <remarks/>
        public string cost;
        
        /// <remarks/>
        public string price;
        
        /// <remarks/>
        public string base_price;
        
        /// <remarks/>
        public string original_price;
        
        /// <remarks/>
        public string base_original_price;
        
        /// <remarks/>
        public string tax_percent;
        
        /// <remarks/>
        public string tax_amount;
        
        /// <remarks/>
        public string base_tax_amount;
        
        /// <remarks/>
        public string tax_invoiced;
        
        /// <remarks/>
        public string base_tax_invoiced;
        
        /// <remarks/>
        public string discount_percent;
        
        /// <remarks/>
        public string discount_amount;
        
        /// <remarks/>
        public string base_discount_amount;
        
        /// <remarks/>
        public string discount_invoiced;
        
        /// <remarks/>
        public string base_discount_invoiced;
        
        /// <remarks/>
        public string amount_refunded;
        
        /// <remarks/>
        public string base_amount_refunded;
        
        /// <remarks/>
        public string row_total;
        
        /// <remarks/>
        public string base_row_total;
        
        /// <remarks/>
        public string row_invoiced;
        
        /// <remarks/>
        public string base_row_invoiced;
        
        /// <remarks/>
        public string row_weight;
        
        /// <remarks/>
        public string gift_message_id;
        
        /// <remarks/>
        public string gift_message;
        
        /// <remarks/>
        public string gift_message_available;
        
        /// <remarks/>
        public string base_tax_before_discount;
        
        /// <remarks/>
        public string tax_before_discount;
        
        /// <remarks/>
        public string weee_tax_applied;
        
        /// <remarks/>
        public string weee_tax_applied_amount;
        
        /// <remarks/>
        public string weee_tax_applied_row_amount;
        
        /// <remarks/>
        public string base_weee_tax_applied_amount;
        
        /// <remarks/>
        public string base_weee_tax_applied_row_amount;
        
        /// <remarks/>
        public string weee_tax_disposition;
        
        /// <remarks/>
        public string weee_tax_row_disposition;
        
        /// <remarks/>
        public string base_weee_tax_disposition;
        
        /// <remarks/>
        public string base_weee_tax_row_disposition;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class salesOrderPaymentEntity {
        
        /// <remarks/>
        public string increment_id;
        
        /// <remarks/>
        public string parent_id;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string is_active;
        
        /// <remarks/>
        public string amount_ordered;
        
        /// <remarks/>
        public string shipping_amount;
        
        /// <remarks/>
        public string base_amount_ordered;
        
        /// <remarks/>
        public string base_shipping_amount;
        
        /// <remarks/>
        public string method;
        
        /// <remarks/>
        public string po_number;
        
        /// <remarks/>
        public string cc_type;
        
        /// <remarks/>
        public string cc_number_enc;
        
        /// <remarks/>
        public string cc_last4;
        
        /// <remarks/>
        public string cc_owner;
        
        /// <remarks/>
        public string cc_exp_month;
        
        /// <remarks/>
        public string cc_exp_year;
        
        /// <remarks/>
        public string cc_ss_start_month;
        
        /// <remarks/>
        public string cc_ss_start_year;
        
        /// <remarks/>
        public string payment_id;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class salesOrderStatusHistoryEntity {
        
        /// <remarks/>
        public string increment_id;
        
        /// <remarks/>
        public string parent_id;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string is_active;
        
        /// <remarks/>
        public string is_customer_notified;
        
        /// <remarks/>
        public string status;
        
        /// <remarks/>
        public string comment;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class salesOrderShipmentEntity {
        
        /// <remarks/>
        public string increment_id;
        
        /// <remarks/>
        public string parent_id;
        
        /// <remarks/>
        public string store_id;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string is_active;
        
        /// <remarks/>
        public string shipping_address_id;
        
        /// <remarks/>
        public string shipping_firstname;
        
        /// <remarks/>
        public string shipping_lastname;
        
        /// <remarks/>
        public string order_id;
        
        /// <remarks/>
        public string order_increment_id;
        
        /// <remarks/>
        public string order_created_at;
        
        /// <remarks/>
        public string total_qty;
        
        /// <remarks/>
        public string shipment_id;
        
        /// <remarks/>
        public salesOrderShipmentItemEntity[] items;
        
        /// <remarks/>
        public salesOrderShipmentTrackEntity[] tracks;
        
        /// <remarks/>
        public salesOrderShipmentCommentEntity[] comments;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class salesOrderShipmentItemEntity {
        
        /// <remarks/>
        public string increment_id;
        
        /// <remarks/>
        public string parent_id;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string is_active;
        
        /// <remarks/>
        public string sku;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public string order_item_id;
        
        /// <remarks/>
        public string product_id;
        
        /// <remarks/>
        public string weight;
        
        /// <remarks/>
        public string price;
        
        /// <remarks/>
        public string qty;
        
        /// <remarks/>
        public string item_id;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class salesOrderShipmentTrackEntity {
        
        /// <remarks/>
        public string increment_id;
        
        /// <remarks/>
        public string parent_id;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string is_active;
        
        /// <remarks/>
        public string carrier_code;
        
        /// <remarks/>
        public string title;
        
        /// <remarks/>
        public string number;
        
        /// <remarks/>
        public string order_id;
        
        /// <remarks/>
        public string track_id;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class salesOrderShipmentCommentEntity {
        
        /// <remarks/>
        public string increment_id;
        
        /// <remarks/>
        public string parent_id;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string is_active;
        
        /// <remarks/>
        public string comment;
        
        /// <remarks/>
        public string is_customer_notified;
        
        /// <remarks/>
        public string comment_id;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class orderItemIdQty {
        
        /// <remarks/>
        public int order_item_id;
        
        /// <remarks/>
        public double qty;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class salesOrderInvoiceEntity {
        
        /// <remarks/>
        public string increment_id;
        
        /// <remarks/>
        public string parent_id;
        
        /// <remarks/>
        public string store_id;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string is_active;
        
        /// <remarks/>
        public string global_currency_code;
        
        /// <remarks/>
        public string base_currency_code;
        
        /// <remarks/>
        public string store_currency_code;
        
        /// <remarks/>
        public string order_currency_code;
        
        /// <remarks/>
        public string store_to_base_rate;
        
        /// <remarks/>
        public string store_to_order_rate;
        
        /// <remarks/>
        public string base_to_global_rate;
        
        /// <remarks/>
        public string base_to_order_rate;
        
        /// <remarks/>
        public string subtotal;
        
        /// <remarks/>
        public string base_subtotal;
        
        /// <remarks/>
        public string base_grand_total;
        
        /// <remarks/>
        public string discount_amount;
        
        /// <remarks/>
        public string base_discount_amount;
        
        /// <remarks/>
        public string shipping_amount;
        
        /// <remarks/>
        public string base_shipping_amount;
        
        /// <remarks/>
        public string tax_amount;
        
        /// <remarks/>
        public string base_tax_amount;
        
        /// <remarks/>
        public string billing_address_id;
        
        /// <remarks/>
        public string billing_firstname;
        
        /// <remarks/>
        public string billing_lastname;
        
        /// <remarks/>
        public string order_id;
        
        /// <remarks/>
        public string order_increment_id;
        
        /// <remarks/>
        public string order_created_at;
        
        /// <remarks/>
        public string state;
        
        /// <remarks/>
        public string grand_total;
        
        /// <remarks/>
        public string invoice_id;
        
        /// <remarks/>
        public salesOrderInvoiceItemEntity[] items;
        
        /// <remarks/>
        public salesOrderInvoiceCommentEntity[] comments;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class salesOrderInvoiceItemEntity {
        
        /// <remarks/>
        public string increment_id;
        
        /// <remarks/>
        public string parent_id;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string is_active;
        
        /// <remarks/>
        public string weee_tax_applied;
        
        /// <remarks/>
        public string qty;
        
        /// <remarks/>
        public string cost;
        
        /// <remarks/>
        public string price;
        
        /// <remarks/>
        public string tax_amount;
        
        /// <remarks/>
        public string row_total;
        
        /// <remarks/>
        public string base_price;
        
        /// <remarks/>
        public string base_tax_amount;
        
        /// <remarks/>
        public string base_row_total;
        
        /// <remarks/>
        public string base_weee_tax_applied_amount;
        
        /// <remarks/>
        public string base_weee_tax_applied_row_amount;
        
        /// <remarks/>
        public string weee_tax_applied_amount;
        
        /// <remarks/>
        public string weee_tax_applied_row_amount;
        
        /// <remarks/>
        public string weee_tax_disposition;
        
        /// <remarks/>
        public string weee_tax_row_disposition;
        
        /// <remarks/>
        public string base_weee_tax_disposition;
        
        /// <remarks/>
        public string base_weee_tax_row_disposition;
        
        /// <remarks/>
        public string sku;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public string order_item_id;
        
        /// <remarks/>
        public string product_id;
        
        /// <remarks/>
        public string item_id;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class salesOrderInvoiceCommentEntity {
        
        /// <remarks/>
        public string increment_id;
        
        /// <remarks/>
        public string parent_id;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string is_active;
        
        /// <remarks/>
        public string comment;
        
        /// <remarks/>
        public string is_customer_notified;
        
        /// <remarks/>
        public string comment_id;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class salesOrderCreditmemoEntity {
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string increment_id;
        
        /// <remarks/>
        public string transaction_id;
        
        /// <remarks/>
        public string global_currency_code;
        
        /// <remarks/>
        public string base_currency_code;
        
        /// <remarks/>
        public string order_currency_code;
        
        /// <remarks/>
        public string store_currency_code;
        
        /// <remarks/>
        public string cybersource_token;
        
        /// <remarks/>
        public string invoice_id;
        
        /// <remarks/>
        public string billing_address_id;
        
        /// <remarks/>
        public string shipping_address_id;
        
        /// <remarks/>
        public string state;
        
        /// <remarks/>
        public string creditmemo_status;
        
        /// <remarks/>
        public string email_sent;
        
        /// <remarks/>
        public string order_id;
        
        /// <remarks/>
        public string tax_amount;
        
        /// <remarks/>
        public string shipping_tax_amount;
        
        /// <remarks/>
        public string base_tax_amount;
        
        /// <remarks/>
        public string base_adjustment_positive;
        
        /// <remarks/>
        public string base_grand_total;
        
        /// <remarks/>
        public string adjustment;
        
        /// <remarks/>
        public string subtotal;
        
        /// <remarks/>
        public string discount_amount;
        
        /// <remarks/>
        public string base_subtotal;
        
        /// <remarks/>
        public string base_adjustment;
        
        /// <remarks/>
        public string base_to_global_rate;
        
        /// <remarks/>
        public string store_to_base_rate;
        
        /// <remarks/>
        public string base_shipping_amount;
        
        /// <remarks/>
        public string adjustment_negative;
        
        /// <remarks/>
        public string subtotal_incl_tax;
        
        /// <remarks/>
        public string shipping_amount;
        
        /// <remarks/>
        public string base_subtotal_incl_tax;
        
        /// <remarks/>
        public string base_adjustment_negative;
        
        /// <remarks/>
        public string grand_total;
        
        /// <remarks/>
        public string base_discount_amount;
        
        /// <remarks/>
        public string base_to_order_rate;
        
        /// <remarks/>
        public string store_to_order_rate;
        
        /// <remarks/>
        public string base_shipping_tax_amount;
        
        /// <remarks/>
        public string adjustment_positive;
        
        /// <remarks/>
        public string store_id;
        
        /// <remarks/>
        public string hidden_tax_amount;
        
        /// <remarks/>
        public string base_hidden_tax_amount;
        
        /// <remarks/>
        public string shipping_hidden_tax_amount;
        
        /// <remarks/>
        public string base_shipping_hidden_tax_amnt;
        
        /// <remarks/>
        public string shipping_incl_tax;
        
        /// <remarks/>
        public string base_shipping_incl_tax;
        
        /// <remarks/>
        public string base_customer_balance_amount;
        
        /// <remarks/>
        public string customer_balance_amount;
        
        /// <remarks/>
        public string bs_customer_bal_total_refunded;
        
        /// <remarks/>
        public string customer_bal_total_refunded;
        
        /// <remarks/>
        public string base_gift_cards_amount;
        
        /// <remarks/>
        public string gift_cards_amount;
        
        /// <remarks/>
        public string gw_base_price;
        
        /// <remarks/>
        public string gw_price;
        
        /// <remarks/>
        public string gw_items_base_price;
        
        /// <remarks/>
        public string gw_items_price;
        
        /// <remarks/>
        public string gw_card_base_price;
        
        /// <remarks/>
        public string gw_card_price;
        
        /// <remarks/>
        public string gw_base_tax_amount;
        
        /// <remarks/>
        public string gw_tax_amount;
        
        /// <remarks/>
        public string gw_items_base_tax_amount;
        
        /// <remarks/>
        public string gw_items_tax_amount;
        
        /// <remarks/>
        public string gw_card_base_tax_amount;
        
        /// <remarks/>
        public string gw_card_tax_amount;
        
        /// <remarks/>
        public string base_reward_currency_amount;
        
        /// <remarks/>
        public string reward_currency_amount;
        
        /// <remarks/>
        public string reward_points_balance;
        
        /// <remarks/>
        public string reward_points_balance_refund;
        
        /// <remarks/>
        public string creditmemo_id;
        
        /// <remarks/>
        public salesOrderCreditmemoItemEntity[] items;
        
        /// <remarks/>
        public salesOrderCreditmemoCommentEntity[] comments;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class salesOrderCreditmemoItemEntity {
        
        /// <remarks/>
        public string item_id;
        
        /// <remarks/>
        public string parent_id;
        
        /// <remarks/>
        public string weee_tax_applied_row_amount;
        
        /// <remarks/>
        public string base_price;
        
        /// <remarks/>
        public string base_weee_tax_row_disposition;
        
        /// <remarks/>
        public string tax_amount;
        
        /// <remarks/>
        public string base_weee_tax_applied_amount;
        
        /// <remarks/>
        public string weee_tax_row_disposition;
        
        /// <remarks/>
        public string base_row_total;
        
        /// <remarks/>
        public string discount_amount;
        
        /// <remarks/>
        public string row_total;
        
        /// <remarks/>
        public string weee_tax_applied_amount;
        
        /// <remarks/>
        public string base_discount_amount;
        
        /// <remarks/>
        public string base_weee_tax_disposition;
        
        /// <remarks/>
        public string price_incl_tax;
        
        /// <remarks/>
        public string base_tax_amount;
        
        /// <remarks/>
        public string weee_tax_disposition;
        
        /// <remarks/>
        public string base_price_incl_tax;
        
        /// <remarks/>
        public string qty;
        
        /// <remarks/>
        public string base_cost;
        
        /// <remarks/>
        public string base_weee_tax_applied_row_amount;
        
        /// <remarks/>
        public string price;
        
        /// <remarks/>
        public string base_row_total_incl_tax;
        
        /// <remarks/>
        public string row_total_incl_tax;
        
        /// <remarks/>
        public string product_id;
        
        /// <remarks/>
        public string order_item_id;
        
        /// <remarks/>
        public string additional_data;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public string weee_tax_applied;
        
        /// <remarks/>
        public string sku;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public string hidden_tax_amount;
        
        /// <remarks/>
        public string base_hidden_tax_amount;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class salesOrderCreditmemoCommentEntity {
        
        /// <remarks/>
        public string parent_id;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string comment;
        
        /// <remarks/>
        public string is_customer_notified;
        
        /// <remarks/>
        public string comment_id;
        
        /// <remarks/>
        public string is_visible_on_front;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class salesOrderCreditmemoData {
        
        /// <remarks/>
        public orderItemIdQty[] qtys;
        
        /// <remarks/>
        public double shipping_amount;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool shipping_amountSpecified;
        
        /// <remarks/>
        public double adjustment_positive;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool adjustment_positiveSpecified;
        
        /// <remarks/>
        public double adjustment_negative;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool adjustment_negativeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogInventoryStockItemEntity {
        
        /// <remarks/>
        public string product_id;
        
        /// <remarks/>
        public string sku;
        
        /// <remarks/>
        public string qty;
        
        /// <remarks/>
        public string is_in_stock;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class shoppingCartInfoEntity {
        
        /// <remarks/>
        public string store_id;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string converted_at;
        
        /// <remarks/>
        public int quote_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool quote_idSpecified;
        
        /// <remarks/>
        public int is_active;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_activeSpecified;
        
        /// <remarks/>
        public int is_virtual;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_virtualSpecified;
        
        /// <remarks/>
        public int is_multi_shipping;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_multi_shippingSpecified;
        
        /// <remarks/>
        public double items_count;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool items_countSpecified;
        
        /// <remarks/>
        public double items_qty;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool items_qtySpecified;
        
        /// <remarks/>
        public string orig_order_id;
        
        /// <remarks/>
        public string store_to_base_rate;
        
        /// <remarks/>
        public string store_to_quote_rate;
        
        /// <remarks/>
        public string base_currency_code;
        
        /// <remarks/>
        public string store_currency_code;
        
        /// <remarks/>
        public string quote_currency_code;
        
        /// <remarks/>
        public string grand_total;
        
        /// <remarks/>
        public string base_grand_total;
        
        /// <remarks/>
        public string checkout_method;
        
        /// <remarks/>
        public string customer_id;
        
        /// <remarks/>
        public string customer_tax_class_id;
        
        /// <remarks/>
        public int customer_group_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool customer_group_idSpecified;
        
        /// <remarks/>
        public string customer_email;
        
        /// <remarks/>
        public string customer_prefix;
        
        /// <remarks/>
        public string customer_firstname;
        
        /// <remarks/>
        public string customer_middlename;
        
        /// <remarks/>
        public string customer_lastname;
        
        /// <remarks/>
        public string customer_suffix;
        
        /// <remarks/>
        public string customer_note;
        
        /// <remarks/>
        public string customer_note_notify;
        
        /// <remarks/>
        public string customer_is_guest;
        
        /// <remarks/>
        public string applied_rule_ids;
        
        /// <remarks/>
        public string reserved_order_id;
        
        /// <remarks/>
        public string password_hash;
        
        /// <remarks/>
        public string coupon_code;
        
        /// <remarks/>
        public string global_currency_code;
        
        /// <remarks/>
        public double base_to_global_rate;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool base_to_global_rateSpecified;
        
        /// <remarks/>
        public double base_to_quote_rate;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool base_to_quote_rateSpecified;
        
        /// <remarks/>
        public string customer_taxvat;
        
        /// <remarks/>
        public string customer_gender;
        
        /// <remarks/>
        public double subtotal;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool subtotalSpecified;
        
        /// <remarks/>
        public double base_subtotal;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool base_subtotalSpecified;
        
        /// <remarks/>
        public double subtotal_with_discount;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool subtotal_with_discountSpecified;
        
        /// <remarks/>
        public double base_subtotal_with_discount;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool base_subtotal_with_discountSpecified;
        
        /// <remarks/>
        public string ext_shipping_info;
        
        /// <remarks/>
        public string gift_message_id;
        
        /// <remarks/>
        public string gift_message;
        
        /// <remarks/>
        public double customer_balance_amount_used;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool customer_balance_amount_usedSpecified;
        
        /// <remarks/>
        public double base_customer_balance_amount_used;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool base_customer_balance_amount_usedSpecified;
        
        /// <remarks/>
        public string use_customer_balance;
        
        /// <remarks/>
        public string gift_cards_amount;
        
        /// <remarks/>
        public string base_gift_cards_amount;
        
        /// <remarks/>
        public string gift_cards_amount_used;
        
        /// <remarks/>
        public string use_reward_points;
        
        /// <remarks/>
        public string reward_points_balance;
        
        /// <remarks/>
        public string base_reward_currency_amount;
        
        /// <remarks/>
        public string reward_currency_amount;
        
        /// <remarks/>
        public shoppingCartAddressEntity shipping_address;
        
        /// <remarks/>
        public shoppingCartAddressEntity billing_address;
        
        /// <remarks/>
        public shoppingCartItemEntity[] items;
        
        /// <remarks/>
        public shoppingCartPaymentEntity payment;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class shoppingCartAddressEntity {
        
        /// <remarks/>
        public string address_id;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string customer_id;
        
        /// <remarks/>
        public int save_in_address_book;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool save_in_address_bookSpecified;
        
        /// <remarks/>
        public string customer_address_id;
        
        /// <remarks/>
        public string address_type;
        
        /// <remarks/>
        public string email;
        
        /// <remarks/>
        public string prefix;
        
        /// <remarks/>
        public string firstname;
        
        /// <remarks/>
        public string middlename;
        
        /// <remarks/>
        public string lastname;
        
        /// <remarks/>
        public string suffix;
        
        /// <remarks/>
        public string company;
        
        /// <remarks/>
        public string street;
        
        /// <remarks/>
        public string city;
        
        /// <remarks/>
        public string region;
        
        /// <remarks/>
        public string region_id;
        
        /// <remarks/>
        public string postcode;
        
        /// <remarks/>
        public string country_id;
        
        /// <remarks/>
        public string telephone;
        
        /// <remarks/>
        public string fax;
        
        /// <remarks/>
        public int same_as_billing;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool same_as_billingSpecified;
        
        /// <remarks/>
        public int free_shipping;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool free_shippingSpecified;
        
        /// <remarks/>
        public string shipping_method;
        
        /// <remarks/>
        public string shipping_description;
        
        /// <remarks/>
        public double weight;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool weightSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class shoppingCartItemEntity {
        
        /// <remarks/>
        public string item_id;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string product_id;
        
        /// <remarks/>
        public string store_id;
        
        /// <remarks/>
        public string parent_item_id;
        
        /// <remarks/>
        public int is_virtual;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_virtualSpecified;
        
        /// <remarks/>
        public string sku;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public string applied_rule_ids;
        
        /// <remarks/>
        public string additional_data;
        
        /// <remarks/>
        public string free_shipping;
        
        /// <remarks/>
        public string is_qty_decimal;
        
        /// <remarks/>
        public string no_discount;
        
        /// <remarks/>
        public double weight;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool weightSpecified;
        
        /// <remarks/>
        public double qty;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool qtySpecified;
        
        /// <remarks/>
        public double price;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool priceSpecified;
        
        /// <remarks/>
        public double base_price;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool base_priceSpecified;
        
        /// <remarks/>
        public double custom_price;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool custom_priceSpecified;
        
        /// <remarks/>
        public double discount_percent;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool discount_percentSpecified;
        
        /// <remarks/>
        public double discount_amount;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool discount_amountSpecified;
        
        /// <remarks/>
        public double base_discount_amount;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool base_discount_amountSpecified;
        
        /// <remarks/>
        public double tax_percent;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool tax_percentSpecified;
        
        /// <remarks/>
        public double tax_amount;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool tax_amountSpecified;
        
        /// <remarks/>
        public double base_tax_amount;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool base_tax_amountSpecified;
        
        /// <remarks/>
        public double row_total;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool row_totalSpecified;
        
        /// <remarks/>
        public double base_row_total;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool base_row_totalSpecified;
        
        /// <remarks/>
        public double row_total_with_discount;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool row_total_with_discountSpecified;
        
        /// <remarks/>
        public double row_weight;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool row_weightSpecified;
        
        /// <remarks/>
        public string product_type;
        
        /// <remarks/>
        public double base_tax_before_discount;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool base_tax_before_discountSpecified;
        
        /// <remarks/>
        public double tax_before_discount;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool tax_before_discountSpecified;
        
        /// <remarks/>
        public double original_custom_price;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool original_custom_priceSpecified;
        
        /// <remarks/>
        public double base_cost;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool base_costSpecified;
        
        /// <remarks/>
        public double price_incl_tax;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool price_incl_taxSpecified;
        
        /// <remarks/>
        public double base_price_incl_tax;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool base_price_incl_taxSpecified;
        
        /// <remarks/>
        public double row_total_incl_tax;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool row_total_incl_taxSpecified;
        
        /// <remarks/>
        public double base_row_total_incl_tax;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool base_row_total_incl_taxSpecified;
        
        /// <remarks/>
        public string gift_message_id;
        
        /// <remarks/>
        public string gift_message;
        
        /// <remarks/>
        public string gift_message_available;
        
        /// <remarks/>
        public double weee_tax_applied;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool weee_tax_appliedSpecified;
        
        /// <remarks/>
        public double weee_tax_applied_amount;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool weee_tax_applied_amountSpecified;
        
        /// <remarks/>
        public double weee_tax_applied_row_amount;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool weee_tax_applied_row_amountSpecified;
        
        /// <remarks/>
        public double base_weee_tax_applied_amount;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool base_weee_tax_applied_amountSpecified;
        
        /// <remarks/>
        public double base_weee_tax_applied_row_amount;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool base_weee_tax_applied_row_amountSpecified;
        
        /// <remarks/>
        public double weee_tax_disposition;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool weee_tax_dispositionSpecified;
        
        /// <remarks/>
        public double weee_tax_row_disposition;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool weee_tax_row_dispositionSpecified;
        
        /// <remarks/>
        public double base_weee_tax_disposition;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool base_weee_tax_dispositionSpecified;
        
        /// <remarks/>
        public double base_weee_tax_row_disposition;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool base_weee_tax_row_dispositionSpecified;
        
        /// <remarks/>
        public string tax_class_id;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class shoppingCartPaymentEntity {
        
        /// <remarks/>
        public string payment_id;
        
        /// <remarks/>
        public string created_at;
        
        /// <remarks/>
        public string updated_at;
        
        /// <remarks/>
        public string method;
        
        /// <remarks/>
        public string cc_type;
        
        /// <remarks/>
        public string cc_number_enc;
        
        /// <remarks/>
        public string cc_last4;
        
        /// <remarks/>
        public string cc_cid_enc;
        
        /// <remarks/>
        public string cc_owner;
        
        /// <remarks/>
        public string cc_exp_month;
        
        /// <remarks/>
        public string cc_exp_year;
        
        /// <remarks/>
        public string cc_ss_owner;
        
        /// <remarks/>
        public string cc_ss_start_month;
        
        /// <remarks/>
        public string cc_ss_start_year;
        
        /// <remarks/>
        public string cc_ss_issue;
        
        /// <remarks/>
        public string po_number;
        
        /// <remarks/>
        public string additional_data;
        
        /// <remarks/>
        public string additional_information;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class shoppingCartTotalsEntity {
        
        /// <remarks/>
        public string title;
        
        /// <remarks/>
        public double amount;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool amountSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class shoppingCartLicenseEntity {
        
        /// <remarks/>
        public string agreement_id;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public string content;
        
        /// <remarks/>
        public int is_active;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_activeSpecified;
        
        /// <remarks/>
        public int is_html;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_htmlSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class shoppingCartProductEntity {
        
        /// <remarks/>
        public string product_id;
        
        /// <remarks/>
        public string sku;
        
        /// <remarks/>
        public double qty;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool qtySpecified;
        
        /// <remarks/>
        public associativeEntity[] options;
        
        /// <remarks/>
        public associativeEntity[] bundle_option;
        
        /// <remarks/>
        public associativeEntity[] bundle_option_qty;
        
        /// <remarks/>
        public string[] links;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class shoppingCartCustomerEntity {
        
        /// <remarks/>
        public string mode;
        
        /// <remarks/>
        public int customer_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool customer_idSpecified;
        
        /// <remarks/>
        public string email;
        
        /// <remarks/>
        public string firstname;
        
        /// <remarks/>
        public string lastname;
        
        /// <remarks/>
        public string password;
        
        /// <remarks/>
        public string confirmation;
        
        /// <remarks/>
        public int website_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool website_idSpecified;
        
        /// <remarks/>
        public int store_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool store_idSpecified;
        
        /// <remarks/>
        public int group_id;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool group_idSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class shoppingCartCustomerAddressEntity {
        
        /// <remarks/>
        public string mode;
        
        /// <remarks/>
        public string address_id;
        
        /// <remarks/>
        public string firstname;
        
        /// <remarks/>
        public string lastname;
        
        /// <remarks/>
        public string company;
        
        /// <remarks/>
        public string street;
        
        /// <remarks/>
        public string city;
        
        /// <remarks/>
        public string region;
        
        /// <remarks/>
        public string region_id;
        
        /// <remarks/>
        public string postcode;
        
        /// <remarks/>
        public string country_id;
        
        /// <remarks/>
        public string telephone;
        
        /// <remarks/>
        public string fax;
        
        /// <remarks/>
        public int is_default_billing;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_default_billingSpecified;
        
        /// <remarks/>
        public int is_default_shipping;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_default_shippingSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class shoppingCartShippingMethodEntity {
        
        /// <remarks/>
        public string code;
        
        /// <remarks/>
        public string carrier;
        
        /// <remarks/>
        public string carrier_title;
        
        /// <remarks/>
        public string method;
        
        /// <remarks/>
        public string method_title;
        
        /// <remarks/>
        public string method_description;
        
        /// <remarks/>
        public double price;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool priceSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class shoppingCartPaymentMethodEntity {
        
        /// <remarks/>
        public string po_number;
        
        /// <remarks/>
        public string method;
        
        /// <remarks/>
        public string cc_cid;
        
        /// <remarks/>
        public string cc_owner;
        
        /// <remarks/>
        public string cc_number;
        
        /// <remarks/>
        public string cc_type;
        
        /// <remarks/>
        public string cc_exp_year;
        
        /// <remarks/>
        public string cc_exp_month;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class shoppingCartPaymentMethodResponseEntity {
        
        /// <remarks/>
        public string code;
        
        /// <remarks/>
        public string title;
        
        /// <remarks/>
        public associativeEntity[] cc_types;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductTagListEntity {
        
        /// <remarks/>
        public string tag_id;
        
        /// <remarks/>
        public string name;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductTagInfoEntity {
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public string status;
        
        /// <remarks/>
        public string base_popularity;
        
        /// <remarks/>
        public associativeEntity[] products;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductTagAddEntity {
        
        /// <remarks/>
        public string tag;
        
        /// <remarks/>
        public string product_id;
        
        /// <remarks/>
        public string customer_id;
        
        /// <remarks/>
        public string store;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductTagUpdateEntity {
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public string status;
        
        /// <remarks/>
        public string base_popularity;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class giftMessageEntity {
        
        /// <remarks/>
        public string from;
        
        /// <remarks/>
        public string to;
        
        /// <remarks/>
        public string message;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class giftMessageResponse {
        
        /// <remarks/>
        public string entityId;
        
        /// <remarks/>
        public bool result;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool resultSpecified;
        
        /// <remarks/>
        public string error;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class giftMessageAssociativeProductsEntity {
        
        /// <remarks/>
        public shoppingCartProductEntity product;
        
        /// <remarks/>
        public giftMessageEntity message;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductDownloadableLinkAddEntity {
        
        /// <remarks/>
        public string title;
        
        /// <remarks/>
        public string price;
        
        /// <remarks/>
        public int is_unlimited;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_unlimitedSpecified;
        
        /// <remarks/>
        public int number_of_downloads;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool number_of_downloadsSpecified;
        
        /// <remarks/>
        public int is_shareable;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_shareableSpecified;
        
        /// <remarks/>
        public catalogProductDownloadableLinkAddSampleEntity sample;
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public catalogProductDownloadableLinkFileEntity file;
        
        /// <remarks/>
        public string link_url;
        
        /// <remarks/>
        public string sample_url;
        
        /// <remarks/>
        public int sort_order;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool sort_orderSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductDownloadableLinkAddSampleEntity {
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public catalogProductDownloadableLinkFileEntity file;
        
        /// <remarks/>
        public string url;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductDownloadableLinkFileEntity {
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public string base64_content;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductDownloadableLinkInfoEntity {
        
        /// <remarks/>
        public catalogProductDownloadableLinkEntity[] links;
        
        /// <remarks/>
        public catalogProductDownloadableLinkSampleEntity[] samples;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductDownloadableLinkEntity {
        
        /// <remarks/>
        public string link_id;
        
        /// <remarks/>
        public string title;
        
        /// <remarks/>
        public string price;
        
        /// <remarks/>
        public int number_of_downloads;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool number_of_downloadsSpecified;
        
        /// <remarks/>
        public int is_unlimited;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnore()]
        public bool is_unlimitedSpecified;
        
        /// <remarks/>
        public int is_shareable;
        
        /// <remarks/>
        public string link_url;
        
        /// <remarks/>
        public string link_type;
        
        /// <remarks/>
        public string sample_file;
        
        /// <remarks/>
        public string sample_url;
        
        /// <remarks/>
        public string sample_type;
        
        /// <remarks/>
        public int sort_order;
        
        /// <remarks/>
        public catalogProductDownloadableLinkFileInfoEntity[] file_save;
        
        /// <remarks/>
        public catalogProductDownloadableLinkFileInfoEntity[] sample_file_save;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductDownloadableLinkFileInfoEntity {
        
        /// <remarks/>
        public string file;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public int size;
        
        /// <remarks/>
        public string status;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapType(Namespace="urn:Magento")]
    public partial class catalogProductDownloadableLinkSampleEntity {
        
        /// <remarks/>
        public string sample_id;
        
        /// <remarks/>
        public string product_id;
        
        /// <remarks/>
        public string sample_file;
        
        /// <remarks/>
        public string sample_url;
        
        /// <remarks/>
        public string sample_type;
        
        /// <remarks/>
        public string sort_order;
        
        /// <remarks/>
        public string default_title;
        
        /// <remarks/>
        public string store_title;
        
        /// <remarks/>
        public string title;
    }
    
    public partial class endSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal endSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void endSessionCompletedEventHandler(object sender, endSessionCompletedEventArgs args);
    
    public partial class loginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void loginCompletedEventHandler(object sender, loginCompletedEventArgs args);
    
    public partial class startSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal startSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void startSessionCompletedEventHandler(object sender, startSessionCompletedEventArgs args);
    
    public partial class resourcesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal resourcesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public apiEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((apiEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void resourcesCompletedEventHandler(object sender, resourcesCompletedEventArgs args);
    
    public partial class globalFaultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal globalFaultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public existsFaltureEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((existsFaltureEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void globalFaultsCompletedEventHandler(object sender, globalFaultsCompletedEventArgs args);
    
    public partial class resourceFaultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal resourceFaultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public existsFaltureEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((existsFaltureEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void resourceFaultsCompletedEventHandler(object sender, resourceFaultsCompletedEventArgs args);
    
    public partial class storeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal storeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public storeEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((storeEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void storeListCompletedEventHandler(object sender, storeListCompletedEventArgs args);
    
    public partial class storeInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal storeInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public storeEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((storeEntity)(this.results[0]));
            }
        }
    }
    
    public delegate void storeInfoCompletedEventHandler(object sender, storeInfoCompletedEventArgs args);
    
    public partial class magentoInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal magentoInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public magentoInfoEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((magentoInfoEntity)(this.results[0]));
            }
        }
    }
    
    public delegate void magentoInfoCompletedEventHandler(object sender, magentoInfoCompletedEventArgs args);
    
    public partial class directoryCountryListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal directoryCountryListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public directoryCountryEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((directoryCountryEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void directoryCountryListCompletedEventHandler(object sender, directoryCountryListCompletedEventArgs args);
    
    public partial class directoryRegionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal directoryRegionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public directoryRegionEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((directoryRegionEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void directoryRegionListCompletedEventHandler(object sender, directoryRegionListCompletedEventArgs args);
    
    public partial class customerCustomerListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal customerCustomerListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public customerCustomerEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((customerCustomerEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void customerCustomerListCompletedEventHandler(object sender, customerCustomerListCompletedEventArgs args);
    
    public partial class customerCustomerCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal customerCustomerCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void customerCustomerCreateCompletedEventHandler(object sender, customerCustomerCreateCompletedEventArgs args);
    
    public partial class customerCustomerInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal customerCustomerInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public customerCustomerEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((customerCustomerEntity)(this.results[0]));
            }
        }
    }
    
    public delegate void customerCustomerInfoCompletedEventHandler(object sender, customerCustomerInfoCompletedEventArgs args);
    
    public partial class customerCustomerUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal customerCustomerUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void customerCustomerUpdateCompletedEventHandler(object sender, customerCustomerUpdateCompletedEventArgs args);
    
    public partial class customerCustomerDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal customerCustomerDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void customerCustomerDeleteCompletedEventHandler(object sender, customerCustomerDeleteCompletedEventArgs args);
    
    public partial class customerGroupListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal customerGroupListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public customerGroupEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((customerGroupEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void customerGroupListCompletedEventHandler(object sender, customerGroupListCompletedEventArgs args);
    
    public partial class customerAddressListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal customerAddressListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public customerAddressEntityItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((customerAddressEntityItem[])(this.results[0]));
            }
        }
    }
    
    public delegate void customerAddressListCompletedEventHandler(object sender, customerAddressListCompletedEventArgs args);
    
    public partial class customerAddressCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal customerAddressCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void customerAddressCreateCompletedEventHandler(object sender, customerAddressCreateCompletedEventArgs args);
    
    public partial class customerAddressInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal customerAddressInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public customerAddressEntityItem Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((customerAddressEntityItem)(this.results[0]));
            }
        }
    }
    
    public delegate void customerAddressInfoCompletedEventHandler(object sender, customerAddressInfoCompletedEventArgs args);
    
    public partial class customerAddressUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal customerAddressUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void customerAddressUpdateCompletedEventHandler(object sender, customerAddressUpdateCompletedEventArgs args);
    
    public partial class customerAddressDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal customerAddressDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void customerAddressDeleteCompletedEventHandler(object sender, customerAddressDeleteCompletedEventArgs args);
    
    public partial class catalogCategoryCurrentStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogCategoryCurrentStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogCategoryCurrentStoreCompletedEventHandler(object sender, catalogCategoryCurrentStoreCompletedEventArgs args);
    
    public partial class catalogCategoryTreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogCategoryTreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogCategoryTree Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogCategoryTree)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogCategoryTreeCompletedEventHandler(object sender, catalogCategoryTreeCompletedEventArgs args);
    
    public partial class catalogCategoryLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogCategoryLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogCategoryEntityNoChildren[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogCategoryEntityNoChildren[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogCategoryLevelCompletedEventHandler(object sender, catalogCategoryLevelCompletedEventArgs args);
    
    public partial class catalogCategoryInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogCategoryInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogCategoryInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogCategoryInfo)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogCategoryInfoCompletedEventHandler(object sender, catalogCategoryInfoCompletedEventArgs args);
    
    public partial class catalogCategoryCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogCategoryCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogCategoryCreateCompletedEventHandler(object sender, catalogCategoryCreateCompletedEventArgs args);
    
    public partial class catalogCategoryUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogCategoryUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogCategoryUpdateCompletedEventHandler(object sender, catalogCategoryUpdateCompletedEventArgs args);
    
    public partial class catalogCategoryMoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogCategoryMoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogCategoryMoveCompletedEventHandler(object sender, catalogCategoryMoveCompletedEventArgs args);
    
    public partial class catalogCategoryDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogCategoryDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogCategoryDeleteCompletedEventHandler(object sender, catalogCategoryDeleteCompletedEventArgs args);
    
    public partial class catalogCategoryAssignedProductsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogCategoryAssignedProductsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogAssignedProduct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogAssignedProduct[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogCategoryAssignedProductsCompletedEventHandler(object sender, catalogCategoryAssignedProductsCompletedEventArgs args);
    
    public partial class catalogCategoryAssignProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogCategoryAssignProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogCategoryAssignProductCompletedEventHandler(object sender, catalogCategoryAssignProductCompletedEventArgs args);
    
    public partial class catalogCategoryUpdateProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogCategoryUpdateProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogCategoryUpdateProductCompletedEventHandler(object sender, catalogCategoryUpdateProductCompletedEventArgs args);
    
    public partial class catalogCategoryRemoveProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogCategoryRemoveProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogCategoryRemoveProductCompletedEventHandler(object sender, catalogCategoryRemoveProductCompletedEventArgs args);
    
    public partial class catalogProductCurrentStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductCurrentStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductCurrentStoreCompletedEventHandler(object sender, catalogProductCurrentStoreCompletedEventArgs args);
    
    public partial class catalogProductListOfAdditionalAttributesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductListOfAdditionalAttributesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogAttributeEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogAttributeEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductListOfAdditionalAttributesCompletedEventHandler(object sender, catalogProductListOfAdditionalAttributesCompletedEventArgs args);
    
    public partial class catalogProductListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductListCompletedEventHandler(object sender, catalogProductListCompletedEventArgs args);
    
    public partial class catalogProductInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductReturnEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductReturnEntity)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductInfoCompletedEventHandler(object sender, catalogProductInfoCompletedEventArgs args);
    
    public partial class catalogProductCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductCreateCompletedEventHandler(object sender, catalogProductCreateCompletedEventArgs args);
    
    public partial class catalogProductUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductUpdateCompletedEventHandler(object sender, catalogProductUpdateCompletedEventArgs args);
    
    public partial class catalogProductMultiUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductMultiUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductMultiUpdateCompletedEventHandler(object sender, catalogProductMultiUpdateCompletedEventArgs args);
    
    public partial class catalogProductSetSpecialPriceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductSetSpecialPriceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductSetSpecialPriceCompletedEventHandler(object sender, catalogProductSetSpecialPriceCompletedEventArgs args);
    
    public partial class catalogProductGetSpecialPriceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductGetSpecialPriceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductSpecialPriceReturnEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductSpecialPriceReturnEntity)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductGetSpecialPriceCompletedEventHandler(object sender, catalogProductGetSpecialPriceCompletedEventArgs args);
    
    public partial class catalogProductDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductDeleteCompletedEventHandler(object sender, catalogProductDeleteCompletedEventArgs args);
    
    public partial class catalogProductAttributeCurrentStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeCurrentStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeCurrentStoreCompletedEventHandler(object sender, catalogProductAttributeCurrentStoreCompletedEventArgs args);
    
    public partial class catalogProductAttributeSetCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeSetCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeSetCreateCompletedEventHandler(object sender, catalogProductAttributeSetCreateCompletedEventArgs args);
    
    public partial class catalogProductAttributeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogAttributeEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogAttributeEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeListCompletedEventHandler(object sender, catalogProductAttributeListCompletedEventArgs args);
    
    public partial class catalogProductAttributeOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeOptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogAttributeOptionEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogAttributeOptionEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeOptionsCompletedEventHandler(object sender, catalogProductAttributeOptionsCompletedEventArgs args);
    
    public partial class catalogProductAttributeSetRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeSetRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeSetRemoveCompletedEventHandler(object sender, catalogProductAttributeSetRemoveCompletedEventArgs args);
    
    public partial class catalogProductAttributeSetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeSetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductAttributeSetEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductAttributeSetEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeSetListCompletedEventHandler(object sender, catalogProductAttributeSetListCompletedEventArgs args);
    
    public partial class catalogProductAttributeSetAttributeAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeSetAttributeAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeSetAttributeAddCompletedEventHandler(object sender, catalogProductAttributeSetAttributeAddCompletedEventArgs args);
    
    public partial class catalogProductAttributeSetAttributeRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeSetAttributeRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeSetAttributeRemoveCompletedEventHandler(object sender, catalogProductAttributeSetAttributeRemoveCompletedEventArgs args);
    
    public partial class catalogProductAttributeSetGroupAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeSetGroupAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeSetGroupAddCompletedEventHandler(object sender, catalogProductAttributeSetGroupAddCompletedEventArgs args);
    
    public partial class catalogProductAttributeSetGroupRenameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeSetGroupRenameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeSetGroupRenameCompletedEventHandler(object sender, catalogProductAttributeSetGroupRenameCompletedEventArgs args);
    
    public partial class catalogProductAttributeSetGroupRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeSetGroupRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeSetGroupRemoveCompletedEventHandler(object sender, catalogProductAttributeSetGroupRemoveCompletedEventArgs args);
    
    public partial class catalogProductAttributeTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogAttributeOptionEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogAttributeOptionEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeTypesCompletedEventHandler(object sender, catalogProductAttributeTypesCompletedEventArgs args);
    
    public partial class catalogProductAttributeCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeCreateCompletedEventHandler(object sender, catalogProductAttributeCreateCompletedEventArgs args);
    
    public partial class catalogCategoryAttributeCurrentStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogCategoryAttributeCurrentStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogCategoryAttributeCurrentStoreCompletedEventHandler(object sender, catalogCategoryAttributeCurrentStoreCompletedEventArgs args);
    
    public partial class catalogProductAttributeMediaCurrentStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeMediaCurrentStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeMediaCurrentStoreCompletedEventHandler(object sender, catalogProductAttributeMediaCurrentStoreCompletedEventArgs args);
    
    public partial class catalogProductAttributeRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeRemoveCompletedEventHandler(object sender, catalogProductAttributeRemoveCompletedEventArgs args);
    
    public partial class catalogProductAttributeInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductAttributeEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductAttributeEntity)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeInfoCompletedEventHandler(object sender, catalogProductAttributeInfoCompletedEventArgs args);
    
    public partial class catalogProductAttributeUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeUpdateCompletedEventHandler(object sender, catalogProductAttributeUpdateCompletedEventArgs args);
    
    public partial class catalogProductAttributeAddOptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeAddOptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeAddOptionCompletedEventHandler(object sender, catalogProductAttributeAddOptionCompletedEventArgs args);
    
    public partial class catalogProductAttributeRemoveOptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeRemoveOptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeRemoveOptionCompletedEventHandler(object sender, catalogProductAttributeRemoveOptionCompletedEventArgs args);
    
    public partial class catalogProductTypeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductTypeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductTypeEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductTypeEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductTypeListCompletedEventHandler(object sender, catalogProductTypeListCompletedEventArgs args);
    
    public partial class catalogProductAttributeTierPriceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeTierPriceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductTierPriceEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductTierPriceEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeTierPriceInfoCompletedEventHandler(object sender, catalogProductAttributeTierPriceInfoCompletedEventArgs args);
    
    public partial class catalogProductAttributeTierPriceUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeTierPriceUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeTierPriceUpdateCompletedEventHandler(object sender, catalogProductAttributeTierPriceUpdateCompletedEventArgs args);
    
    public partial class catalogCategoryAttributeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogCategoryAttributeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogAttributeEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogAttributeEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogCategoryAttributeListCompletedEventHandler(object sender, catalogCategoryAttributeListCompletedEventArgs args);
    
    public partial class catalogCategoryAttributeOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogCategoryAttributeOptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogAttributeOptionEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogAttributeOptionEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogCategoryAttributeOptionsCompletedEventHandler(object sender, catalogCategoryAttributeOptionsCompletedEventArgs args);
    
    public partial class catalogProductAttributeMediaListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeMediaListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductImageEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductImageEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeMediaListCompletedEventHandler(object sender, catalogProductAttributeMediaListCompletedEventArgs args);
    
    public partial class catalogProductAttributeMediaInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeMediaInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductImageEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductImageEntity)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeMediaInfoCompletedEventHandler(object sender, catalogProductAttributeMediaInfoCompletedEventArgs args);
    
    public partial class catalogProductAttributeMediaTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeMediaTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductAttributeMediaTypeEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductAttributeMediaTypeEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeMediaTypesCompletedEventHandler(object sender, catalogProductAttributeMediaTypesCompletedEventArgs args);
    
    public partial class catalogProductAttributeMediaCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeMediaCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeMediaCreateCompletedEventHandler(object sender, catalogProductAttributeMediaCreateCompletedEventArgs args);
    
    public partial class catalogProductAttributeMediaUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeMediaUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeMediaUpdateCompletedEventHandler(object sender, catalogProductAttributeMediaUpdateCompletedEventArgs args);
    
    public partial class catalogProductAttributeMediaRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductAttributeMediaRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductAttributeMediaRemoveCompletedEventHandler(object sender, catalogProductAttributeMediaRemoveCompletedEventArgs args);
    
    public partial class catalogProductLinkListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductLinkListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductLinkEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductLinkEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductLinkListCompletedEventHandler(object sender, catalogProductLinkListCompletedEventArgs args);
    
    public partial class catalogProductLinkAssignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductLinkAssignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductLinkAssignCompletedEventHandler(object sender, catalogProductLinkAssignCompletedEventArgs args);
    
    public partial class catalogProductLinkUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductLinkUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductLinkUpdateCompletedEventHandler(object sender, catalogProductLinkUpdateCompletedEventArgs args);
    
    public partial class catalogProductLinkRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductLinkRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductLinkRemoveCompletedEventHandler(object sender, catalogProductLinkRemoveCompletedEventArgs args);
    
    public partial class catalogProductLinkTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductLinkTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductLinkTypesCompletedEventHandler(object sender, catalogProductLinkTypesCompletedEventArgs args);
    
    public partial class catalogProductLinkAttributesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductLinkAttributesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductLinkAttributeEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductLinkAttributeEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductLinkAttributesCompletedEventHandler(object sender, catalogProductLinkAttributesCompletedEventArgs args);
    
    public partial class catalogProductCustomOptionAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductCustomOptionAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductCustomOptionAddCompletedEventHandler(object sender, catalogProductCustomOptionAddCompletedEventArgs args);
    
    public partial class catalogProductCustomOptionUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductCustomOptionUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductCustomOptionUpdateCompletedEventHandler(object sender, catalogProductCustomOptionUpdateCompletedEventArgs args);
    
    public partial class catalogProductCustomOptionInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductCustomOptionInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductCustomOptionInfoEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductCustomOptionInfoEntity)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductCustomOptionInfoCompletedEventHandler(object sender, catalogProductCustomOptionInfoCompletedEventArgs args);
    
    public partial class catalogProductCustomOptionTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductCustomOptionTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductCustomOptionTypesEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductCustomOptionTypesEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductCustomOptionTypesCompletedEventHandler(object sender, catalogProductCustomOptionTypesCompletedEventArgs args);
    
    public partial class catalogProductCustomOptionValueInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductCustomOptionValueInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductCustomOptionValueInfoEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductCustomOptionValueInfoEntity)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductCustomOptionValueInfoCompletedEventHandler(object sender, catalogProductCustomOptionValueInfoCompletedEventArgs args);
    
    public partial class catalogProductCustomOptionValueListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductCustomOptionValueListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductCustomOptionValueListEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductCustomOptionValueListEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductCustomOptionValueListCompletedEventHandler(object sender, catalogProductCustomOptionValueListCompletedEventArgs args);
    
    public partial class catalogProductCustomOptionValueAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductCustomOptionValueAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductCustomOptionValueAddCompletedEventHandler(object sender, catalogProductCustomOptionValueAddCompletedEventArgs args);
    
    public partial class catalogProductCustomOptionValueUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductCustomOptionValueUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductCustomOptionValueUpdateCompletedEventHandler(object sender, catalogProductCustomOptionValueUpdateCompletedEventArgs args);
    
    public partial class catalogProductCustomOptionValueRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductCustomOptionValueRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductCustomOptionValueRemoveCompletedEventHandler(object sender, catalogProductCustomOptionValueRemoveCompletedEventArgs args);
    
    public partial class catalogProductCustomOptionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductCustomOptionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductCustomOptionListEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductCustomOptionListEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductCustomOptionListCompletedEventHandler(object sender, catalogProductCustomOptionListCompletedEventArgs args);
    
    public partial class catalogProductCustomOptionRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductCustomOptionRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductCustomOptionRemoveCompletedEventHandler(object sender, catalogProductCustomOptionRemoveCompletedEventArgs args);
    
    public partial class salesOrderListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public salesOrderListEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((salesOrderListEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderListCompletedEventHandler(object sender, salesOrderListCompletedEventArgs args);
    
    public partial class salesOrderInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public salesOrderEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((salesOrderEntity)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderInfoCompletedEventHandler(object sender, salesOrderInfoCompletedEventArgs args);
    
    public partial class salesOrderAddCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderAddCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderAddCommentCompletedEventHandler(object sender, salesOrderAddCommentCompletedEventArgs args);
    
    public partial class salesOrderHoldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderHoldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderHoldCompletedEventHandler(object sender, salesOrderHoldCompletedEventArgs args);
    
    public partial class salesOrderUnholdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderUnholdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderUnholdCompletedEventHandler(object sender, salesOrderUnholdCompletedEventArgs args);
    
    public partial class salesOrderCancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderCancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderCancelCompletedEventHandler(object sender, salesOrderCancelCompletedEventArgs args);
    
    public partial class salesOrderShipmentListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderShipmentListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public salesOrderShipmentEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((salesOrderShipmentEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderShipmentListCompletedEventHandler(object sender, salesOrderShipmentListCompletedEventArgs args);
    
    public partial class salesOrderShipmentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderShipmentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public salesOrderShipmentEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((salesOrderShipmentEntity)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderShipmentInfoCompletedEventHandler(object sender, salesOrderShipmentInfoCompletedEventArgs args);
    
    public partial class salesOrderShipmentCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderShipmentCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderShipmentCreateCompletedEventHandler(object sender, salesOrderShipmentCreateCompletedEventArgs args);
    
    public partial class salesOrderShipmentAddCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderShipmentAddCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderShipmentAddCommentCompletedEventHandler(object sender, salesOrderShipmentAddCommentCompletedEventArgs args);
    
    public partial class salesOrderShipmentAddTrackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderShipmentAddTrackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderShipmentAddTrackCompletedEventHandler(object sender, salesOrderShipmentAddTrackCompletedEventArgs args);
    
    public partial class salesOrderShipmentSendInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderShipmentSendInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderShipmentSendInfoCompletedEventHandler(object sender, salesOrderShipmentSendInfoCompletedEventArgs args);
    
    public partial class salesOrderShipmentRemoveTrackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderShipmentRemoveTrackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderShipmentRemoveTrackCompletedEventHandler(object sender, salesOrderShipmentRemoveTrackCompletedEventArgs args);
    
    public partial class salesOrderShipmentGetCarriersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderShipmentGetCarriersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public associativeEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((associativeEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderShipmentGetCarriersCompletedEventHandler(object sender, salesOrderShipmentGetCarriersCompletedEventArgs args);
    
    public partial class salesOrderInvoiceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderInvoiceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public salesOrderInvoiceEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((salesOrderInvoiceEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderInvoiceListCompletedEventHandler(object sender, salesOrderInvoiceListCompletedEventArgs args);
    
    public partial class salesOrderInvoiceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderInvoiceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public salesOrderInvoiceEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((salesOrderInvoiceEntity)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderInvoiceInfoCompletedEventHandler(object sender, salesOrderInvoiceInfoCompletedEventArgs args);
    
    public partial class salesOrderInvoiceCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderInvoiceCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderInvoiceCreateCompletedEventHandler(object sender, salesOrderInvoiceCreateCompletedEventArgs args);
    
    public partial class salesOrderInvoiceAddCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderInvoiceAddCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderInvoiceAddCommentCompletedEventHandler(object sender, salesOrderInvoiceAddCommentCompletedEventArgs args);
    
    public partial class salesOrderInvoiceCaptureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderInvoiceCaptureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderInvoiceCaptureCompletedEventHandler(object sender, salesOrderInvoiceCaptureCompletedEventArgs args);
    
    public partial class salesOrderInvoiceVoidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderInvoiceVoidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderInvoiceVoidCompletedEventHandler(object sender, salesOrderInvoiceVoidCompletedEventArgs args);
    
    public partial class salesOrderInvoiceCancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderInvoiceCancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderInvoiceCancelCompletedEventHandler(object sender, salesOrderInvoiceCancelCompletedEventArgs args);
    
    public partial class salesOrderCreditmemoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderCreditmemoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public salesOrderCreditmemoEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((salesOrderCreditmemoEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderCreditmemoListCompletedEventHandler(object sender, salesOrderCreditmemoListCompletedEventArgs args);
    
    public partial class salesOrderCreditmemoInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderCreditmemoInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public salesOrderCreditmemoEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((salesOrderCreditmemoEntity)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderCreditmemoInfoCompletedEventHandler(object sender, salesOrderCreditmemoInfoCompletedEventArgs args);
    
    public partial class salesOrderCreditmemoCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderCreditmemoCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderCreditmemoCreateCompletedEventHandler(object sender, salesOrderCreditmemoCreateCompletedEventArgs args);
    
    public partial class salesOrderCreditmemoAddCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderCreditmemoAddCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderCreditmemoAddCommentCompletedEventHandler(object sender, salesOrderCreditmemoAddCommentCompletedEventArgs args);
    
    public partial class salesOrderCreditmemoCancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal salesOrderCreditmemoCancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void salesOrderCreditmemoCancelCompletedEventHandler(object sender, salesOrderCreditmemoCancelCompletedEventArgs args);
    
    public partial class catalogInventoryStockItemListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogInventoryStockItemListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogInventoryStockItemEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogInventoryStockItemEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogInventoryStockItemListCompletedEventHandler(object sender, catalogInventoryStockItemListCompletedEventArgs args);
    
    public partial class catalogInventoryStockItemUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogInventoryStockItemUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogInventoryStockItemUpdateCompletedEventHandler(object sender, catalogInventoryStockItemUpdateCompletedEventArgs args);
    
    public partial class catalogInventoryStockItemMultiUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogInventoryStockItemMultiUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogInventoryStockItemMultiUpdateCompletedEventHandler(object sender, catalogInventoryStockItemMultiUpdateCompletedEventArgs args);
    
    public partial class shoppingCartCreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal shoppingCartCreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void shoppingCartCreateCompletedEventHandler(object sender, shoppingCartCreateCompletedEventArgs args);
    
    public partial class shoppingCartInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal shoppingCartInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public shoppingCartInfoEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((shoppingCartInfoEntity)(this.results[0]));
            }
        }
    }
    
    public delegate void shoppingCartInfoCompletedEventHandler(object sender, shoppingCartInfoCompletedEventArgs args);
    
    public partial class shoppingCartTotalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal shoppingCartTotalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public shoppingCartTotalsEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((shoppingCartTotalsEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void shoppingCartTotalsCompletedEventHandler(object sender, shoppingCartTotalsCompletedEventArgs args);
    
    public partial class shoppingCartOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal shoppingCartOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void shoppingCartOrderCompletedEventHandler(object sender, shoppingCartOrderCompletedEventArgs args);
    
    public partial class shoppingCartLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal shoppingCartLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public shoppingCartLicenseEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((shoppingCartLicenseEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void shoppingCartLicenseCompletedEventHandler(object sender, shoppingCartLicenseCompletedEventArgs args);
    
    public partial class shoppingCartProductAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal shoppingCartProductAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void shoppingCartProductAddCompletedEventHandler(object sender, shoppingCartProductAddCompletedEventArgs args);
    
    public partial class shoppingCartProductUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal shoppingCartProductUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void shoppingCartProductUpdateCompletedEventHandler(object sender, shoppingCartProductUpdateCompletedEventArgs args);
    
    public partial class shoppingCartProductRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal shoppingCartProductRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void shoppingCartProductRemoveCompletedEventHandler(object sender, shoppingCartProductRemoveCompletedEventArgs args);
    
    public partial class shoppingCartProductListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal shoppingCartProductListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void shoppingCartProductListCompletedEventHandler(object sender, shoppingCartProductListCompletedEventArgs args);
    
    public partial class shoppingCartProductMoveToCustomerQuoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal shoppingCartProductMoveToCustomerQuoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void shoppingCartProductMoveToCustomerQuoteCompletedEventHandler(object sender, shoppingCartProductMoveToCustomerQuoteCompletedEventArgs args);
    
    public partial class shoppingCartCustomerSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal shoppingCartCustomerSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void shoppingCartCustomerSetCompletedEventHandler(object sender, shoppingCartCustomerSetCompletedEventArgs args);
    
    public partial class shoppingCartCustomerAddressesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal shoppingCartCustomerAddressesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void shoppingCartCustomerAddressesCompletedEventHandler(object sender, shoppingCartCustomerAddressesCompletedEventArgs args);
    
    public partial class shoppingCartShippingMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal shoppingCartShippingMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void shoppingCartShippingMethodCompletedEventHandler(object sender, shoppingCartShippingMethodCompletedEventArgs args);
    
    public partial class shoppingCartShippingListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal shoppingCartShippingListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public shoppingCartShippingMethodEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((shoppingCartShippingMethodEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void shoppingCartShippingListCompletedEventHandler(object sender, shoppingCartShippingListCompletedEventArgs args);
    
    public partial class shoppingCartPaymentMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal shoppingCartPaymentMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void shoppingCartPaymentMethodCompletedEventHandler(object sender, shoppingCartPaymentMethodCompletedEventArgs args);
    
    public partial class shoppingCartPaymentListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal shoppingCartPaymentListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public shoppingCartPaymentMethodResponseEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((shoppingCartPaymentMethodResponseEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void shoppingCartPaymentListCompletedEventHandler(object sender, shoppingCartPaymentListCompletedEventArgs args);
    
    public partial class shoppingCartCouponAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal shoppingCartCouponAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void shoppingCartCouponAddCompletedEventHandler(object sender, shoppingCartCouponAddCompletedEventArgs args);
    
    public partial class shoppingCartCouponRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal shoppingCartCouponRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void shoppingCartCouponRemoveCompletedEventHandler(object sender, shoppingCartCouponRemoveCompletedEventArgs args);
    
    public partial class catalogProductTagListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductTagListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductTagListEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductTagListEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductTagListCompletedEventHandler(object sender, catalogProductTagListCompletedEventArgs args);
    
    public partial class catalogProductTagInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductTagInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductTagInfoEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductTagInfoEntity)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductTagInfoCompletedEventHandler(object sender, catalogProductTagInfoCompletedEventArgs args);
    
    public partial class catalogProductTagAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductTagAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public associativeEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((associativeEntity[])(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductTagAddCompletedEventHandler(object sender, catalogProductTagAddCompletedEventArgs args);
    
    public partial class catalogProductTagUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductTagUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductTagUpdateCompletedEventHandler(object sender, catalogProductTagUpdateCompletedEventArgs args);
    
    public partial class catalogProductTagRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductTagRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductTagRemoveCompletedEventHandler(object sender, catalogProductTagRemoveCompletedEventArgs args);
    
    public partial class giftMessageSetForQuoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal giftMessageSetForQuoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public giftMessageResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((giftMessageResponse)(this.results[0]));
            }
        }
    }
    
    public delegate void giftMessageSetForQuoteCompletedEventHandler(object sender, giftMessageSetForQuoteCompletedEventArgs args);
    
    public partial class giftMessageSetForQuoteItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal giftMessageSetForQuoteItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public giftMessageResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((giftMessageResponse)(this.results[0]));
            }
        }
    }
    
    public delegate void giftMessageSetForQuoteItemCompletedEventHandler(object sender, giftMessageSetForQuoteItemCompletedEventArgs args);
    
    public partial class giftMessageSetForQuoteProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal giftMessageSetForQuoteProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public giftMessageResponse[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((giftMessageResponse[])(this.results[0]));
            }
        }
    }
    
    public delegate void giftMessageSetForQuoteProductCompletedEventHandler(object sender, giftMessageSetForQuoteProductCompletedEventArgs args);
    
    public partial class catalogProductDownloadableLinkAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductDownloadableLinkAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductDownloadableLinkAddCompletedEventHandler(object sender, catalogProductDownloadableLinkAddCompletedEventArgs args);
    
    public partial class catalogProductDownloadableLinkListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductDownloadableLinkListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public catalogProductDownloadableLinkInfoEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((catalogProductDownloadableLinkInfoEntity)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductDownloadableLinkListCompletedEventHandler(object sender, catalogProductDownloadableLinkListCompletedEventArgs args);
    
    public partial class catalogProductDownloadableLinkRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal catalogProductDownloadableLinkRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void catalogProductDownloadableLinkRemoveCompletedEventHandler(object sender, catalogProductDownloadableLinkRemoveCompletedEventArgs args);
}
